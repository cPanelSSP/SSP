#!/usr/bin/perl

# SSP - System Status Probe
# Find and print useful troubleshooting info on cPanel servers

use strict;
use warnings;
use File::Find;
use IO::Socket::INET;
use Sys::Hostname;
use Term::ANSIColor qw(:constants);
use Storable;
use POSIX;
use Time::Local;
use IPC::Open3;

if ( !-d '/usr/local/cpanel' ) {
    die '/usr/local/cpanel not found';
}

if ( $^O ne 'linux' ) {
    die "Unknown OS: $^O (only Linux is supported)";
}

if ( $< != 0 ) {
    die "SSP must be run as root\n";
}

$ENV{'PATH'} = '/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin';

my $version = '4.99.87';

$|                          = 1;
$Term::ANSIColor::AUTORESET = 1;

######################
##  BEGIN GLOBALS   ##
######################

my $cpanel_version        = get_cpanel_version();
my ( $cpanel_version_parent, $cpanel_version_major, $cpanel_version_minor, $cpanel_version_build ) = split /\./, $cpanel_version;
my $hostname              = hostname();
my $os                    = get_os();
my $is_cloudlinux         = 0;
my $external_ip_address;
my $TIERS                 = get_tiers_file();
my @local_ipaddrs_list    = get_local_ipaddrs();
my @process_list          = get_process_list();
my %process; &get_process_pid_hash(\%process);
my %port; &get_lsof_port_hash(\%port);
my %hostinfo              = get_hostinfo();
my %cpuinfo               = get_cpuinfo();
my %mysql_conf; &get_mysql_conf(\%mysql_conf);
my $mysql_datadir         = get_mysql_datadir(); # needs %mysql_conf
my $mysql_error_log       = get_mysql_error_log(); # needs %mysql_conf
my @mysql_rpm_versions;        # certain installed rpms that begin with MySQL- (e.g., MySQL-server, etc)
my @custom_opt_mods;           # items in /var/cpanel/easy/apache/custom_opt_mods/
my @usr_local_cpanel_hooks;    # items in /usr/local/cpanel/hooks/
my @easyapache_templates;      # items in /var/cpanel/easy/apache/profile/
my @extended_rpm_list;         # rpm -qa --queryformat '%{ARCH}\t%{NAME}\t%{VERSION}\t%{RELEASE}\n'
my @rpm_list;                  # rpm -qa
my %cpconf;                    # cpanel.config
my %pureftpdconf;              # /etc/pure-ftpd.conf
my @apache_version_output;     # httpd -v
my @apache_modules_output;     # httpd -M
my ( $lsws_full_version, $lsws_numeric_version ) = get_lsws_version();

my ( $phpversion, $php5version, $php4version, $php4handler, $php5handler, $suexec );


if ( -x '/usr/local/apache/bin/httpd' ) {
    @apache_version_output = split /\n/, timed_run( 0, '/usr/local/apache/bin/httpd', '-v' );
    @apache_modules_output = split /\n/, timed_run( 0, '/usr/local/apache/bin/httpd', '-M' );
}

# TODO: use +c 15 so the entire process name is displayed if >9 chars
my @lsof_80 = split /\n/, timed_run( 0, 'lsof', '-n', '-i', 'tcp:80' );
my @phpini  = get_phpini();

{
    if ( open( my $cpconf_fh, '<', '/var/cpanel/cpanel.config' ) ) {
        local $/ = undef;
        %cpconf = map { ( split( /=/, $_, 2 ) )[ 0, 1 ] } split( /\n/, readline($cpconf_fh) );
        close $cpconf_fh;
    }
    else {
        die "/var/cpanel/cpanel.config could not be opened. Unable to proceed.\n";
    }
}

chomp( my @libkeyutils_files = build_libkeyutils_file_list());          # must come before the malware checks
my $libkeyutils_files_ref = \@libkeyutils_files;

my $crit_buffer; # Critical output to be printed at the end

######################
##  END GLOBALS     ##
######################


print "\n";
for ( 1 .. 3 ) {
    print BOLD GREEN ON_RED "\tPlease DO NOT paste output from SSP into tickets unless it is relevant to an issue" . RESET . "\n";
}

## [CRIT] -- only stuff that we should check as early as possible
check_for_hacked_server_touchfile();
check_for_multiple_tech_logins();

## [INFO]
print "\n";
check_for_dnsonly();
print_tip();
print_version();
print_hostname();
print_os();
print_kernel_and_cpu();
print_cpanel_info();
check_for_cpanel_update();
print_uptime();
check_for_clustering();
print_apache_info();
print_lsws_info();
check_for_lsws_update();
print_php_configuration();
check_sysinfo();
check_for_remote_mysql();
print_if_using_mydns_or_nsd();
print_if_using_modruid2();
print_mysql_version();
print_backups_info();
print_mailserver_info();
check_for_custom_zonetemplates();

## [WARN]
check_port_hash();
check_selinux_status();
check_runlevel();
check_for_missing_root_cron();
check_for_missing_usr_bin_crontab();
check_if_upcp_is_running();
check_valid_upcp();
check_interface_lo();
check_cpanelconfig_filetype();
check_cpanelsync_exclude();
check_for_lve_environment();
check_for_rawopts();
check_for_rawenv();
check_for_custom_opt_mods();
check_for_local_apache_templates();
check_for_local_template_account_suspensions_include();
check_for_local_makecpphp_template();
check_for_custom_apache_includes();
check_for_tomcatoptions();
check_for_sneaky_htaccess();
check_perl_sanity();
check_for_non_default_permissions();
check_awstats_permissions();
check_var_cpanel_users_files_ownership();
check_root_suspended();
check_limitsconf();
check_disk_space();
check_disk_inodes();
check_for_hooks_in_scripts_directory();
check_for_huge_logs();
check_easy_skip_cpanelsync();
check_pkgacct_override();
check_for_gdm();
check_for_redhat_firewall();
check_easyapache();
check_for_easyapache_hooks();
check_for_home_noexec();
check_for_nat();
check_for_oracle_linux();
check_for_usr_local_cpanel_hooks();
check_for_sql_safe_mode();
check_for_domain_forwarding();
check_for_empty_apache_templates();
check_for_empty_postgres_config();
check_for_empty_easyapache_profiles();
check_for_missing_timezone_from_phpini();
check_for_proc_mdstat_recovery();
check_usr_local_cpanel_path_for_symlinks();
check_for_system_mem_below_512M();
check_yumconf_sanity();
check_for_cpanel_files();
check_bash_history_for_certain_commands();
check_wwwacctconf_for_incorrect_minuid();
check_roots_cron_for_certain_commands();
check_for_missing_or_commented_customlog();
check_for_cpsources_conf();
check_for_apache_rlimits();
check_for_usr_local_lib_libz_so();
check_for_non_default_modsec_rules();
check_etc_hosts_sanity();
check_for_empty_or_missing_files();
check_for_apache_listen_host_is_localhost();
check_roundcube_mysql_pass_mismatch();
check_for_11_30_scripts_not_a_symlink();
check_for_hooks_from_var_cpanel_hooks_yaml();
check_mysqld_warnings_errors();
check_mysql_config();
check_for_C_compiler_optimization();
check_perl_version_less_than_588();
check_for_low_ulimit_for_root();
check_for_fork_bomb_protection();
check_for_license_info();
check_for_harmful_php_mode_600_cron();
check_for_cPanel_lower_than_11_30_7_3();
check_for_custom_exim_conf_local();
check_for_maxclients_or_maxrequestworkers_reached();
check_for_non_default_umask();
check_for_multiple_imagemagick_installs();
check_for_custom_locales();
check_eximstats_size();
check_eximstats_corrupt();
check_for_clock_skew();
check_for_zlib_h();
check_if_httpdconf_ipaddrs_exist();
check_distcache_and_libapr();
check_for_custom_postgres_repo();
check_for_rpm_overrides();
check_for_odd_yum_conf();
check_var_cpanel_immutable_files();
check_for_noxsave_in_grub_conf();
check_for_rpm_dist_ver_unknown();
check_for_homeloader_php_extension();
check_for_networkmanager();
check_for_dhclient();
check_for_var_cpanel_roundcube_install();
check_for_missing_etc_localtime();
check_for_immutable_files();
check_for_immutable_dirs();
check_for_cloudlinux_mysql_gov();
check_cpanel_config_for_low_maxmem();
check_pure_ftpd_conf_for_upload_script_and_dead();    #must come after check_cpanel_config_for_low_maxmem
check_for_PERL5LIB_env_var();
check_for_disabled_services();
check_for_cpbackup_exclude_everything();
check_for_usr_local_include_jpeglib_h();
check_for_bw_module_and_more_than_1024_vhosts();
check_for_uppercase_chars_in_hostname();
check_for_stale_upgrade_in_progress_txt();
check_for_bad_permissions_on_named_ca();
check_for_use_compiled_dnsadmin();
check_for_mysql_root_pass_with_single_quote();
check_for_jailshell_additional_mounts_trailing_slash();
check_for_allow_query_localhost();
check_for_nocloudlinux_touchfile();
check_for_phphandler_and_opcode_caching_incompatibility();
check_for_invalid_HOMEDIR();
check_for_unsupported_options_in_phpini(); # case 75397
check_for_suphp_but_no_fileprotect();
check_for_assp_hates_appconfig_cron();
check_for_missing_var_cpanel_dynamicui_ftp();
check_if_backup_dir_is_nfs();
check_if_hostname_missing_from_localdomains();
check_for_eximstats_newline();
check_for_nfs();
check_for_processes_killed_by_lfd();
check_for_processes_killed_by_prm();
check_for_broken_userdatadomains();
check_ssl_db_perms();
check_for_nat_plus_mod_evasive();
check_for_stray_index_php();
check_for_missing_cpanelconfig_items();
check_for_port_80_not_apache();
check_for_missing_groups();
check_for_cgihidepass();
check_for_noquotafs();
check_for_mod_rpaf();
check_for_mod_spdy();
check_for_roundcube_overlay();
check_for_hostname_park_zoneexists();
check_for_pgpass_colon_in_password_field();
check_for_dirs_that_break_ea();
check_for_extra_uid_0_user();
check_for_easyparams_attributes();
check_for_stale_backup_pidfile();
check_for_allow_update_in_named_conf();
check_for_mailman_low_uid();
check_for_missing_skiphttpauth();
check_for_MPM_ITK_and_suexec();
check_for_modruid2_warnings();
check_for_broken_mysqldump();
check_exim_log_sanity();
check_for_readonly_filesystems();

# [3RDP]
check_smtp_processes();
check_for_varnish();
check_for_nginx();
check_for_mailscanner();
check_for_apf();
check_for_csf();
check_for_prm();
check_for_les();
check_for_1h();
check_for_webmin();
check_for_symantec();
check_for_newrelic();
check_for_zamfoo();         # Master reseller software
check_for_whmreseller();    # Master reseller software
check_for_whmphp();         # Master reseller software
check_for_cpremote();
check_for_els();
check_for_whmxtra();
check_for_usr_local_mis();

# [CRIT] - Anything that requires a pre-defined response to be sent, escalation, or extreme care.
check_for_unsupported_php();                                    # Extreme care!
check_for_UMBREON_rootkit();                                    # malware
check_for_jynx2_rootkit();                                      # malware
check_for_cdorked_A();                                          # malware
check_for_cdorked_B();                                          # malware
check_for_libkeyutils_filenames();                              # malware
#check_for_unowned_libkeyutils_files($libkeyutils_files_ref);    # malware
check_sha1_sigs_libkeyutils($libkeyutils_files_ref);            # malware
check_sha1_sigs_httpd();                                        # malware
check_sha1_sigs_named();                                        # malware
check_sha1_sigs_ssh();                                          # malware
check_sha1_sigs_ssh_add();                                      # malware
check_sha1_sigs_sshd();                                         # malware
check_for_ebury_ssh_G();                                        # malware
check_for_ebury_ssh_banner();                                   # malware
check_for_ebury_root_file();                                    # malware
check_for_bg_botnet();                                          # malware

# These are run closer to the end since it has the potential to take the longest due to RPM usage
build_rpm_list();
my $openssl_rpm_changelog = get_openssl_rpm_changelog();

# These require build_rpm_list() to have been run, so that @rpm_list is populated
check_for_ebury_3_digit_rpms();                                 # malware
check_for_openssl_heartbleed_bug();                             # advisory
check_for_openssl_secadv_20140605();                            # advisory
populate_mysql_rpm_versions_array();
check_for_mysql_4();
check_for_additional_rpms();
check_mysql_rpm_mismatch();
check_php_libmysqlclient_mismatch();
check_for_percona_rpms();
check_for_duplicate_rpms();
check_for_better_linux();
check_for_kernel_headers_rpm();

print_info2('Done.');

if ( $crit_buffer ) {
    print_magenta("\n\nThere was critical-level output above, here it is again:");
    print $crit_buffer; 
}

# All checks for DNSONLY go here
sub check_for_dnsonly {
    if ( -e '/var/cpanel/dnsonly' ) {

        print_version();
        print_start("\t\tDNSONLY: ");
        print_warning("/var/cpanel/dnsonly detected, assuming DNSONLY\n");

        ## [CRIT] -- only stuff that we should check as early as possible
        check_for_hacked_server_touchfile();
        check_for_multiple_tech_logins();

        ## [INFO]
        print_hostname();
        print_os();
        print_kernel_and_cpu();
        print_cpanel_info();
        check_for_cpanel_update();
        print_uptime();
        check_for_clustering();
        check_sysinfo();

        ## [WARN]
        check_port_hash();
        check_selinux_status();
        check_runlevel();
        check_for_missing_root_cron();
        check_if_upcp_is_running();
        check_interface_lo();
        check_cpanelconfig_filetype();
        check_cpanelsync_exclude();
        check_for_lve_environment();
        check_perl_sanity();
        check_for_non_default_permissions();
        check_limitsconf();
        check_disk_space();
        check_disk_inodes();
        check_for_gdm();
        check_for_redhat_firewall();
        check_for_home_noexec();
        check_for_nat();
        check_for_oracle_linux();
        check_for_proc_mdstat_recovery();
        check_usr_local_cpanel_path_for_symlinks();
        check_for_system_mem_below_512M();
        check_yumconf_sanity();
        check_for_cpanel_files();
        check_bash_history_for_certain_commands();
        check_roots_cron_for_certain_commands();
        check_for_PERL5LIB_env_var();

        # check_for_cpsources_conf();       // does this exist on DNSONLY by default?
        check_etc_hosts_sanity();
        check_for_C_compiler_optimization();
        check_perl_version_less_than_588();
        check_for_fork_bomb_protection();
        check_for_cPanel_lower_than_11_30_7_3();
        check_for_non_default_umask();
        check_for_clock_skew();
        check_for_percona_rpms();
        check_for_duplicate_rpms();
        check_for_rpm_overrides();
        check_var_cpanel_immutable_files();
        check_for_noxsave_in_grub_conf();
        check_for_networkmanager();
        check_for_disabled_services();
        check_for_harmful_php_mode_600_cron();
        check_for_readonly_filesystems();

        ## [3RDP]
        check_for_apf();
        check_for_csf();
        check_for_prm();
        check_for_les();
        check_for_1h();
        check_for_webmin();
        check_for_symantec();

        ## [CRIT]
        check_for_openssl_heartbleed_bug();
        check_for_openssl_secadv_20140605();
        check_for_UMBREON_rootkit();                                    # malware
        check_for_jynx2_rootkit();                                      # malware
        check_for_libkeyutils_filenames();                              # malware
#        check_for_unowned_libkeyutils_files($libkeyutils_files_ref);    # malware
        check_sha1_sigs_libkeyutils($libkeyutils_files_ref);            # malware
        check_sha1_sigs_httpd();                                        # malware
        check_sha1_sigs_named();                                        # malware
        check_sha1_sigs_ssh();                                          # malware
        check_sha1_sigs_ssh_add();                                      # malware
        check_sha1_sigs_sshd();                                         # malware
        check_for_ebury_ssh_G();                                        # malware
        check_for_ebury_ssh_banner();                                   # malware
        check_for_ebury_root_file();                                    # malware
        check_for_bg_botnet();                                          # malware

        print_info2('Done.');

        if ( $crit_buffer ) {
            print_magenta("\n\nThere was critical-level output above, here it is again:");
            print $crit_buffer; 
        }

        exit;
    }
}

sub get_phpini {
    my $phpini = '/usr/local/lib/php.ini';
    return if !-f $phpini;

    if ( open my $fh, '<', $phpini ) {
        while (<$fh>) {
            next if (/^(?:;|$|\[)/);
            chomp;
            push @phpini, $_;
        }
        close $fh;
    }

    return @phpini;
}


sub get_cpanel_version {
    my $cpanel_version_file = '/usr/local/cpanel/version';

    if ( open my $file_fh, '<', $cpanel_version_file ) {
        while (<$file_fh>) {
            chomp( $cpanel_version = $_ );
        }
        close $file_fh;
    }

    if ( $cpanel_version =~ /(\d+\.\d+\.\d+\.\d+)/ ) {
        return $cpanel_version;
    }
    else {
        return 'unknown';
    }
}

sub version_cmp { # should only be used by version_compare()
    my ( $parent1, $major1, $minor1, $build1 ) = split /[\._]/, $_[0];
    my ( $parent2, $major2, $minor2, $build2 ) = split /[\._]/, $_[1];
    return $parent1 <=> $parent2 || $major1 <=> $major2 || $minor1 <=> $minor2 || $build1 <=> $build2;
}

sub version_compare {
    # example: return if version_compare($ver_string, qw( >= 1.2.3.3 ));
    # Must be a four-digit version separated by periods.
    my ($ver1, $mode, $ver2) = @_;
  # Shamelessly copied the comparison logic out of Cpanel::Version::Compare
    my %modes = (
        '>' => sub {
              return if $_[0] eq $_[1];
              return version_cmp(@_) > 0;
          },
          '<' => sub {
              return if $_[0] eq $_[1];
              return version_cmp(@_) < 0;
          },
          '==' => sub { return $_[0] eq $_[1] || version_cmp(@_) == 0; },
          '!=' => sub { return $_[0] ne $_[1] && version_cmp(@_) != 0; },
          '>=' => sub {
              return 1 if $_[0] eq $_[1];
              return version_cmp(@_) >= 0;
          },
          '<=' => sub {
              return 1 if $_[0] eq $_[1];
              return version_cmp(@_) <= 0;
         }
    );
    return if ( ! exists $modes{$mode} );
    return $modes{$mode}->( $ver1, $ver2 );
}

sub cpanel_version_is {
    # example: return if cpanel_version_is(qw( >= 11.42.1.16 ));
    return if $cpanel_version eq "unknown";
    my ($mode, $ver) = @_;
    return version_compare($cpanel_version, $mode, $ver);
}

sub timed_run { # Borrowed from Cpanel::SafeRun::Timed and modified
    my ( $timer, @PROGA ) = @_;
    $timer = $timer ? $timer : 15; # A timer value of 0 means use the default, currently 15.
    return if ( substr( $PROGA[0], 0, 1 ) eq '/' && !-x $PROGA[0] );

    open( my $save_stderr_fh, '>&STDERR' );
    open( STDERR, '>', '/dev/null' );

    my $output = undef;
    my $complete = 0;
    my $pid;
    my $fh;    # Case 63723: must declare $fh before eval block in order to avoid unwanted implicit waitpid on die
    eval {
        local $SIG{'__DIE__'} = 'DEFAULT';
        local $SIG{'ALRM'} = sub { $output = undef; print RED ON_BLACK "Timeout while executing: " . join( ' ', @PROGA ) . "\n"; die; };
        alarm($timer);
        if ( $pid = open( $fh, '-|' ) ) {
            local $/;
            $output = readline($fh);
            close($fh);
        }
        elsif ( defined $pid ) {
            open( STDIN, '<', '/dev/null' );
            exec(@PROGA) or exit 1;
        }
        else {
            warn 'Error while executing: [' . join( ' ', @PROGA ) . ']: ' . $!;
            alarm(0);
            open( STDERR, '>&=' . fileno($save_stderr_fh) );
            return;
        }
        $complete = 1;
        alarm 0;
    };
    alarm 0;
    if ( !$complete && $pid && $pid > 0 ) {
        kill( 15, $pid );    #TERM
        sleep(2);            # Give the process a chance to die 'nicely'
        kill( 9, $pid );     #KILL
    }
    open( STDERR, '>&=' . fileno($save_stderr_fh) );
    return $output;
}

sub timed_run_trap_stderr { # Borrowed from Cpanel::SafeRun::Timed and modified
    my ( $timer, @PROGA ) = @_;
    $timer = $timer ? $timer : 15; # A timer value of 0 means use the default, currently 15.
    return if ( substr( $PROGA[0], 0, 1 ) eq '/' && !-x $PROGA[0] );

    open( my $save_stderr_fh, '>&STDERR' );
    open( STDERR, '>', '/dev/null' );

    my $output = undef;
    my $complete = 0;
    my $pid;
    my $fh;    # Case 63723: must declare $fh before eval block in order to avoid unwanted implicit waitpid on die
    eval {
        local $SIG{'__DIE__'} = 'DEFAULT';
        local $SIG{'ALRM'} = sub { $output = undef; print RED ON_BLACK "Timeout while executing: " . join( ' ', @PROGA ) . "\n"; die; };
        alarm($timer);
        if ( $pid = open( $fh, '-|' ) ) {
            local $/;
            $output = readline($fh);
            close($fh);
        }
        elsif ( defined $pid ) {
            open( STDIN, '<', '/dev/null' );
            open( STDERR, '>&STDOUT' );
            exec(@PROGA) or exit 1;
        }
        else {
            warn 'Error while executing: [' . join( ' ', @PROGA ) . ']: ' . $!;
            alarm(0);
            open( STDERR, '>&=' . fileno($save_stderr_fh) );
            return;
        }
        $complete = 1;
        alarm 0;
    };
    alarm 0;
    if ( !$complete && $pid && $pid > 0 ) {
        kill( 15, $pid );    #TERM
        sleep(2);            # Give the process a chance to die 'nicely'
        kill( 9, $pid );     #KILL
    }
    open( STDERR, '>&=' . fileno($save_stderr_fh) );
    return $output;
}

sub get_local_ipaddrs {
    my @ifconfig = split /\n/, timed_run( 0, 'ifconfig', '-a' );
    for my $line (@ifconfig) {
        if ( $line =~ m{ (\d+\.\d+\.\d+\.\d+) }xms ) {
            my $ipaddr = $1;
            unless ( $ipaddr =~ m{ \A 127\. }xms ) {
                push @local_ipaddrs_list, $ipaddr;
            }
        }
    }

    return @local_ipaddrs_list;
}

sub get_os {
    chomp( my $_os = lc timed_run( 0, 'uname') );
    return $_os;
}

# ripped from /usr/local/cpanel/Cpanel/Sys/OS.pm
sub get_release_version {
    my $ises = 0;
    my $ver;

    if ( open my $fh, '<', '/etc/redhat-release' ) {
        my $line = readline $fh;
        close $fh;
        chomp $line;
        if    ( $line =~ m/(?:Corporate|Advanced\sServer|Enterprise)/i ) { $ises = 1; }
        elsif ( $line =~ /CloudLinux|CentOS/i )                          { $ises = 2; }
        elsif ( $line =~ /WhiteBox/i )                                   { $ises = 3; }
        elsif ( $line =~ /caos/i )                                       { $ises = 4; }
        if    ( $line =~ /(\d+\.\d+)/ )                                  { $ver  = $1; }
        elsif ( $line =~ /(\d+)/ )                                       { $ver  = $1; }
    }

    if ($ises) {
        return ( $ver, $ises );
    }
    else {
        return ( $ver, 0 );
    }
}

sub print_version {
    print BOLD YELLOW ON_BLACK "\tSSP $version\n\n";
}

sub print_tip {
    my @tips = (
        '[FB 86549] (Fixed in 11.42.1.1) cPHulk may report root logins to Pure-FTPd despite no evidence being found',
        '[FB 78617] (By design) sysup always installs bind',
        '[FB 75793] (By design) Proxy subdomains are not created for addon domains',
        '[FB 73369] Can\'t log into SquirrelMail, but Horde and Roundcube work? Check if webmail pass contains "odd" characters',
        '[FB 72801] (By design) File Manager creates new files with 0600 perms, even when saving an existing file as a new one',
        '[FB 72733] (By design) File Manager\'s "Compress" feature has a hard coded timeout due to using cPanel\'s form upload logic',
        '[FB 63530] When setting up a remote MySQL server, that server must have the openssh-clients package installed',
        '[FB 63193] File Manager showing "Out of memory" in cPanel error_log? Try renaming $HOME/$USER/.cpanel/datastore/SYSTEMMIME',
        '[FB 62819] "License File Expired: LTD: 1334782495 NOW: 1246416504 FUT!" likely just means the server clock is wrong',
        '[FB 62054] (By design) The "Dedicated IP" box can only be modified when creating a package - not when editing',
        '[FB 61735] (By design) "/u/l/c/whostmgr/bin/whostmgr2 --updatetweaksettings" destroys custom proxy subdomain records. Use WHM >> Tweak Settings instead.',
        '[FB 59450] (By design) Email quotas cannot exceed 2048MB, but they can be unlimited',
        '[FB 58625] Apache 2.0.x links to the wrong PCRE libs. This can cause preg_match*() errors, and "PCRE is not compiled with UTF-8 support"',
        '[FB 57237] (By design) Per ISO 3166-1, the country code for the UK is GB (not UK). Look for this in WHM >> Generate an SSL Certificate [...]',
        '[FB 50745] (By design) The cPanel UI displays differently (more columns than rows) when changing your locale',
        '[FB 46853] Customer complaining that they can\'t log into cPanel as root? Update FB 46853',
        '[FB 44884] upcp resets Mailman lists\' hostnames. pre/postupcp hooks workaround in ticket 3541643',
        '[FB 42027] "Recently Uploaded Cgi Script Mail" scans and sends email alerts about downloaded files too',
        '[FB 21774] Pure-FTPd is not linked against libwrap. As such, Host Access Control does nothing for it',
        'The cpanel-postgresql* packages are for phpPgAdmin. The postgresql-* packages are for PostgreSQL',
        'mod_userdir URLs (/~username) are not compatible with FCGI when Apache\'s suexec is enabled (cP Docs: tinyurl.com/bbd8fn2)',
        'For a list of obscure issues, see the RareIssues wiki article',
        '11.35+: Use /scripts/check_cpanel_rpms to fix problems in /usr/local/cpanel/3rdparty/  - not checkperlmodules',
        'php.ini for phpMyAdmin, phpPgAdmin, Horde, and RoundCube can be found in /usr/local/cpanel/3rdparty/etc/',
        'If Dovecot/POP/IMAP dies every day around the same time, the server\'s clock could be skewed. Check /var/log/maillog for "moved backwards"',
        '"Allowed memory size of x bytes exhausted" when uploading a db via phpMyAdmin may be resolved by increasing max_allowed_packet',
        'Need to edit php.ini for Horde, RoundCube, phpMyAdmin, or phpPgAdmin? Edit /u/l/c/3rdparty/etc/php.ini, then run /u/l/c/b/install_php_inis',
        'Seeing "domainadmin" errors (e.g. "domainadmin-domainexistsglobal")? Check the Domainadmin-Errors wiki article',
        'Transfers showing "sshcmdpermissiondeny"? Check for modified openssh-clients package (see ticket 3664533)',
        'Learn how cPanel 11.36+ handles rpms: http://go.cpanel.net/rpmversions',
        'Use "rlog <file>" to see a file\'s revision history, and "co -p1.1 <file>" (for example) to see that revision',
        'Files under revision control: fstab, localdomains, named.conf, passwd, shadow, trueuserowners, httpd.conf, php.ini (system and cPanel)',
        'Imagick install issues on PHP 5.4? You may need to run \'pear config-set preferred_state beta\' (see ticket 3754991)',
        'Need to enable ZTS support for PHP? Try \'--enable-maintainer-zts\' (see ticket 3769493)',
        'WHM\'s "Apache mod_userdir Tweak" can be toggled via /scripts/userdirctl',
        'Issues with MySQL for a single user? Check for /home/${USER}/.my.cnf',
        'Services reported as failing while backups are running? chksrvd may be simply timing out due to excessive disk I/O',
        'Blank page in File Manager\'s HTML Editor and iconv "illegal input sequence" in cPanel error_log? Try windows-1251 encoding (see ticket 4088633)',
        'Older CentOS 5.x and CloudLinux 5.x do not support SNI. See the "SNI" wiki article for more info',
        'domlogs are created 0644 by default. cpanellogd changes permissions on them to 0640 a few minutes later',
        'cPanel >> Error Log only searches "recent" logs in Apache\'s error_log . Showing as blank? Maybe there are no recent errors',
        'Horde showing "server configuration did not allow file to be uploaded"? Check disk/inode usage on /tmp',
        'IMAP/webmail showing no email? The cPanel account may have been over its quota. Try renaming dovecot-uidlist, send account an email (see ticket 4314723)',
        'ClamAV not scanning emails? Check if /var/clamd is missing. This will be reflected in Exim\'s logs as well',
        'Use custom_vhost_template_ap(1|2) in userdata files to make changes for an individual vhost',
        'File Manager upload size limits can be adjusted at WHM >> Tweak Settings >> Max HTTP submission size',
        '/var/cpanel/conf/apache/local can potentially cause issues. See ticket 3915299 for an example',
        'System backups are not uploaded via FTP by default, requires manual config. See http://docs.cpanel.net/twiki/bin/view/AllDocumentation/WHMDocs/SystemBackups',
        '$PATH may differ when executing something via cron rather than the command line. See ticket 4419531',
        '"failed to open scan directory /var/spool/exim/scan/[...]: Too many links" could mean a directory has reached limit of 32,000 files/dirs',
        'If innodb_force_recovery is enabled in the MySQL configuration, this can sometimes prevent mysqldump from working (see ticket 5193581).'
    );

    my $num  = int rand scalar @tips;
    print BOLD WHITE ON_BLACK "\tDid you know? $tips[$num]" . RESET . "\n\n";
}

sub get_tiers_file {
    local $SIG{'ALRM'} = sub { return (); };
    alarm 5;

    my $sock = IO::Socket::INET->new(
        PeerAddr => 'httpupdate.cpanel.net',
        PeerPort => '80',
        Proto    => 'tcp',
        Timeout  => 3,
    );

    if ($sock) {
        print $sock "GET /cpanelsync/TIERS HTTP/1.1\r\nHost: httpupdate.cpanel.net\r\n\r\n";
        sysread $sock, $TIERS, 1000;
        close $sock;
    }

    alarm 0;

    return $TIERS;
}

sub get_process_list { # Usage of this needs to be deprecated in favor of the %process hash
    return split /\n/, timed_run( 0, 'ps', 'axwwwf', '-o', 'user,pid,cmd' );
}

sub get_process_pid_hash ($) {
    my ($href) = @_;
    for ( split /\n/, timed_run( 0, 'ps', 'axwww', '-o', 'user,pid,ppid,cmd' ) ) {
        # nobody    5403  1666 /usr/local/apache/bin/httpd -k start -DSSL
        if ( m{ ^ ([^\s]+) \s+ (\d+) \s+ (\d+) \s+ (.*?) \s* $ }xms ) {
            ${$href}{$2}{USER} = $1;
            ${$href}{$2}{PPID} = $3;
            ${$href}{$2}{CMD} = $4;
        }
    }
}

sub get_lsof_port_hash ($) {
    my ($href) = @_;
    for ( split /\n/, timed_run( 0, 'lsof', '+c15', '-n', '-P', '-i' ) ) {
        # cmd will be max 15 characaters due to lsof limitation
        # Example from CentOS 6:
        # spamd           1781     root    5u  IPv4  10887      0t0  TCP 127.0.0.1:783 (LISTEN)
        # nc      9468 root    3u  IPv6  84415      0t0  TCP [::1]:25 (LISTEN)
        # Example from an older CentOS 5 system (note empty SIZE column):
        # exim       3066  mailnull    3u     IPv6            2566011                 TCP *:smtp (LISTEN)
        my @lsof = split(/\s+/, $_, 10);
        if (defined($lsof[9]) && $lsof[9] =~ /LISTEN/ ) {
            splice(@lsof, 6, 1); # Drop the SIZE/OFF column which can sometimes be blank and throw everything off
        }
        if (defined($lsof[8]) && $lsof[8] =~ /LISTEN/ ) {  # SIZE/OFF column is blank, or has been dropped
            if ( $lsof[7] =~ /^(.*):(\d+)$/ ) {
                my ($ip, $port) = ($1, $2);
                push @{${$href}{"$port"}}, {
                    'CMD' => $lsof[0],
                    'PID' => $lsof[1],
                    'USER' => $lsof[2],
                    'IPV' => $lsof[4],
                    'PROTO' => $lsof[6],
                    'IP' => $ip
                };
            }
        }
    }
}

sub get_mysql_conf () {
    my ($href) = @_;
    my $lines = 0;
    if ( open( my $mycnf_fh, '<', '/etc/my.cnf' ) ) {
        my $section = 'unknown';
        while (<$mycnf_fh>) {
            chomp;
            next if /^(#|$)/;
            if ( m{ \A \s* \[([^\]]+)] }x ) {
                $section = lc($1);
                $section =~ s/^\s*//g;
                $section =~ s/\s*$//g;
                $lines++;
                next;
            }
            if ( m{ \A \s* ([^=]+?) \s* = \s* (?:["']?) ([^"']*?) (?:["']?) \s* \Z }x ) {
                my $key = lc($1);
                $key =~ tr/_-//d;
                ${$href}{$section}{$key} = [$1, $2];
                $lines++;
                next;
            }
            if ( m{ \A \s* ([^\s]+) \s* \Z }x ) {
                my $key = lc($1);
                $key =~ tr/_-//d;
                ${$href}{$section}{$key} = [ $1, 'enabled' ];
                $lines++;
            }
        }
        close $mycnf_fh;
    }
    ${$href}{'LINES'} = $lines;
}

sub get_hostinfo {
    my %hostinfos;

    $hostinfos{'kernel'}   = timed_run( 0, 'uname', '-r' );
    $hostinfos{'hardware'} = timed_run( 0, 'uname', '-i' );
    $hostinfos{'environment'} = get_environment();

    chomp %hostinfos;
    return %hostinfos;
}

sub get_environment {
    if ( open my $envtype_fh, '<', '/var/cpanel/envtype' ) {
        my $envtype = readline($envtype_fh);
        close $envtype_fh;
        return $envtype;
    }
    else {
        return 'Unknown (could not open/read /var/cpanel/envtype ?)';
    }
}

sub get_cpuinfo {
    my %cpuinfos;

    open my $cpuinfo_fh, '<', '/proc/cpuinfo';
    for my $line ( readline $cpuinfo_fh ) {
        if ( $line =~ /^model name/m ) {
            $line =~ s/^model name\s+:\s+//;
            $line =~ s/\(R\)//g;
            $line =~ s/\(tm\)//g;
            $line =~ s/\s{2,}/ /;
            $line =~ s/ \@/\@/;
            $cpuinfos{'model'} = $line;
            $cpuinfos{'numcores'}++;
        }
        if ( $line =~ /^cpu MHz/m ) {
            $line =~ s/^cpu MHz\s+:\s+//;
            $cpuinfos{'mhz'} = $line;
        }
    }
    close $cpuinfo_fh;

    chomp %cpuinfos;
    return %cpuinfos;
}

sub print_info {
    my $text = shift;
    print BOLD YELLOW ON_BLACK "[INFO] * $text";
}

sub print_warn {
    my $text = shift;
    print BOLD RED ON_BLACK "[WARN] * $text";
}

sub print_crit {
    my $text = shift;
    $crit_buffer .= BOLD MAGENTA ON_BLACK '[CRIT] * ' . $text;
    print BOLD MAGENTA ON_BLACK '[CRIT] * ' . $text;
}

sub print_critical {
    my $text = shift;
    $text = $text ? $text : "";
    $crit_buffer .= BOLD MAGENTA ON_BLACK $text . "\n";
    print BOLD MAGENTA ON_BLACK $text . "\n";
}


sub print_3rdp {
    my $text = shift;
    print BOLD GREEN ON_BLACK "[3RDP] * $text";
}

sub print_3rdp2 {
    my $text = shift;
    print BOLD GREEN ON_BLACK "$text\n";
}

## precedes informational items (e.g., "Hostname:")
sub print_start {
    my $text = shift;
    print BOLD YELLOW ON_BLACK $text;
}
## for informational items (e.g., the server's hostname)
sub print_normal {
    my $text = shift;
    print BOLD CYAN ON_BLACK "$text\n";
}
## for important things (e.g., "Hostname is not a FQDN")
sub print_warning {
    my $text = shift;
    print BOLD RED ON_BLACK "$text\n";
}
## for other imporant things (e.g., "You are in an LVE, do not restart services")
sub print_warning_underline {
    my $text = shift;
    print BOLD UNDERLINE "$text\n";
}

sub print_info2 {
    my $text = shift;
    print BOLD GREEN ON_BLACK "$text\n";
}

sub print_magenta {
    my $text = shift;
    print BOLD MAGENTA ON_BLACK "$text\n";
}

sub print_red {
    my $text = shift;
    print BOLD RED ON_BLACK "$text\n";
}

sub check_for_hacked_server_touchfile {
    my $docdir = '/usr/share/doc';
    return if !-d $docdir;

    opendir( my $fh, $docdir ) or return;
    # .cp.jeff.2014-04-09_10.5.40.209_1234567
    my @touchfiles = grep { /^\.cp\.([^\d]+)\.(\d{4}-\d{2}-\d{2})_([^_]+)_(\d+)$/ } readdir $fh;
    closedir $fh;

    return if scalar @touchfiles == 0;

    print_critical();
    print_crit('HACKED SERVER! ');
    print_critical('[L1/L2 ESCALATE TO L3 NOW]. The following touchfiles were found:');
    for my $touchfile (@touchfiles) {
        if ( $touchfile =~ /^\.cp\.([^\d]+)\.(\d{4}-\d{2}-\d{2})_([^_]+)_(\d+)$/ ) {
            my ( $cptech, $date, $ipaddr, $ticket ) = ( $1, $2, $3, $4 );
            $date =~ s#-#/#g;
            $cptech = ucfirst $cptech;
            print_critical("\t => $docdir/$touchfile");
            print_critical("\t\t $cptech reported this server at $ipaddr as compromised on $date local server time in ticket $ticket");
            if ( !grep { /^$ipaddr$/ } @local_ipaddrs_list ) {
                print_critical("\t\t NOTE: IP addr $ipaddr not found on the server!");
            }
        }
    }
    print_critical();
}

sub check_for_multiple_tech_logins {
    # Prefer 'who' over 'w' because of FROM field length limit in 'w'
    # who -H
    #NAME     LINE         TIME             COMMENT
    #root     pts/0        2014-07-29 07:24 (192.168.130.1)

    my $who = '/usr/bin/who';
    return if ! -x $who;

    my @tech_logins = ();
    my $header = "";
    my $num_logins = 0;

    for my $line ( split /\n/, timed_run( 0, $who, '-H' ) ) {
        if ( $line =~ m{ \A NAME\s+ }xms ) {
            $header = $line;
            next;
        }
        if ( $line =~ m{ \((.+)\)\Z }xms ) {
            if ($1 =~ m{ \A (.*\.)?(cptxoffice\.net|cloudlinux\.com|litespeedtech.com) \z }xms ||
                $1 =~ m{ \A (208\.74\.12[0-7]\.\d+|69\.175\.92\.(4[89]|5[0-9]|6[0-4])|69\.10\.42\.69) \z }xms ) {
                push (@tech_logins, $line);
                $num_logins++;
            }
        }
    }

    return if $num_logins <= 1;

    print_critical();
    print_crit('Multiple tech SSH sessions are active (run "who -H -u" for complete list):');
    print_critical("\n");
    print_critical($header) if $header;
    print_critical(join("\n",@tech_logins));
    print_critical();
}

sub get_lsws_version {
    my $lshttpd = '/usr/local/lsws/bin/lshttpd';
    return if ! -x $lshttpd;
    my ($lsws_full_version, $lsws_numeric_version) = ();
    my @lshttpd_version_output = split /\n/, timed_run( 0, $lshttpd, '-v' );
    for ( @lshttpd_version_output ) {
        if ( m{ \A (LiteSpeed/(\d+\.\d+\.\d+).*) }xms ) {
            $lsws_full_version = $1;
            $lsws_numeric_version = $2;
        }
    }

    $lsws_full_version = "unknown" if ! $lsws_full_version;
    $lsws_numeric_version = "unknown" if ! $lsws_numeric_version;

    return ( $lsws_full_version, $lsws_numeric_version );
}

##############################
#  BEGIN [INFO] CHECKS
##############################

sub print_hostname {

    print_info('Hostname: ');

    if ( $hostname !~ /([\w-]+)\.([\w-]+)\.(\w+)/ ) {
        print_warning("$hostname may not be a FQDN ( en.wikipedia.org/wiki/Fully_qualified_domain_name )");
    }
    else {
        print_normal($hostname);
    }
}

sub print_os {
    my $release_info;
    my $os_info;
    my $php_selector_conf     = '/usr/local/cpanel/base/frontend/x3/dynamicui/dynamicui_lvephpsel.conf';
    my $php_selector_disabled = 0;

    if ( -e '/etc/redhat-release' ) {
        if ( open my $rr_fh, '<', '/etc/redhat-release' ) {
            while (<$rr_fh>) {
                chomp( $release_info = $_ );
            }
            close $rr_fh;
        }
        $os_info = $release_info . " [$hostinfo{'environment'}]";
    }
    else {
        $os_info = 'Unknown (no /etc/redhat-release)';
    }

    if ( $release_info and $release_info =~ /cloudlinux/i ) {
        $is_cloudlinux = 1;
        if ( -f $php_selector_conf ) {
            if ( open my $file_fh, '<', $php_selector_conf ) {
                while (<$file_fh>) {
                    if (/^file=>lvephpsel,skipobj=>1/) {
                        $php_selector_disabled = 1;
                        last;
                    }
                }
                close $file_fh;
            }
        }
        else {
            $php_selector_disabled = 'status unknown';
        }
    }

    if ( $is_cloudlinux == 1 ) {
        if ( $php_selector_disabled eq 'status unknown' ) {
            $os_info .= ' [PHP Selector: status unknown]';
        }
        elsif ( $php_selector_disabled == 1 ) {
            $os_info .= ' [PHP Selector: disabled for x3]';
        }
        elsif ( $php_selector_disabled == 0 ) {
            $os_info .= ' [PHP Selector: enabled for x3]';
        }
    }

    print_info('OS: ');
    print_normal($os_info);
}

sub print_kernel_and_cpu {
    print_info('Kernel/CPU: ');
    print_normal("$hostinfo{'kernel'} $hostinfo{'hardware'} $hostinfo{'environment'} $cpuinfo{'model'} w/ $cpuinfo{'numcores'} core(s)");
}

sub print_cpanel_info {
    my $cpanel_tier;
    my ( $birthday_file, $birthday );
    my $output;

    ## cpanel-install-thread0.log is better to be checked before cpanel-install.log
    if ( -f '/var/log/cpanel-install-thread0.log' ) {
        $birthday_file = '/var/log/cpanel-install-thread0.log';
    }
    elsif ( -f '/var/log/cpanel-install.log' ) {
        $birthday_file = '/var/log/cpanel-install.log';
    }

    if ($birthday_file) {
        my $ctime = ( stat($birthday_file) )[9];
        $birthday = localtime $ctime;
    }

    if ( open my $cpupdate_fh, '<', '/etc/cpupdate.conf' ) {
        while (<$cpupdate_fh>) {
            if (m{ \A CPANEL=(.*) }xmsi) {
                chomp( $cpanel_tier = $1 );
            }
        }
        close $cpupdate_fh;
    }
    else {
        $cpanel_tier = 'Unknown (could not open/read /etc/cpupdate.conf ?)';
    }

    my $ctime       = ( stat('/usr/local/cpanel/version') )[10];
    my $last_update = time() - $ctime;
    $last_update = $last_update / 86400;
    $last_update = sprintf '%.1f', $last_update;

    if ($birthday) {
        $output = "${cpanel_version} " . '(' . uc($cpanel_tier) . ' tier)' . " Last update: $last_update days ago" . " [ Installed $birthday ]";
    }
    else {
        $output = "${cpanel_version} " . '(' . uc($cpanel_tier) . ' tier)' . " Last update: $last_update days ago";
    }

    print_info('cPanel Info: ');
    print_normal($output);
}

sub check_for_cpanel_update {
    my ( $TIERS_DATA, @tiers );
    my ( $tier,       $available_tier_version );
    my $local_tier_name;
    my $local_tier_version = $cpanel_version;
    my $match              = 0;
    my $update_available   = 0;

    #
    # get local tier name (e.g., edge)
    #
    my $cpupdate_conf = '/etc/cpupdate.conf';
    return if !-f $cpupdate_conf;

    if ( open my $file_fh, '<', $cpupdate_conf ) {
        while (<$file_fh>) {
            if (/\bcpanel=(.*)/i) {
                $local_tier_name = $1;
                last;
            }
        }
        close $file_fh;
    }

    return if !$local_tier_name;

    #
    # get local tier version (e.g., 11.36.0.4)
    #
    if ( $local_tier_version !~ /(\d+\.\d+\.\d+\.\d+)/ ) {
        print_info('cPanel update check: ');
        print_warning("unknown or old cPanel version $local_tier_version");
        return;
    }

    #
    # get available tiers and versions (e.g., edge:11.36.0.4)
    #
    local $SIG{'ALRM'} = sub { return (); };

    alarm 5;

    my $sock = IO::Socket::INET->new(
        PeerAddr => 'httpupdate.cpanel.net',
        PeerPort => 80,
        Proto    => 'tcp',
        Timeout  => 3,
    );

    if ($sock) {
        print $sock "GET /cpanelsync/TIERS HTTP/1.1\r\nHost: httpupdate.cpanel.net\r\n\r\n";
        sysread $sock, $TIERS_DATA, 1000;
        close $sock;
    }

    alarm 0;

    return if !$TIERS_DATA;

    @tiers = split /\n/, $TIERS_DATA;

    #
    # does the local server use a recognized tier?
    #
    for my $line (@tiers) {
        if ( $line =~ m{ \A (.*) : (\d+\.\d+\.\d+\.\d+) \z }xms ) {
            ( $tier, $available_tier_version ) = ( $1, $2 );
            if ( $tier =~ /^${local_tier_name}$/i ) {
                $match = 1;
                last;
            }
        }
    }

    if ( $match == 0 ) {
        print_info('cPanel update check: ');
        print_warning("server is configured to use an unknown tier ($local_tier_name)");
        return;
    }

    #
    # does the local tier version match the available tier version?
    #
    return if ( $local_tier_version eq $available_tier_version );

    my ( $l1, $l2, $l3, $l4 ) = split /\./, $local_tier_version;
    my ( $r1, $r2, $r3, $r4 ) = split /\./, $available_tier_version;

    if ( $l1 < $r1 ) {
        $update_available = 1;
    }
    elsif ( ( $l1 == $r1 ) and ( $l2 < $r2 ) ) {
        $update_available = 1;
    }
    elsif ( ( $l1 == $r1 ) and ( $l2 == $r2 ) and ( $l3 < $r3 ) ) {
        $update_available = 1;
    }
    elsif ( ( $l1 == $r1 ) and ( $l2 == $r2 ) and ( $l3 == $r3 ) and ( $l4 < $r4 ) ) {
        $update_available = 1;
    }

    if ( $update_available == 1 ) {
        print_info('cPanel update check: ');
        print_warning("UPDATE AVAILABLE ($local_tier_version -> $available_tier_version)");
    }
}

sub check_perl_version_less_than_588 {
    my $perl_version = $^V;
    if ( $perl_version =~ /^v(.+)$/ ) {
        $perl_version = $1;
    }

    return if !$perl_version;

    if ( version_compare($perl_version, qw( < 5.8.8 )) ) {
        print_warn('Perl Version: ');
        print_warning('less than 5.8.8: [ ' . $perl_version . ' ]');
    }
}

sub print_uptime {
    my $uptime = timed_run( 0, 'uptime');
    chomp $uptime if $uptime;
    $uptime = $uptime ? $uptime : 'UNKNOWN';
    print_info('Uptime: ');
    print_normal($uptime);
}

sub check_for_clustering {
    if ( -e '/var/cpanel/useclusteringdns' ) {
        print_info('DNS Clustering: ');
        print_normal('is enabled');
    }
    else {
        return;
    }

    my $cluster_dir = '/var/cpanel/cluster/root/config';
    my @dir_contents;
    my @cluster_members;
    my ( $cluster_member_ipaddr, $cluster_member_hostname, $cluster_member_role );

    if ( -d $cluster_dir ) {
        opendir( my $dir_fh, $cluster_dir );
        @dir_contents = grep { !/^\.\.?$/ } readdir $dir_fh;
        closedir $dir_fh;
    }

    chdir $cluster_dir or return;

    for my $dirent (@dir_contents) {

        # only active cluster members have -dnsrole files
        if ( $dirent =~ m{ \A (\d+\.\d+\.\d+\.\d+)-dnsrole \z }xms ) {
            $cluster_member_ipaddr = $1;

            if ( open my $file_fh, '<', "${cluster_member_ipaddr}.cache" ) {
                my $cache_ref;
                eval 'local $SIG{__DIE__}; local $SIG{__WARN__}; $cache_ref = Storable::fd_retrieve($file_fh);';    # from upcp.static
                close $file_fh;
                if ($cache_ref) {
                    $cluster_member_hostname = $cache_ref->{'host'};
                }
                close $file_fh;
            }
            else {
                $cluster_member_hostname = '?';
            }

            if ( !$cluster_member_hostname ) {
                $cluster_member_hostname = '?';
            }

            if ( open my $file_fh, '<', "${cluster_member_ipaddr}-dnsrole" ) {
                while (<$file_fh>) {
                    $cluster_member_role = $_;
                }
                close $file_fh;
            }
            else {
                $cluster_member_role = '?';
            }

            push @cluster_members, $cluster_member_hostname . '_SSP_' . $cluster_member_ipaddr . '_SSP_' . "[${cluster_member_role}]";
        }
    }

    ## print sorted output for cluster members, by hostname
    if (@cluster_members) {
        @cluster_members = sort @cluster_members;

        for my $member (@cluster_members) {
            $member =~ s/_SSP_/ /g;
            print_magenta("\t \\_ $member");
        }
    }
}

sub print_apache_info {
    my $output;
    my $apache_status;

    if (@apache_version_output) {    # httpd -v

        my ( $apache_version, $apache_built, $apache_ea_version );

        for my $line (@apache_version_output) {
            if ( $line =~ m{ \A Server \s version: \s (.*) \z }xms ) {
                $apache_version = $1;
            }
            if ( $line =~ m{ \A Server \s built: \s (.*) \z }xms ) {
                $apache_built = $1;
                $apache_built =~ s/^\s+//g;
            }
            if ( $line =~ m{ \A Cpanel::Easy::Apache \s (.*) \z }xms ) {
                $apache_ea_version = $1;
            }
        }

        if ( !$apache_version or !$apache_built or !$apache_ea_version ) {
            $output .= 'could not determine Apache info!';
        }
        else {
            $output .= "[ $apache_version ] [ $apache_built w/ $apache_ea_version ]";
        }
    }

    my ( $apache_uptime, $apache_generations );

    local $SIG{'ALRM'} = sub { };
    alarm 5;

    my $sock = IO::Socket::INET->new(
        PeerAddr => '127.0.0.1',
        PeerPort => 80,
        Proto    => 'tcp',
        Timeout  => 3,
    );

    if ($sock) {
        print $sock "GET /whm-server-status HTTP/1.0\r\n\r\n";
        sysread $sock, $apache_status, 10_000;
        close $sock;
    }

    alarm 0;

    if ($apache_status) {
        my @apache_status = split /\n/, $apache_status;

        for my $line (@apache_status) {
            if ( $line =~ m{ Server \s uptime: \s+ (.*) </dt> }xms ) {
                $apache_uptime = $1;
                $apache_uptime = 'Up ' . $apache_uptime;
            }
            if ( $line =~ m{ Parent \s Server \s Generation: (.*) </dt> }xms ) {
                $apache_generations = $1;
            }
        }
        if ( $apache_uptime and $apache_generations ) {
            $output .= " [ $apache_uptime w/ $apache_generations generation(s) ]";
        }
    }
    else {
        my $warning = 'Is Apache up/slow to respond? (failed: http://localhost/whm-server-status). ';

        if (@lsof_80) {
            $warning .= 'Something is listening on port 80.';
        }
        else {
            $warning .= 'Nothing is listening on port 80';
        }

        print_info('Apache: ');
        print_warning($warning);
    }

    if ($output) {
        print_info('Apache: ');
        print_normal($output);
    }

    my %apache_ports = ();
    for my $portnum ( keys(%port) ) {
        for my $href ( @{$port{$portnum}} ) {
            next if not $href->{USER} eq "root";
            next if not $href->{CMD} eq "httpd";
            $apache_ports{$portnum} = 1;
        }
    }
    if ( scalar keys(%apache_ports) ) {
        print_info('Apache: ');
        print_normal('is listening on ports [ ' . join(" ", sort(keys(%apache_ports))) . ' ]'); 
    }
}

sub print_php_configuration {
    my $phpconf = '/usr/local/apache/conf/php.conf.yaml';
    return if !-f $phpconf;

    open my $phpconf_fh, '<', $phpconf;
    while (<$phpconf_fh>) {
        chomp;
        if (/^phpversion: (\d)/) {
            $phpversion = $1;
        }
        if (/^php4:[ \t]+['"]?([^'"]+)/) {
            $php4handler = $1;
        }
        if (/^php5:[ \t]+['"]?([^'"]+)/) {
            $php5handler = $1;
        }
        if (/^suexec:[ \t]+['"]?([^'"]+)/) {
            $suexec = $1;
        }
    }
    close $phpconf_fh;

    if ( $suexec && $suexec eq '1' ) {
        $suexec = 'with suexec';
    }
    else {
        $suexec = 'without suexec';
    }

    if ( $phpversion == 5 ) {
        if ( -x '/usr/bin/php' ) {
            my @php_v = split /\n/, timed_run( 0, '/usr/bin/php', '-n', '-v' );
            if ( @php_v && $php_v[0] =~ /^PHP\s(\S+)\s(\S+)/ ) {
                $php5version = $1;
            }
            else {
                $php5version = '(version unknown)';
            }

            if ( $php5handler && $php5handler eq 'fcgi' ) {
                print_info('PHP Default: ');
                print_warning("PHP $php5version $php5handler $suexec (mod_userdir style URLs don't work with fcgi!)");
            }
            elsif ( $php5handler ) {
                print_info('PHP Default: ');
                print_normal("PHP $php5version $php5handler $suexec");
            }
        }

        if ( $php4handler && $php4handler ne 'none' ) {
            my @php_v = split /\n/, timed_run( 0, '/usr/local/php4/bin/php', '-v' );
            if ( @php_v && $php_v[0] =~ /^PHP\s(\S+)\s(\S+)/ ) {
                $php4version = $1;
            }
            else {
                $php4version = '(version unknown)';
            }

            print_info('PHP Secondary: ');
            print_normal("PHP $php4version $php4handler $suexec");
        }
    }

    if ( $phpversion && $phpversion == 4 ) {
        if ( -x '/usr/local/php4/bin/php' ) {
            my @php_v = split /\n/, timed_run( 0, '/usr/local/php4/bin/php', '-v' );
            if ( $php_v[0] =~ /^PHP\s(\S+)\s(\S+)/ ) {
                $php4version = $1;
            }
            else {
                $php4version = '(version unknown)';
            }

            if ( $php4handler && $php4handler eq 'fcgi' ) {
                print_info('PHP Default: ');
                print_warning("PHP $php4version $php4handler $suexec (mod_userdir style URLs don't work with fcgi!)");
            }
            else {
                print_info('PHP Default: ');
                print_normal("PHP $php4version $php4handler $suexec");
            }
        }

        if ( $php5handler && $php5handler ne 'none' ) {
            my @php_v = split /\n/, timed_run( 0, '/usr/bin/php', '-n', '-v' );
            if ( $php_v[0] =~ /^PHP\s(\S+)\s(\S+)/ ) {
                $php5version = $1;
            }
            else {
                $php5version = '(version unknown)';
            }

            print_info('PHP Secondary: ');
            print_normal("PHP $php5version $php5handler $suexec");
        }
    }

    if ( ( ( $php4handler && $php5handler ) && ( $php4handler eq 'none' && $php5handler eq 'none' ) ) || ! ( $php4handler && $php5handler ) ) {
        print "\n";
        print_warn('PHP: ');
        print_warning('no handler defined for PHP4 or PHP5!');
    }
}

sub check_sysinfo {
    return if !-x '/scripts/gensysinfo';

    my $sysinfo_config = '/var/cpanel/sysinfo.config';

    my ( $release, $ises ) = get_release_version();    # 5.8, 2
    chomp( my $arch = timed_run( 0, 'uname', '-i' ) );

    my $rebuild = 0;

    if ( !-e $sysinfo_config ) {
        print_info('sysinfo: ');
        print_warning('does not exist, running /scripts/gensysinfo to fix');
        timed_run( 0, '/scripts/gensysinfo' );
    }
    else {
        open my $sysinfo_fh, '<', $sysinfo_config;
        while (<$sysinfo_fh>) {
            chomp;
            if ( m{ \A rpm_arch=(.*) }xms ) {
                if ( $arch ne $1 ) {
                    $rebuild = 1;
                }
            }
            if ( m{ \A release=(.*) }xms ) {
                if ( $release ne $1 ) {
                    $rebuild = 1;
                }
            }
            if ( m{ \A ises=(.*) }xms ) {
                if ( $ises ne $1 ) {
                    $rebuild = 1;
                }
            }
        }
        close $sysinfo_fh;
    }

    if ( $rebuild == 1 ) {
        timed_run( 0, 'mv', $sysinfo_config, "${sysinfo_config}.ssp.$^T" );
        timed_run( 0, '/scripts/gensysinfo');
        print_info('sysinfo: ');
        print_warning('/var/cpanel/sysinfo.config contained errors and was rebuilt');
    }
}

sub check_for_remote_mysql {
    my $mysql_host;
    my $mysql_is_local;

    ## obtain mysql host, if exists
    my $my_cnf = '/root/.my.cnf';
    if ( open my $my_cnf_fh, '<', $my_cnf ) {
        while (<$my_cnf_fh>) {
            chomp( my $line = $_ );
            if ( $line =~ m{ \A host \s* = \s* (?:["']?) ([^"']+) }xms ) {
                $mysql_host = $1;
            }
        }
        close $my_cnf;
    }

    if ($mysql_host) {
        if ( $mysql_host =~ m{ ( \d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3} )  }xms ) {
            return if ( $mysql_host eq '127.0.0.1' );
            for my $ipaddr (@local_ipaddrs_list) {
                if ( $ipaddr eq $mysql_host ) {
                    $mysql_is_local = 1;
                    last;
                }
            }
        }
        elsif ( $mysql_host eq 'localhost' or $mysql_host eq hostname() ) {
            $mysql_is_local = 1;
        }
        if ( !$mysql_is_local ) {
            print_info('Remote MySQL Host: ');
            print_warning($mysql_host);
        }
    }
}

sub print_if_using_mydns_or_nsd {
    if ( -e '/var/cpanel/usensd' ) {
        print_info('DNS Service: ');
        print_normal('NSD ');
    }
    elsif ( -e '/var/cpanel/usemydns' ) {
        print_info('DNS Service: ');
        print_normal('MyDNS ');
    }
}

sub print_if_using_modruid2 {
    for (@apache_modules_output) {
        if (/ruid2_module/) {
            print_info('mod_ruid2: ');
            print_warning('is enabled (mod_userdir style URLs don\'t work with mod_ruid2!)');
            last;
        }
    }
}

sub print_mysql_version {
    my $mysql_output = timed_run( 0, 'mysql', '-V' );
    if ( $mysql_output ) {
        chomp $mysql_output;
        print_info('MySQL Version: ');
        print_normal($mysql_output);
    }
}

sub print_backups_info {
    my %new = ();
    my %old = ();
    my ( $new_backups_cron, $new_backups_status ) = ( 0, 'No Config' );
    my ( $old_backups_cron, $old_backups_status ) = ( 0, 'No Config' );
    my $warning = 0;

    if ( -f '/var/cpanel/backups/config' && open( my $backupconf_fh, '<', '/var/cpanel/backups/config' ) ) {
        local $/ = undef;
        %new = map { ( split( /:\s/, $_, 2 ) )[ 0, 1 ] } split( /\n/, readline($backupconf_fh) );
        close $backupconf_fh;
    }

    if ( -f '/etc/cpbackup.conf' && open( my $backupconf_fh, '<', '/etc/cpbackup.conf' ) ) {
        local $/ = undef;
        %old = map { ( split( /\s/, $_, 2 ) )[ 0, 1 ] } split( /\n/, readline($backupconf_fh) );
        close $backupconf_fh;
    }

    if ( ( defined($old{'BACKUPENABLE'}) and $old{'BACKUPENABLE'} eq 'yes' ) or ( defined($new{'BACKUPENABLE'}) and $new{'BACKUPENABLE'} =~ /yes/ ) ) {
        if ( open my $file_fh, '<', '/var/spool/cron/root' ) {
            while (<$file_fh>) {
                if ( m{ \A [^#] .+ /usr/local/cpanel/scripts/cpbackup }xms ) {
                    $old_backups_cron = 1;
                }
                if ( m{ \A [^#] .+ /usr/local/cpanel/bin/backup }xms ) {
                    $new_backups_cron = 1;
                }
            }
            close $file_fh;
        }
    }

    if ( defined($new{'BACKUPENABLE'}) ) {
        if ( $new{'BACKUPENABLE'} =~ /yes/ ) {
            $new_backups_status = 'Enabled';
            if ( defined($new{'BACKUPACCTS'}) && $new{'BACKUPACCTS'} =~ /yes/ ) {
                $new_backups_status .= '/WithAccounts';
            }
            elsif ( defined($new{'BACKUPACCTS'}) && $new{'BACKUPACCTS'} =~ /no/ ) {
                $new_backups_status .= '/NoAccounts';
            }

            if ( defined($new{'BACKUPTYPE'}) && $new{'BACKUPTYPE'} =~ /uncompressed/ ) {
                $new_backups_status .= '/Uncompressed';
            }
            elsif ( defined($new{'BACKUPTYPE'}) && $new{'BACKUPTYPE'} =~ /compressed/ ) {
                $new_backups_status .= '/Compressed';
            }
            elsif ( defined($new{'BACKUPTYPE'}) && $new{'BACKUPTYPE'} =~ /incremental/ ) {
                $new_backups_status .= '/Incremental';
            }
            else {
                $new_backups_status .= '/Unknown';
            }

            if ( $new_backups_cron != 1 ) {
                $new_backups_status .=  ' (MISSING CRON!)';
                $warning = 1;
            }    
        }
        elsif ( $new{'BACKUPENABLE'} =~ /no/ ) {
            $new_backups_status =  'Disabled';
        }
    }

    if ( defined($old{'BACKUPENABLE'}) ) {
        if ( $old{'BACKUPENABLE'} eq 'restoreonly' ) {
                $old_backups_status = 'RestoreOnly';
        }
        elsif ( $old{'BACKUPENABLE'} eq 'yes' ) {
            $old_backups_status = 'Enabled';
            if ( defined($old{'BACKUPACCTS'}) && $old{'BACKUPACCTS'} eq 'yes' ) {
                $old_backups_status .= '/WithAccounts';
            }
            elsif ( defined($old{'BACKUPACCTS'}) && $old{'BACKUPACCTS'} eq 'no' ) {
                $old_backups_status .= '/NoAccounts';
            }

            if ( defined($old{'BACKUPINC'}) && $old{'BACKUPINC'} eq 'yes' ) {
                $old_backups_status .= '/Incremental';
            }
            elsif ( defined($old{'COMPRESSACCTS'}) && $old{'COMPRESSACCTS'} eq 'yes' ) {
                $old_backups_status .= '/Compressed';
            }
            elsif ( defined($old{'COMPRESSACCTS'}) && $old{'COMPRESSACCTS'} eq 'no' ) {
                $old_backups_status .= '/Uncompressed';
            }
            else {
                $old_backups_status .= '/Unknown';
            }

            if ( $old_backups_cron != 1 ) {
                $old_backups_status .=  ' (MISSING CRON!)';
                $warning = 1;
            }    
        }
        elsif ( $old{'BACKUPENABLE'} eq 'no' ) {
            $old_backups_status =  'Disabled';
        }
    }

    print_info('Backups: ');
    if ( $warning ) {
        print_warning("[New: $new_backups_status] [Legacy: $old_backups_status]");
    }
    else {
        print_normal("[New: $new_backups_status] [Legacy: $old_backups_status]");
    }
}

sub print_mailserver_info {
    print_info('Mailserver: ');
    if ( exists $cpconf{'mailserver'} ) {
        print_normal($cpconf{'mailserver'});
    }
    else {
        print_warning('missing setting in cpanel.config');
    }
}

sub check_for_custom_zonetemplates {
    my $template_dir = '/var/cpanel/zonetemplates';
    return if !-e $template_dir;

    my $is_empty = 0; 

    opendir( my $fh, $template_dir ) or return;
    my @dirents = grep { !/^\.\.?/ } readdir $fh; 
    closedir $fh; 

    return if !@dirents;

    for my $file (@dirents) {
        if ( -z "${template_dir}/${file}" ) {
            $is_empty = 1; 
            last;
        }    
    }    

    print_info('Zone templates: ');
    if ( $is_empty == 1 ) {
        print_red("found in $template_dir - some may be empty! See ticket 4897373");
    }    
    else {
        print_normal("found in $template_dir");
    }    
}

sub print_lsws_info {
    return if ! $lsws_full_version;
    print_info('LiteSpeed Web Server: ');
    print_normal('version [ ' . $lsws_full_version . ' ]'); 

    my %lshttpd_ports = ();
    for my $portnum ( keys(%port) ) {
        for my $href ( @{$port{$portnum}} ) {
            next if not $href->{USER} eq "root";
            next if not $href->{CMD} eq "litespeed";
            $lshttpd_ports{$portnum} = 1;
        }
    }
    if ( scalar keys(%lshttpd_ports) ) {
        print_info('LiteSpeed Web Server: ');
        print_normal('is listening on ports [ ' . join(" ", sort(keys(%lshttpd_ports))) . ' ]'); 
    }
    print_info('LiteSpeed Web Server: ');
    print_normal('is now supported, see http://staffwiki.cpanel.net/LinuxSupport/LiteSpeed'); 
}

sub check_for_lsws_update {
    return if ! $lsws_numeric_version;
    return if $lsws_numeric_version eq "unknown";
    my ( $LSWS_DATA, @lsws_data ) = ();
    my $available_lsws_version;

    local $SIG{'ALRM'} = sub { return (); };

    alarm 5;

    my $sock = IO::Socket::INET->new(
        PeerAddr => 'update.litespeedtech.com',
        PeerPort => 80,
        Proto    => 'tcp',
        Timeout  => 3,
    );

    if ($sock) {
        print $sock "GET /ws/latest.php HTTP/1.1\r\nHost: update.litespeedtech.com\r\n\r\n";
        sysread $sock, $LSWS_DATA, 1000;
        close $sock;
    }

    alarm 0;

    return if ! $LSWS_DATA;

    @lsws_data = split /\n/, $LSWS_DATA;

    for (@lsws_data) {
        if ( m{ \A LSWS=(\d+\.\d+\.\d+) \z }xms ) {
            $available_lsws_version = $1;
            last;
        }
    }

    return if ! $available_lsws_version;

    if ( version_compare( $lsws_numeric_version, '<', $available_lsws_version ) ) {
        print_info('LiteSpeed Web Server: ');
        print_warning("UPDATE AVAILABLE ($lsws_numeric_version -> $available_lsws_version)");
    }
}

##############################
#  END [INFO] CHECKS
##############################

##############################
#  BEGIN [WARN] CHECKS
##############################

sub check_port_hash {
    return if ( scalar keys(%port) >= 1 );
    print_warn('lsof: ');
    print_warning('Did not return a list of TCP ports in LISTEN state.');
    print_warning('  Either lsof is broken or there are zero listening services.');
    print_warning('  Some port-based checks will be skipped!');
}

sub check_selinux_status {
    my @selinux_status = split /\n/, timed_run( 0, 'sestatus' );

    return if !@selinux_status;

    for my $line (@selinux_status) {
        if ( $line =~ m{ \A Current \s mode: \s+ enforcing }xms ) {
            print_warn('SELinux: ');
            print_warning('enabled and enforcing!');
        }
    }
}

sub check_runlevel {
    if ( $os eq 'linux' ) {
        my $runlevel;
        my $who_r = timed_run( 0, 'who', '-r' );

        # CentOS 5.7, 5.8:
        #         run-level 3  2012-01-25 10:38                   last=S
        if ( $who_r =~ m{ \A \s+ run-level \s (\d) }xms ) {
            $runlevel = $1;

            if ( $runlevel != 3 ) {
                print_warn('Runlevel: ');
                print_warning("runlevel is not 3 (current runlevel: $runlevel)");
            }
        }
    }
}

sub check_for_missing_root_cron {
    my $cron;
    $cron = '/var/spool/cron/root';

    if ( !-f $cron ) {
        print_warn('Missing cron: ');
        print_warning("root's cron file $cron is missing!");
    }
}

sub check_for_missing_usr_bin_crontab {
    my $crontab = '/usr/bin/crontab';
    if ( ! -f $crontab ) {
        print_warn('Missing crontab binary: ');
        print_warning('file ' . $crontab . ' is missing!  Seeing "warn [jail_safe_crontab] Cpanel::Wrap::send_cpwrapd_request error"?  This may be why.');
    }
}

sub check_if_upcp_is_running {
    my $upcp_running = 0;

    for my $line (@process_list) {
        if ( $line =~ m{ \A root (?:.*) cPanel \s Update \s \(upcp\) }xms ) {
            $upcp_running = 1;
            last;
        }
    }

    if ( $upcp_running == 1 ) {
        print_warn('upcp check: ');
        print_warning('upcp is currently running');
    }
}

sub check_valid_upcp {
    my $updatenow_static = '/scripts/updatenow.static';
    my $updatenow_valid  = 0;

    if ( !-f $updatenow_static ) {
        print_warn('Valid updatenow.static: ');
        print_warning("$updatenow_static does not exist as a file!");
    }
    else {
        open my $updatenow_fh, '<', $updatenow_static;
        local $/ = undef;
        my $update_now_text = readline($updatenow_fh);
        close $updatenow_fh;
        if ( $update_now_text =~ m/our \$VERSION_BUILD/s ) {
            $updatenow_valid = 1;
        }
    }
    if ( !$updatenow_valid ) {
        print_warn('Valid updatenow.static: ');
        print_warning("No VERSION_BUILD info found in $updatenow_static, could be broken!");
    }
}

sub check_interface_lo {
    my $is_up = 0;

    my $ifconfig_lo = timed_run( 0, 'ifconfig', 'lo' );

    if ( $ifconfig_lo =~ /UP LOOPBACK/ ) {
        $is_up = 1;
    }

    if ( !$is_up ) {
        print_warn('Loopback Interface: ');
        print_warning('loopback interface is not up!');
    }
    else {
        check_loopback_connection();
    }
}

sub check_loopback_connection {
    my @ports     = qw( 25 80 143 );
    my $connected = 0;

    for my $port (@ports) {
        my $sock = IO::Socket::INET->new(
            PeerAddr => '127.0.0.1',
            PeerPort => $port,
            Proto    => 'tcp',
            Timeout  => '1',
        );

        if ($sock) {
            $connected = 1;
            close $sock;
        }

        last if $connected == 1;
    }

    if ( !$connected ) {
        print_warn('Loopback connectivity: ');
        print_warning('could not connect to 127.0.0.1 on ports 25, 80, or 143');
    }
}

sub check_cpanelconfig_filetype {
    chomp( my $file = timed_run( 0, 'file', '/var/cpanel/cpanel.config' ) );
    if ( $file !~ m{ \A /var/cpanel/cpanel.config: \s ASCII \s text (, \s with \s very \s long \s lines)? \z }xms ) {
        print_warn('/var/cpanel/cpanel.config: ');
        print_warning("filetype is something other than 'ASCII text'! ($file)");
    }
}

sub check_cpanelsync_exclude {
    my $cpanelsync_exclude = '/etc/cpanelsync.exclude';

    my $rpmversions_file      = '/usr/local/cpanel/etc/rpm.versions';
    my $excluding_rpmversions = 0;

    if ( -f $cpanelsync_exclude and !-z $cpanelsync_exclude ) {
        if ( open my $file_fh, '<', $cpanelsync_exclude ) {
            while (<$file_fh>) {
                chomp;
                if (m{ \A \s* $rpmversions_file \s* \z }xms) {
                    $excluding_rpmversions = 1;
                    last;
                }
            }
            close $file_fh;
        }
    }

    if ( $excluding_rpmversions == 1 ) {
        print_warn('cpanelsync exclude: ');
        print_warning("$rpmversions_file found! This should NEVER be done!");
    }
    else {
        # sloppy, as we check this above already, but I'm too busy to care
        if ( -f $cpanelsync_exclude and !-z $cpanelsync_exclude ) {
            print_warn('cpanelsync exclude: ');
            print_warning("$cpanelsync_exclude is not empty!");
        }
    }
}

sub check_for_lve_environment {

    # pam_lve 0.2 prints this after su or sudo:
    #
    # # /bin/su -
    # Password:
    # ***************************************************************************
    # *                                                                         *
    # *             !!!!  WARNING: YOU ARE INSIDE LVE !!!!                      *
    # *IF YOU RESTART ANY SERVICES STABILITY OF YOUR SYSTEM WILL BE COMPROMIZED *
    # *        CHANGE UID OF THE USER YOU ARE USING TO SU/SUDO                  *
    # *                             MORE INFO:                                  *
    # *http://www.cloudlinux.com/blog/clnews/read-this-if-you-use-su-or-sudo.php*
    # *                                                                         *
    # ***************************************************************************

    # pam_lve 0.3 won't put wheel users in an LVE after su or sudo:
    # http://cloudlinux.com/blog/clnews/read-this-if-you-use-su-or-sudo.php

    if ( $hostinfo{'kernel'} =~ /\.lve/ and -x '/usr/sbin/lveps' ) {
        my $lve_check = `/usr/sbin/lveps -p | grep " $$ "`;
        if ($lve_check) {
            print "\n";
            print_warning_underline(' !! YOU ARE IN AN LVE - DO *NOT* RESTART ANY SERVICES !!');
            print_warning_underline(' !! YOU ARE IN AN LVE - DO *NOT* RESTART ANY SERVICES !!');
            print_warning_underline(' !! YOU ARE IN AN LVE - DO *NOT* RESTART ANY SERVICES !!');
            print "\n";
        }
    }
}

sub check_for_rawopts {
    my $rawopts_dir = '/var/cpanel/easy/apache/rawopts';
    my @dir_contents;

    if ( -d $rawopts_dir ) {
        opendir( my $dir_fh, $rawopts_dir );
        @dir_contents = grep { !/^\.\.?$/ } readdir $dir_fh;
        closedir $dir_fh;
    }

    if (@dir_contents) {
        print_warn('Rawopts Detected: ');
        print_warning('check /var/cpanel/easy/apache/rawopts !');
    }
}

sub check_for_rawenv {
    my $rawenv_dir = '/var/cpanel/easy/apache/rawenv';
    my @dir_contents;

    if ( -d $rawenv_dir ) {
        opendir( my $dir_fh, $rawenv_dir );
        @dir_contents = grep { !/^\.\.?$/ } readdir $dir_fh;
        closedir $dir_fh;
    }

    if (@dir_contents) {
        print_warn('Rawenv detected: ');
        print_warning('check /var/cpanel/easy/apache/rawenv !');
    }
}

sub check_for_custom_opt_mods {
    my $custom_opt_mods;
    my $dir = '/var/cpanel/easy/apache/custom_opt_mods';

    return if !-e $dir;

    find( \&find_custom_opt_mods, $dir );

    if ( scalar @custom_opt_mods > 10 ) {
        print_warn("$dir: ");
        print_warning('many custom opt mods exist, check manually');
    }
    elsif (@custom_opt_mods) {
        for my $custom_opt_mod (@custom_opt_mods) {
            $custom_opt_mods .= "$custom_opt_mod ";
        }

        print_warn("$dir: ");
        print_warning($custom_opt_mods);
    }
}

sub find_custom_opt_mods {

    # ignore these, Attracta:
    #  /var/cpanel/easy/apache/custom_opt_mods/Cpanel/Easy/ModFastInclude.pm
    #  /var/cpanel/easy/apache/custom_opt_mods/Cpanel/Easy/ModFastInclude.pm.tar.gz

    my $file = $File::Find::name;
    if ( -f $file and $file !~ m{ /ModFastInclude\.pm(.*) }xms ) {
        $file =~ s#/var/cpanel/easy/apache/custom_opt_mods/##;
        push @custom_opt_mods, $file;
    }
}

sub check_for_local_apache_templates {
    my $apache2_template_dir = '/var/cpanel/templates/apache2';
    my @dir_contents;

    if ( -d $apache2_template_dir ) {
        opendir( my $dir_fh, $apache2_template_dir );
        @dir_contents = readdir $dir_fh;
        closedir $dir_fh;
    }

    my $templates;
    for my $template (@dir_contents) {
        if ( $template =~ m{ \.local \z }xms ) {
            $templates .= " $template";
        }
    }

    if ($templates) {
        print_warn('Custom apache2 templates: ');
        print_warning($templates);
    }
}

sub check_for_local_template_account_suspensions_include {
    my $template = '/var/cpanel/templates/apache2/main.local';
    my $conf = "account_suspensions.conf";
    my $noconf = 0;

    if (-e $template) {
    	if ( open my $template_fh, '<', $template ) {
    		my @lines = <$template_fh>;
    		close($template_fh);
    		my @match = grep (/$conf/, @lines);
			if (@match == 0) {
                $noconf = 1;
            }
        }

        if ( $noconf == 1 ) {
            print_warn('Account Suspensions Include Missing From main.local: ');
            print_warning("If accounts are not showing as suspended in web browser check to see if the account_suspensions.conf include exists in the template - [FB 108965]");
        }
    }
}

sub check_for_local_makecpphp_template {
    return if cpanel_version_is(qw( >= 11.36.0.0 )); # makecpphp has been removed from 11.36+

    my $makecpphp_local_profile = '/var/cpanel/easy/apache/profile/makecpphp.profile.yaml.local';

    if ( -e $makecpphp_local_profile ) {
        print_warn('makecpphp Local Profile: ');
        print_warning("exists at $makecpphp_local_profile !");
    }
}

sub check_for_custom_apache_includes {
    my $include_dir = '/usr/local/apache/conf/includes';

    return if !-d $include_dir;

    my @includes = qw(
      post_virtualhost_1.conf
      post_virtualhost_2.conf
      post_virtualhost_global.conf
      pre_main_1.conf
      pre_main_2.conf
      pre_main_global.conf
      pre_virtualhost_1.conf
      pre_virtualhost_2.conf
      pre_virtualhost_global.conf
    );

    my $custom_includes;
    for my $include (@includes) {
        if ( !-z "${include_dir}/${include}" ) {
            if ( $include eq 'pre_virtualhost_global.conf' ) {
                my $md5 = timed_run( 0, 'md5sum', '/usr/local/apache/conf/includes/pre_virtualhost_global.conf' );
                next if ( $md5 && $md5 =~ m{ \A 1693b9075fa54ede224bfeb8ad42a182 \s }xms );
                $custom_includes .= " [$include]";
            }
            else {
                $custom_includes .= " [$include]";
            }
        }
    }

    if ($custom_includes) {
        print_warn('Apache Includes: ');
        print_warning($custom_includes);
    }
}

sub check_for_tomcatoptions {
    my $tomcat_options = '/var/cpanel/tomcat.options';
    if ( -f $tomcat_options and !-z $tomcat_options ) {
        print_warn('Tomcat options: ');
        print_warning("$tomcat_options exists");
    }
}

sub check_for_sneaky_htaccess {
    ## this is lazy checking. ideally we'd check HOMEMATCH from wwwacct.conf and go from there.
    ## but then, nothing guarantees the current HOMEMATCH has always been the same, either.
    my @dirs = qw( / /home/ /home2/ /home3/ /home4/ /home5/ /home6/ /home7/ /home8/ /home9/ );
    my $htaccess;

    for my $dir (@dirs) {
        if ( -f $dir . '.htaccess' and !-z $dir . '.htaccess' ) {
            $htaccess .= $dir . '.htaccess ';
        }
    }

    if ($htaccess) {
        print_warn('Sneaky .htaccess file(s) found: ');
        print_warning($htaccess);
    }
}

sub check_perl_sanity {
    my $usr_bin_perl       = '/usr/bin/perl';
    my $usr_local_bin_perl = '/usr/local/bin/perl';

    if ( !-e $usr_bin_perl ) {
        print_warn('perl: ');
        print_warning("$usr_bin_perl does not exist!");
    }

    if ( -l $usr_bin_perl and -l $usr_local_bin_perl ) {
        my $usr_bin_perl_link       = readlink $usr_bin_perl;
        my $usr_local_bin_perl_link = readlink $usr_local_bin_perl;
        if ( -l $usr_bin_perl_link and -l $usr_local_bin_perl_link ) {
            print_warn('perl: ');
            print_warning("$usr_bin_perl and $usr_local_bin_perl are both symlinks!");
        }
    }

    ## a symlink will test true for both -x AND -l
    if ( -x $usr_bin_perl and !-l $usr_bin_perl ) {
        if ( -x $usr_local_bin_perl and !-l $usr_local_bin_perl ) {
            print_warn('perl: ');
            print_warning("$usr_bin_perl and $usr_local_bin_perl are both binaries!");
        }
    }

    if ( -x $usr_bin_perl and !-l $usr_bin_perl ) {
        my $mode = ( stat($usr_bin_perl) )[2] & 07777;
        $mode = sprintf "%lo", $mode;
        if ( $mode != 755 ) {
            print_warn('Perl Permissions: ');
            print_warning("$usr_bin_perl is $mode");
        }
    }

    if ( -x $usr_local_bin_perl and !-l $usr_local_bin_perl ) {
        my $mode = ( stat($usr_local_bin_perl) )[2] & 07777;
        $mode = sprintf "%lo", $mode;
        if ( $mode != 755 ) {
            print_warn('Perl Permissions: ');
            print_warning("$usr_local_bin_perl is $mode");
        }
    }
}

sub check_for_non_default_permissions {
    my %check = ( # '/path' => [ ['default1', 'default2', ...], user, group, 'Additional info' ] # user/group is root if empty
        '/'                            => [ ['0755', '0555'], '', '', ' - .ftpquota issues? see ticket 4429843' ],
        '/bin'                         => [ ['0755', '0711', '0555'], '', '', '' ],
        '/bin/bash'                    => [ ['0755'], '', '', '' ],
        '/bin/ln'                      => [ ['0755', '0555'], '', '', '' ],
        '/bin/rm'                      => [ ['0755', '0555'], '', '', ' - File Manager unable to delete files?  This may be why.' ],
        '/dev/log'                     => [ ['0666'], '', '', ' - CSF RESTRICT_SYSLOG can change this. See ticket 4875833. Non-root users may not be able to log to syslog.' ],
        '/dev/null'                    => [ ['0666'], '', '', '' ],
        '/etc'                         => [ ['0755'], '', '', '' ],
        '/etc/cpbackup.conf'           => [ ['0644'], '', '', '' ],
        '/etc/group'                   => [ ['0644'], '', '', '' ],
        '/etc/hosts'                   => [ ['0644'], '', '', '' ],
        '/etc/localdomains'            => [ ['0640'], '', 'mail', ' - Failing to properly create an email forwarder? See ticket 5234627.' ],
        '/etc/nsswitch.conf'           => [ ['0644'], '', '', '' ],
        '/etc/passwd'                  => [ ['0644'], '', '', '' ],
        '/etc/shadow'                  => [ ['0600', '0400', '0200'], '', '', '' ],
        '/etc/stats.conf'              => [ ['0644'], '', '', '' ],
        '/home'                        => [ ['0755', '0711'], '', '', '' ],
        '/home1'                       => [ ['0755', '0711'], '', '', '' ],
        '/home2'                       => [ ['0755', '0711'], '', '', '' ],
        '/home3'                       => [ ['0755', '0711'], '', '', '' ],
        '/home4'                       => [ ['0755', '0711'], '', '', '' ],
        '/home5'                       => [ ['0755', '0711'], '', '', '' ],
        '/opt'                         => [ ['0755'], '', '', '' ],
        '/root/cpanel3-skel'           => [ ['0755'], '', '', '' ],
        '/sbin'                        => [ ['0755', '0711', '0555'], '', '', '' ],
        '/sbin/ifconfig'               => [ ['0755', '0555'], '', '', '' ],
        '/tmp'                         => [ ['1777'], '', '', '' ],
        '/usr'                         => [ ['0755'], '', '', '' ],
        '/usr/bin'                     => [ ['0755', '0711', '0555'], '', '', '' ],
        '/usr/bin/crontab'             => [ ['6755', '4755', '4711', '4555'], '', '', '' ],
        '/usr/bin/passwd'              => [ ['6755', '4755', '4555', '4511'], '', '', '' ],
        '/usr/sbin'                    => [ ['0755', '0711', '0555'], '', '', '' ],
        '/usr/sbin/exim'               => [ ['4755'], '', '', '' ],
        '/usr/share'                   => [ ['0755'], '', '', '' ],
        '/usr/share/zoneinfo'          => [ ['0755'], '', '', '' ],
        '/usr/local'                   => [ ['0755'], '', '', '' ],
        '/usr/local/apache'            => [ ['0755'], '', '', '' ],
        '/usr/local/apache/bin/httpd'  => [ ['0755'], '', '', '' ],
        '/usr/local/bin'               => [ ['0755', '0711', '0555'], '', '', '' ],
        '/usr/local/cpanel'                                                             => [ ['0711'], '', 'wheel', '' ],
        '/usr/local/cpanel/base/3rdparty/phpMyAdmin/index.php'                          => [ ['0644'], '', 'wheel', '' ],
        '/usr/local/cpanel/base/3rdparty/phpPgAdmin/index.php'                          => [ ['0644'], '', 'wheel', '' ],
        '/usr/local/cpanel/base/3rdparty/roundcube/index.php'                           => [ ['0644'], '', 'wheel', '' ],
        '/usr/local/cpanel/base/3rdparty/roundcube/plugins/cpanellogin/cpanellogin.php' => [ ['0644'], '', 'wheel', '' ],
        '/usr/local/cpanel/base/3rdparty/squirrelmail/index.php'                        => [ ['0644'], '', 'wheel', '' ],
        '/usr/local/cpanel/php/cpanel.php'                                              => [ ['0644'], '', '', '' ],
        '/usr/local/sbin'              => [ ['0755', '0711', '0555'], '', '', '' ],
        '/var'                         => [ ['0755'], '', '', '' ],
        '/var/cpanel'                  => [ ['0755', '0711', '0555'], '', '', '' ],
        '/var/cpanel/backups/config'   => [ ['0644'], '', '', '' ],
        '/var/cpanel/datastore'        => [ ['0755'], '', '', '' ],
        '/var/cpanel/features'         => [ ['0755'], '', '', '' ],
        '/var/cpanel/locale'           => [ ['0755'], '', '', '' ],
        '/var/cpanel/resellers'        => [ ['0644'], '', '', '' ],
        '/var/lib'                     => [ ['0755'], '', '', '' ],
        '/var/lib/mysql'               => [ ['0751'], 'mysql', 'mysql', '' ],
        '/var/lib/mysql/mysql.sock'    => [ ['0777'], 'mysql', 'mysql', '' ],
        '/var/log/exim_mainlog'        => [ ['0640'], 'mailnull', 'mail', '' ],
        '/var/log/exim_paniclog'       => [ ['0640'], 'mailnull', 'mail', '' ],
        '/var/log/exim_rejectlog'      => [ ['0640'], 'mailnull', 'mail', '' ],
        '/var/tmp'                     => [ ['1777'], '', '', '' ]
    );

    my $wwwacctconf = '/etc/wwwacct.conf';
    if ( open my $wwwacctconf_fh, '<', $wwwacctconf ) {
        while (<$wwwacctconf_fh>) {
            if (m{ ^ HOMEDIR \s ([/\-_A-Za-z0-9]+) $ }x) {
                $check{$1} = [ ['0755', '0711'], '', '', '' ];
                last;
            }
        }
        close $wwwacctconf_fh;
    }

    if ( cpanel_version_is(qw( < 11.42.0.0 )) ) {
        $check{'/usr/local/cpanel/base/horde/index.php'} = [ ['0644'], '', 'wheel', '' ];
    }
    else {
        $check{'/usr/local/cpanel/base/horde/index.php'} = [ ['0644'], '', '', '' ];
    }

    if ( cpanel_version_is(qw( <= 11.36.0.0 )) ) {
       $check{'/usr/local/cpanel/bin/cpwrap'} = [ ['4755'], '', 'wheel', '' ];
    }
    else {
       $check{'/usr/local/cpanel/bin/cpwrap'} = [ ['0755'], '', 'wheel', '' ];
    }

    if ( ( cpanel_version_is(qw( >= 11.44.0.0 )) && cpanel_version_is(qw( < 11.44.0.8 )) ) || ( cpanel_version_is(qw( >= 11.42.0.0 )) && cpanel_version_is(qw( < 11.42.1.18 )) ) ) {
       $check{'/usr/local/cpanel/bin/sendmail'} = [ ['4755'], '', '', ' - CGIEmail wants suid /u/l/cpanel/bin/sendmail (case 86561)' ];
    }
    else {
       $check{'/usr/local/cpanel/bin/sendmail'} = [ ['0755'], '', '', '' ];
    }

    for my $resource ( sort keys %check ) {
        if ( -l $resource ) {
            print_warn('Non-default Location: ');
            print_warning($resource . " is a symlink to [ " . readlink($resource) . " ]");
        }
        if ( -e $resource ) {
            my ($mode, $uid, $gid) = ( stat($resource) )[2,4,5];
            $mode &= 07777;
            $mode = sprintf "%lo", $mode;
            my $user = getpwuid($uid);
            $user = $user ? $user : $uid;
            my $group = getgrgid($gid);
            $group = $group ? $group : $gid;
            my $checkuser = $check{$resource}[1] ? $check{$resource}[1] : 'root';
            my $checkgroup = $check{$resource}[2] ? $check{$resource}[2] : 'root';
            if ( ! ($user eq $checkuser) || ! ($group eq $checkgroup) ) {
                print_warn('Non-default Ownership: ');
                print_warning($resource . ' (owner: [ ' . $user . ':' . $group . ' ] | default: [ ' . $checkuser . ':' . $checkgroup . ' ])' . $check{$resource}[3] );
            }
            my $default = 0;
            for my $checkmode ( @{$check{$resource}[0]} ) {
                if ( $mode == $checkmode ) {
                    $default = 1;
                }
            }
            if ( ! $default == 1 ) {
                    print_warn('Non-default Permissions: ');
                    print_warning($resource . ' (mode: ' . sprintf("%04d", $mode) . ' | default: ' . join(' or ', @{$check{$resource}[0]}) . ')' . $check{$resource}[3] );
            }
        }
    }
}

sub check_awstats_permissions {
    ## if skipawstats doesn't exist, awstats is OFF
    return if ( ( exists $cpconf{'skipawstats'} and $cpconf{'skipawstats'} == 1 ) or ( not exists $cpconf{'skipawstats'} ));

    my $awstats = '/usr/local/cpanel/3rdparty/bin/awstats.pl';

    if ( -e $awstats ) {
        my $mode = ( stat($awstats) )[2] & 07777;
        $mode = sprintf "%lo", $mode;
        if ( $mode != 755 ) {
            print_warn('Awstats: ');
            print_warning(" enabled, but $awstats isn't 755 !");
        }
    }
}

sub check_var_cpanel_users_files_ownership {
    my $var_cpanel_users = '/var/cpanel/users';

    my @files;
    if ( -d $var_cpanel_users ) {
        opendir( my $dir_fh, $var_cpanel_users );
        @files = grep { !m/^(?:\.\.?|root|system|nobody)$/ } readdir $dir_fh;
        closedir $dir_fh;
    }

    my $group_root_files;
    for my $file (@files) {
        next if ( $file !~ /^[a-z0-9]+$/ );
        my $gid = ( stat( '/var/cpanel/users/' . $file ) )[5];
        if ( $gid == 0 ) {
            $group_root_files .= " $file";
        }
    }

    if ($group_root_files) {
        print_warn('/v/c/users file(s) owned by group "root": ');
        print_warning($group_root_files);
    }
}

sub check_root_suspended {
    if ( -e '/var/cpanel/suspended/root' ) {
        print_warn('root suspended: ');
        print_warning('the root account is suspended! Unsuspend it to avoid problems.');
    }
}

sub check_limitsconf {
    my @limitsconf;

    if ( open my $limitsconf_fh, '<', '/etc/security/limits.conf' ) {
        while (<$limitsconf_fh>) {
            push @limitsconf, $_;
        }
        close $limitsconf_fh;
    }

    @limitsconf = grep { !/^(\s+|#)/ } @limitsconf;

    if (@limitsconf) {
        print_warn('/etc/security/limits.conf: ');
        print_warning('customizations found. DON\'T move/alter! Seeing "Unable to set uids"? See CronUnableToSetUID article, FB 76597.');
    }
}

sub check_disk_space {
    my @df = split /\n/, timed_run( 0, 'df' );
    for my $line (@df) {
        if ( $line =~ m{ (9[8-9]|100)% \s+ (.*) }xms ) {
            my ( $usage, $partition ) = ( $1, $2 );
            unless ( $line =~ m{ /virtfs | /(dev|proc) \z }xms ) {
                print_warn('Disk space: ');
                print_warning("${usage}% usage on $partition");
            }
        }
    }
}

sub check_disk_inodes {
    my @df_i = split /\n/, timed_run( 0, 'df', '-i' );
    for my $line (@df_i) {
        if ( $line =~ m{ (9[8-9]|100)% \s+ (.*) }xms ) {
            my ( $usage, $partition ) = ( $1, $2 );
            unless ( $line =~ m{ /virtfs | /(dev|proc) \z }xms ) {
                print_warn('Disk inodes: ');
                print_warning("${usage}% inode usage on $partition");
            }
        }
    }
}

sub check_for_hooks_in_scripts_directory {
    if ( -f '/usr/local/cpanel/Cpanel/CustomEventHandler.pm' ) {
        print_warn('Hooks: ');
        print_warning('/usr/local/cpanel/Cpanel/CustomEventHandler.pm exists!');
    }

    # default CloudLinux, cPGs hooks that can be ignored
    my %hooks_ignore = qw(
      e5e13640299ec439fb4c7f79a054e42b    /scripts/posteasyapache
      16d94b5426681a977e2beedd0ad871e9    /scripts/posteasyapache
      42a624c843f34085f1532b0b4e17fe8c    /scripts/postmodifyacct
      05b7f8b4f2c83f033d124479a1c3eca0    /scripts/postupcp
      22cf7db1c069fd9672cd9dad3a3d371d    /scripts/postupcp
      57f8ea2d494e299827cc365c86a357ac    /scripts/postupcp
      e464adf0531fea2af4fe57361d9a43fb    /scripts/postupcp
      941772daaa48999f1d5ae5fe2f881e36    /scripts/postupcp
      843f9a04ceed5d03dc34616b371abf06    /scripts/postupcp
      4988be925a6f50ec505618a7cec702e2    /scripts/postkillacct
      a4df04a6440073fe40363cfd241b1fe7    /scripts/postwwwacct
      03a0dc919c892bde254c52cefe4d0673    /scripts/postwwwacct
      2401d6260dac6215596be1652b394200    /scripts/postwwwacct
      677da3bdd8fbd16d4b8917a9fe0f6f89    /scripts/postwwwacct
      44caf075fc0f9847ede43de5dd563edc    /scripts/prekillacct
      86f9b53c81a8f2fd77a8626ddd3b2c71    /scripts/prekillacct
      46fee9faf2d5f83cbcda17ce0178a465    /scripts/prekillacct
      677da3bdd8fbd16d4b8917a9fe0f6f89    /scripts/prekillacct
      423370856f0be1b80f39d28043d7d4f8    /scripts/postrestoreacct
    );

    my @hooks;
    if ( -d '/scripts' ) {
        opendir( my $scripts_fh, '/scripts' );
        @hooks = grep { /^(pre|post)/ } readdir $scripts_fh;
        closedir $scripts_fh;
    }

    # these exist by default
    @hooks = grep { !/postsuexecinstall/ && !/post_sync_cleanup/ } @hooks;

    # CloudLinux stuff
    @hooks = grep { !/postwwwacct\.l\.v\.e-manager\.bak/ } @hooks;

    my $hooks_output;
    if (@hooks) {
        for my $hook (@hooks) {
            $hook = '/scripts/' . $hook;
            chomp( my $checksum = timed_run( 0, 'md5sum', $hook ) );
            $checksum =~ s/\s.*//g;
            next if exists $hooks_ignore{$checksum};

            if ( !-z $hook ) {
                $hooks_output .= " $hook ";
            }
        }
    }

    if ($hooks_output) {
        print_warn('Hooks: ');
        print_warning($hooks_output);
    }
}

sub check_for_huge_logs {
    my @logs = qw(  /usr/local/apache/logs/access_log
                    /usr/local/apache/logs/error_log
                    /usr/local/apache/logs/mod_jk.log
                    /usr/local/apache/logs/modsec_audit.log
                    /usr/local/apache/logs/modsec_debug.log
                    /usr/local/apache/logs/suexec_log
                    /usr/local/apache/logs/suphp_log
                    /var/named/data/named.run
                );
    for my $log (@logs) {
        if ( -e $log ) {
            my $size = (stat($log))[7];
            if ( $size > 2_100_000_000 ) {
                $size = sprintf( "%0.2fGB", $size / 1073741824 );
                print_warn('M-M-M-MONSTER LOG!: ');
                print_warning("$log ($size)");
            }
        }
    }
}

sub check_easy_skip_cpanelsync {
    if ( -e '/var/cpanel/easy_skip_cpanelsync' ) {
        print_warn('Touchfile: ');
        print_warning('/var/cpanel/easy_skip_cpanelsync exists! ');
    }
}

sub check_pkgacct_override {
    if ( -d '/var/cpanel/lib/Whostmgr' ) {
        print_warn('pkgacct override: ');
        print_warning(' /var/cpanel/lib/Whostmgr exists, override may exist');
    }
}

sub check_for_gdm {
    my $gdm = 0;

    for my $line (@process_list) {
        if ( $line =~ m{ \A root (?:.*) gdm }xms ) {
            $gdm = 1;
            last;
        }
    }

    if ( $gdm == 1 ) {
        print_warn('gdm Process: ');
        print_warning('is running');
    }
}

sub check_for_redhat_firewall {
    my $iptables = timed_run( 0, 'iptables', '-L', 'RH-Firewall-1-INPUT' );

    if ($iptables) {
        print_warn('Default Redhat Firewall Check: ');
        print_warning('RH-Firewall-1-INPUT table exists. /scripts/configure_rh_firewall_for_cpanel to open ports.');
    }
}

sub check_easyapache {
    my $ea_is_running_file       = '/usr/local/apache/AN_EASYAPACHE_BUILD_IS_CURRENTLY_RUNNING';
    my $ea_in_process_list       = 0;
    my $apache_update_no_restart = '/var/cpanel/mgmt_queue/apache_update_no_restart';
    my $ea_is_running            = 0;

    if ( -e $ea_is_running_file ) {
        for my $process (@process_list) {
            if ( $process =~ m{ \A root (?:.*) easyapache }xms ) {
                $ea_in_process_list = 1;
                last;
            }
            else {
                $ea_in_process_list = 0;
            }
        }
        if ( $ea_in_process_list == 0 ) {
            print_warn('EasyApache: ');
            print_warning("$ea_is_running_file exists, but 'easyapache' not found in process list");
        }
        else {
            $ea_is_running = 1;
            print_warn('EasyApache: ');
            print_warning('is running');
        }
    }

    if ( -e $apache_update_no_restart and $ea_is_running == 0 ) {
        print_warn('EasyApache: ');
        print_warning("$apache_update_no_restart exists! This will prevent EA from completing successfully.");
    }
}

sub check_for_easyapache_hooks {
    my $hooks;

    my @hooks = qw( /scripts/before_apache_make
      /scripts/after_apache_make_install
      /scripts/before_httpd_restart_tests
      /scripts/after_httpd_restart_tests
    );

    # default CloudLinux hooks that can be ignored
    my %hooks_ignore = qw(
      41ec2d3f35d8cd7cb01b60485fb3bdbb    /scripts/before_apache_make
      407df66f28c8822cd4f51fe56160f74e    /scripts/before_apache_make
      24214790021e1df53a0a6e3741ca74c3    /scripts/before_apache_make
    );

    for my $hook (@hooks) {
        if ( -f $hook and !-z $hook ) {
            chomp( my $checksum = timed_run( 0, 'md5sum', $hook ) );
            $checksum =~ s/\s.*//g;
            next if exists $hooks_ignore{$checksum};
            $hooks .= " $hook";
        }
    }

    if ($hooks) {
        print_warn('EA hooks: ');
        print_warning($hooks);
    }
}

sub check_for_home_noexec {
    my @mount = split /\n/, timed_run( 0, 'mount' );

    for my $mount (@mount) {
        if ( $mount =~ m{ \s on \s (/home([^\s]?)) \s (:?.*) noexec }xms ) {
            my $noexec_partition = $1;
            print_warn('mounted noexec: ');
            print_warning($noexec_partition);
        }
    }
}

## compare external IP addr with local IP addrs, OR
## check if only internal IP addrs are bound to server (this is not as reliable,
## as NAT can still be used with external IP addrs of course)
sub check_for_nat {
    return if -e '/var/cpanel/cpnat';

    my @external_ipaddrs;
    my $reply;
    my $count = 0;

    for ( 1 .. 3 ) {
        local $SIG{'ALRM'} = sub {
            $count++;
            print_warn('NAT check timed out: ');
            print_warning("attempt $count of 3");
        };
        alarm 3;

        my $sock = IO::Socket::INET->new(
            PeerAddr => 'cpanel.net',
            PeerPort => '80',
            Proto    => 'tcp',
            Timeout  => 3,
        );

        if ($sock) {
            print $sock "GET /showip.cgi HTTP/1.0\r\n\r\n";
            sysread $sock, $reply, 1000;
            close $sock;
        }

        if ( $reply and $reply =~ m{ (\d+\.\d+\.\d+\.\d+) }xms ) {
            $external_ip_address = $1;
        }
        else {
            return;
        }

        if ($external_ip_address) {
            chomp $external_ip_address;
        }
        alarm 0;

        if ($external_ip_address) {
            last;
        }
    }

    if ( $external_ip_address && $external_ip_address =~ m{ \A \d+\.\d+\.\d+\.\d+ }xms ) {
        if ( !grep { /$external_ip_address/ } @local_ipaddrs_list ) {
            print_warn('NAT: ');
            print_warning("external IP address $external_ip_address is not bound to server");
        }
    }
    else {
        for my $ipaddr (@local_ipaddrs_list) {
            if ( $ipaddr !~ m{ \A ( ?: 127\. | 192\.168\. | 10\. | 172\.(1[6-9]|2[0-9]|3[0-1]) ) }xms ) {
                push @external_ipaddrs, $ipaddr;
            }
        }
        if ( !@external_ipaddrs ) {
            print_warn('NAT: ');
            print_warning('no external IP addresses detected');
        }
    }
}

sub check_for_oracle_linux {
    my $centos_5_oracle_release_file = '/etc/enterprise-release';
    my $centos_6_oracle_release_file = '/etc/oracle-release';

    if ( -f $centos_5_oracle_release_file ) {
        print_warn('Oracle Linux: ');
        print_warning("$centos_5_oracle_release_file detected!");
    }
    elsif ( -f $centos_6_oracle_release_file ) {
        print_warn('Oracle Linux: ');
        print_warning("$centos_6_oracle_release_file detected!");
    }
}

sub check_for_usr_local_cpanel_hooks {
    my $hooks;
    my $dir = '/usr/local/cpanel/hooks';
    find( \&find_usr_local_cpanel_hooks, $dir );

    # default CloudLinux hooks that can be ignored
    my %hooks_ignore = qw(
      677da3bdd8fbd16d4b8917a9fe0f6f89    /usr/local/cpanel/hooks/addondomain/addaddondomain
      677da3bdd8fbd16d4b8917a9fe0f6f89    /usr/local/cpanel/hooks/addondomain/deladdondomain
      677da3bdd8fbd16d4b8917a9fe0f6f89    /usr/local/cpanel/hooks/subdomain/addsubdomain
      677da3bdd8fbd16d4b8917a9fe0f6f89    /usr/local/cpanel/hooks/subdomain/delsubdomain
      289b2b4c8b5293103def4557d3538060    /usr/local/cpanel/hooks/mysql/adduser
      289b2b4c8b5293103def4557d3538060    /usr/local/cpanel/hooks/mysql/deluser
    );

    if (@usr_local_cpanel_hooks) {
        for my $hook (@usr_local_cpanel_hooks) {
            my $tmp_hook = '/usr/local/cpanel/hooks/' . $hook;
            if ( -f $tmp_hook and !-z $tmp_hook ) {
                chomp( my $checksum = timed_run( 0, 'md5sum', $tmp_hook ) );
                $checksum =~ s/\s.*//g;
                next if exists $hooks_ignore{$checksum};
                $hooks .= "$hook ";
            }
        }
    }

    if ($hooks) {
        print_warn("$dir: ");
        print_warning($hooks);
    }
}

sub find_usr_local_cpanel_hooks {
    my $file = $File::Find::name;
    if ( -f $file and $file !~ m{ ( README | \.example ) \z }xms ) {
        $file =~ s#/usr/local/cpanel/hooks/##;
        push @usr_local_cpanel_hooks, $file;
    }
}

sub check_for_sql_safe_mode {
    if ( grep { m# \A (?:[ \t]+)? sql\.safe_mode \s* = \s* on #ixms } @phpini ) {
        print_warn('/usr/local/lib/php.ini: ');
        print_warning('sql.safe_mode is enabled! This may break PHP SQL authentication.');
    }
}

sub get_mysql_datadir {
    my $datadir = '/var/lib/mysql/';
    if ( $mysql_conf{'LINES'} && $mysql_conf{'mysqld'}{'datadir'} ) {
        $datadir =  $mysql_conf{'mysqld'}{'datadir'}[1];
        if ( $datadir !~ m{ / \z }xms ) {
            $datadir .= '/';
        }
    }
    return $datadir;
}

sub check_mysqld_warnings_errors {
    foreach my $mysql_err ( grep ( m{\[(?:err)}i, split( /\n/, timed_run_trap_stderr( 0, 'mysqld', '-u', 'mysql', '--help' ) ) ) ) {
        if ( $mysql_err =~ m/open_files_limit=/ ) {
            print_warn('MySQL config missing newline: [see FB 64008]: ');
            print_warning($mysql_err);
        }
        else {
            print_warn('MySQL config errors: ');
            print_warning($mysql_err);
        }
    }
}

sub check_for_domain_forwarding {
    my $domainfwdip = '/var/cpanel/domainfwdip';

    if ( -f $domainfwdip and !-z $domainfwdip ) {
        print_warn('Domain Forwarding: ');
        print_warning("cat $domainfwdip to see what is being forwarded!");
    }
}

sub check_for_empty_apache_templates {
    my $apache2_template_dir = '/var/cpanel/templates/apache2';
    my @dir_contents;
    my $empty_templates;

    if ( -d $apache2_template_dir ) {
        opendir( my $dir_fh, $apache2_template_dir );
        @dir_contents = grep { !/^\.\.?$/ } readdir $dir_fh;
        closedir $dir_fh;
    }

    if ( !@dir_contents ) {
        print_warn('Apache templates: ');
        print_warning("none found in $apache2_template_dir !");
    }
    else {
        for my $template (@dir_contents) {
            if ( -z "$apache2_template_dir/$template" ) {
                $empty_templates .= "$template ";
            }
        }
    }

    if ($empty_templates) {
        print_warn("Empty Apache templates in $apache2_template_dir (this can affect the ability to remove domains): ");
        print_warning("$empty_templates");
    }
}

sub check_for_empty_postgres_config {
    my $postgres_config = '/var/lib/pgsql/data/pg_hba.conf';
    if ( -f $postgres_config and -z $postgres_config ) {
        print_warn('Postgres config: ');
        print_warning("$postgres_config is empty (install via WHM >> Postgres Config)");
    }
}

sub check_for_empty_easyapache_profiles {
    my $templates;
    my $dir = '/var/cpanel/easy/apache/profile';
    find( \&find_easyapache_templates, $dir );

    if (@easyapache_templates) {
        for my $template (@easyapache_templates) {
            $templates .= "$template ";
        }

        print_warn("Empty template(s) in $dir: ");
        print_warning($templates);
    }
}

sub find_easyapache_templates {
    my $file = $File::Find::name;
    if ( -f $file and -z $file ) {
        $file =~ s#/var/cpanel/easy/apache/profile/##g;
        push @easyapache_templates, $file;
    }
}

sub check_for_missing_timezone_from_phpini {
    my $timezone;

    for my $line (@phpini) {
        if ( $line =~ m{ \A date\.timezone (?:\s+)? = (?:\s+)? (?:["'])? ([^/"']+) / ([^/"']+) (?:["'])? (?:\s+)? \z }xms ) {
            $timezone = $1 . '/' . $2;
            last;
        }
    }

    if ($timezone) {
        my ( $tz1, $tz2 ) = split /\//, $timezone;
        my $path = '/usr/share/zoneinfo/' . $tz1 . '/' . $tz2;

        if ( !-f $path ) {
            print_warn("date.timezone from /usr/local/lib/php.ini: ");
            print_warning("$path not found!");
        }    
    }    
}

sub check_for_proc_mdstat_recovery {
    my $mdstat = '/proc/mdstat';

    my $recovery = 0;

    if ( open my $mdstat_fh, '<', $mdstat ) {
        while (<$mdstat_fh>) {
            if (/recovery/) {
                $recovery = 1;
                last;
            }
        }
        close $mdstat_fh;
    }

    if ( $recovery == 1 ) {
        print_warn('Software RAID recovery: ');
        print_warning("cat $mdstat to check the status");
    }
}

sub check_usr_local_cpanel_path_for_symlinks {
    my @dirs = qw(  /usr
      /usr/local
      /usr/local/cpanel
    );

    for my $dir (@dirs) {
        if ( -l $dir ) {
            print_warn('Directory is a symlink: ');
            print_warning("$dir (this can cause Internal Server Errors for redirects like /cpanel, etc)");
        }
    }
}

sub populate_mysql_rpm_versions_array {
    return if !@rpm_list;

    my @tmp  = grep { /^MySQL(?:55)?-(server|shared|devel|client|test|embedded)-(.*)$/ } @rpm_list;
    for my $rpm (@tmp) {
        $rpm =~ s/.*-(server|shared|devel|client|test|embedded)-//g;
        push @mysql_rpm_versions, $rpm;
    }
}

sub check_for_mysql_4 {
    return if !@mysql_rpm_versions;

    my $mysql_4 = 0;

    for my $rpm (@mysql_rpm_versions) {
        if ( $rpm =~ m{ \A 4 }xms ) {
            $mysql_4 = 1;
            last;
        }
    }

    if ( $mysql_4 == 1 ) {
        print_warn('MySQL 4.x RPM: ');
        print_warning('found! This can interfere with cPanel updates');
    }
}

sub check_for_additional_rpms {
    return if !@rpm_list;

    my @additional_rpms = grep { /^(php-|kde-|psa-|clamav|clamd|rrdtool-)|(http|apache|pear|sendmail)/ } @rpm_list;
    @additional_rpms = grep { !/httpd-tools|cpanel-|alt-php|apache-tomcat-apis/ } @additional_rpms;
    if (@additional_rpms) {
        print "\n";
        print_magenta('This is informational only. Unless these rpms directly relate to an issue, they can be ignored:');
        @additional_rpms = sort @additional_rpms;
        for my $rpm (@additional_rpms) {
            print_start('Additional RPM: ');
            print_warning($rpm);
        }
    }
}

sub check_mysql_rpm_mismatch {
    return if !@rpm_list;

    my $first_rpm = pop @mysql_rpm_versions;
    for ( 1 .. scalar @mysql_rpm_versions ) {
        my $next_rpm = pop @mysql_rpm_versions;
        if ( $first_rpm ne $next_rpm ) {
            print_warn('MySQL RPMs: ');
            print_warning('version mismatch!');
            last;
        }
    }
}

sub check_php_libmysqlclient_mismatch {
    return if !@rpm_list;

    my ( @php4_ldd,                    @php5_ldd );
    my ( $php4_libmysqlclient_version, $php5_libmysqlclient_version );

    my $php4_binary = '/usr/local/php4/bin/php';
    my $php5_binary = '/usr/bin/php';

    my $php4_mismatch = 0;
    my $php5_mismatch = 0;

    my $mysql_shared_rpm_version_orig;
    my $mysql_shared_rpm_version;

    ## Get the MySQL-shared rpm major and minor version.
    for my $rpm (@rpm_list) {
        if ( $rpm =~ /MySQL-shared-(\d)\.(\d)/ ) {
            $mysql_shared_rpm_version_orig = $rpm;
            $mysql_shared_rpm_version      = $1 . $2;
            last;
        }
    }

    return if !$mysql_shared_rpm_version;

    ## Run ldd against whichever major php version is active
    if ( open my $phpconfyaml_fh, '<', '/usr/local/apache/conf/php.conf.yaml' ) {
        while ( my $line = <$phpconfyaml_fh> ) {
            if ( $line =~ m{ \A php4: \s (.*) }xms ) {
                if ( $1 ne 'none' ) {
                    @php4_ldd = split /\n/, timed_run( 0, 'ldd', $php4_binary );
                }
            }
            elsif ( $line =~ m{ \A php5: \s (.*) }xms ) {
                if ( $1 ne 'none' ) {
                    @php5_ldd = split /\n/, timed_run( 0, 'ldd', $php5_binary );
                }
            }
        }
        close $phpconfyaml_fh;
    }

    ## Get the linked libmysqlclient version
    if (@php4_ldd) {
        for my $libs (@php4_ldd) {
            if ( $libs =~ m{ \A \s+ libmysqlclient\.so\.(\d+) \s => \s (?:\S+) \s (?:\S+) \z }xms ) {
                $php4_libmysqlclient_version = $1;
                last;
            }
        }
    }

    if (@php5_ldd) {
        for my $libs (@php5_ldd) {
            if ( $libs =~ m{ \A \s+ libmysqlclient\.so\.(\d+) \s => \s (?:\S+) \s (?:\S+) \z }xms ) {
                $php5_libmysqlclient_version = $1;
                last;
            }
        }
    }

    ## Compare the linked libmysqlclient lib with the MySQL-shared rpm version
    ##
    ## libmysqlclient.so.18 = MySQL-shared 5.5
    ## libmysqlclient.so.16 = MySQL-shared 5.1
    ## libmysqlclient.so.15 = MySQL-shared 5.0

    if ($php4_libmysqlclient_version) {
        if ( $php4_libmysqlclient_version == 18 and $mysql_shared_rpm_version != 55 ) {
            $php4_mismatch = 1;
        }
        elsif ( $php4_libmysqlclient_version == 16 and $mysql_shared_rpm_version != 51 ) {
            $php4_mismatch = 1;
        }
        elsif ( $php4_libmysqlclient_version == 15 and $mysql_shared_rpm_version != 50 ) {
            $php4_mismatch = 1;
        }

        if ( $php4_mismatch == 1 ) {
            print_warn('PHP/libmysqlclient mismatch: ');
            print_warning("$php4_binary linked against libmysqlclient.so.$php4_libmysqlclient_version, but MySQL-shared rpm is $mysql_shared_rpm_version_orig");
        }
    }

    if ($php5_libmysqlclient_version) {
        if ( $php5_libmysqlclient_version == 18 and $mysql_shared_rpm_version != 55 ) {
            $php5_mismatch = 1;
        }
        elsif ( $php5_libmysqlclient_version == 16 and $mysql_shared_rpm_version != 51 ) {
            $php5_mismatch = 1;
        }
        elsif ( $php5_libmysqlclient_version == 15 and $mysql_shared_rpm_version != 50 ) {
            $php5_mismatch = 1;
        }

        if ( $php5_mismatch == 1 ) {
            print_warn('PHP/libmysqlclient mismatch: ');
            print_warning("$php5_binary linked against libmysqlclient.so.$php5_libmysqlclient_version, but MySQL-shared rpm is $mysql_shared_rpm_version_orig");
        }
    }
}

sub check_for_system_mem_below_512M {
    my $meminfo = '/proc/meminfo';
    my $memtotal;

    if ( open my $meminfo_fh, '<', $meminfo ) {
        while (<$meminfo_fh>) {
            if (m{ \A MemTotal: \s+ (\d+) \s+ kB \s+ \z }xms) {
                $memtotal = $1 / 1024;
                last;
            }
        }
        close $meminfo_fh;
    }

    if ( $memtotal =~ /^(\d+)\./ ) {
        $memtotal = $1;
    }

    if ( $memtotal < 512 ) {
        print_warn('Memory: ');
        print_warning("Server has less than 512M physical memory! [$memtotal MB]");
    }
}

sub check_yumconf_sanity {
    my $yumconf = '/etc/yum.conf';

    if ( !-e $yumconf ) {
        print_warn('YUM: ');
        print_warning("$yumconf is missing!");
    }
    elsif ( -z $yumconf ) {
        print_warn('YUM: ');
        print_warning("$yumconf is empty!");
    }

    if ( open( my $yum_conf_fh, '<', '/etc/yum.conf' ) ) {
        local $/ = undef;
        my $yum_conf_text = readline($yum_conf_fh);
        if ( $yum_conf_text =~ m/exclude=.*?wget/ ) {
            print_warn('YUM: ');
            print_warning("$yumconf has wget excluded!");
        }
    }
}

sub check_for_cpanel_files {
    my @files = qw(
      /usr/local/cpanel/cpanel
      /usr/local/cpanel/cpsrvd
      /usr/local/cpanel/cpsrvd-ssl
    );

    for my $file (@files) {
        if ( !-e $file ) {
            print_warn('Critical file missing: ');
            print_warning("$file");
        }
    }
}

sub check_bash_history_for_certain_commands {
    my $bash_history     = '/root/.bash_history';
    my %history_commands = ();
    my $commands;

    if ( -l $bash_history ) {
        my $link = readlink $bash_history;
        print_warn("$bash_history: ");
        print_warning("is a symlink! Linked to $link");
    }
    elsif ( -f $bash_history ) {
        if ( open my $history_fh, '<', $bash_history ) {
            while (<$history_fh>) {
                if (/chattr/) {
                    $history_commands{'chattr'} = 1;
                }
                if (/chmod/) {
                    $history_commands{'chmod'} = 1;
                }
                if (/openssl(?:.*)\.tar/) {
                    $history_commands{'openssl*.tar'} = 1;
                }
            }
            close $history_fh;
        }
    }

    if (%history_commands) {
        while ( my ( $key, $value ) = each(%history_commands) ) {
            $commands .= "[$key] ";
        }

        print_warn("$bash_history commands found: ");
        print_warning($commands);
    }
}

sub check_wwwacctconf_for_incorrect_minuid {
    my $wwwacctconf = '/etc/wwwacct.conf';
    my $minuid;

    if ( open my $wwwacctconf_fh, '<', $wwwacctconf ) {
        while (<$wwwacctconf_fh>) {
            if (/^MINUID\s(\d+)$/) {
                $minuid = $1;
                last;
            }
        }
        close $wwwacctconf_fh;
    }

    if ( $minuid and $minuid =~ /\d+/ ) {
        if ( $minuid < 500 or $minuid > 60000 ) {
            print_warn('MINUID: ');
            print_warning("$wwwacctconf has a MINUID value of $minuid (should be between 500 and 60000)");
        }
    }
}

sub check_roots_cron_for_certain_commands {
    my @cronlist = glob( q{
        /etc/cron.d/*
        /etc/cron.hourly/*
        /etc/cron.daily/*
        /etc/cron.weekly/*
        /etc/cron.monthly/*
        /var/spool/cron/root
    } );

    # The default tmpwatch cron CAN remove the /tmp/mysql.sock symlink, so it should not be ignored.
    my %cron_ignore = ( # These contain 'interesting' commands that should be ignored if they aren't going to cause problems
        '7440999604d3517ca235c7949f803ece' => '/etc/cron.daily/maldet', # Default
        'aede9174c0a1b0cf225165e204aa6fd8' => '/etc/cron.hourly/modsecparse.pl', # Default
        '195ddc2ac97502c2a96cc758cb7c9097' => '/etc/cron.daily/freshclam', # Default
        'de7d9c2df94e20af5aa401e708c3119d' => '/etc/cron.daily/prelink', # Default
        '3ffb5926bb7533bb077e2ec37f767851' => '/etc/cron.daily/tmpwatch', # modified to not remove symlinks, so wouldn't delete mysql.sock
    );

    my %found = ();

    for my $cron ( @cronlist ) {
        next if ! ( -f $cron || -l $cron );
        next if ($cron =~ m{ /(
            freshclam |
            makewhatis\.cron |
            maldet |
            modsecparse.pl |
            prelink
            ) $ }x); # Common false-positives to filter out entirely.
        chomp( my $checksum = timed_run( 0, 'md5sum', $cron ) );
        $checksum =~ s/\s.*//g;
        next if ( $checksum && $cron_ignore{$checksum} );
        if ( open my $cron_fh, '<', $cron ) {
            while (<$cron_fh>) {
                if (m{ \A [^#]* (?:^|\s|\/)(rm|unlink|chmod|chown|chattr|kill|pkill|skill|tmpwatch)\s }x) {
                    $found{$cron}{$1} = 1;
                }
            }
            close $cron_fh;
        }
    }

    if (%found) {
        for my $cron ( keys(%found) ) {
            my $additional_info = "";
            if ( $found{$cron}{'tmpwatch'} ) {
                $additional_info = ' (tmpwatch may be deleting /tmp/mysql.sock)';
            }
            print_warn("cron: ");
            print_warning( $cron . " contains [ " . join(' ', sort(keys(%{$found{$cron}}))) . " ]" . $additional_info);
        }
    }
}

sub check_for_missing_or_commented_customlog {
    my $apache_version;
    my $templates_dir = '/var/cpanel/templates/apache';
    my $commented_templates;
    my $missing_customlog_templates;
    my $httpdconf = '/usr/local/apache/conf/httpd.conf';
    my $httpdconf_commented_customlog;
    my $httpdconf_customlog_exists;

    if (@apache_version_output) {
        for my $line (@apache_version_output) {
            if ( $line =~ m{ \A Server \s version: \s Apache/(\d) (?:.*) \z }xms ) {
                $apache_version = $1;
            }
        }
    }

    return if !$apache_version;
    $apache_version == 1 ? $templates_dir .= 1 : $templates_dir .= 2;

    my %templates = (
        'main.default'      => 0,
        'main.local'        => 0,
        'vhost.default'     => 0,
        'vhost.local'       => 0,
        'ssl_vhost.default' => 0,
        'ssl_vhost.local'   => 0,
    );

    for my $template ( keys %templates ) {
        my $template_full_path = $templates_dir . '/' . $template;
        if ( -f $template_full_path ) {
            if ( open my $template_fh, '<', $template_full_path ) {
                while (<$template_fh>) {
                    if (/#(?:\s+)?CustomLog\s/i) {
                        $commented_templates .= "$template_full_path ";
                        $templates{$template} = 1;
                        last;
                    }
                    elsif (/CustomLog\s/i) {
                        $templates{$template} = 1;
                    }
                }
                close $template_fh;
            }
        }
    }

    while ( my ( $template, $value ) = each(%templates) ) {
        if ( $value == 0 and -f "$templates_dir/$template" ) {
            $missing_customlog_templates .= "$templates_dir/$template ";
        }
    }

    if ( open my $httpdconf_fh, '<', $httpdconf ) {
        local $/ = undef;
        my $httpdconf_txt = readline($httpdconf_fh);
        close $httpdconf_fh;
        if ( $httpdconf_txt =~ m/\n[\t ]*#[\t ]*CustomLog\s/si ) {
            $httpdconf_commented_customlog = 1;
        }
        if ( $httpdconf_txt =~ m/\n[\t ]*CustomLog\s/si ) {
            $httpdconf_customlog_exists = 1;
        }
    }

    if ($httpdconf_commented_customlog) {
        $commented_templates .= ' httpd.conf';
    }
    elsif ( !$httpdconf_customlog_exists ) {
        $missing_customlog_templates .= ' httpd.conf';
    }

    if ($commented_templates) {
        print_warn('CustomLog commented out: ');
        print_warning($commented_templates);
    }

    if ($missing_customlog_templates) {
        print_warn('CustomLog entries missing: ');
        print_warning($missing_customlog_templates);
    }
}

sub check_for_cpsources_conf {
    my $cpsources_conf = '/etc/cpsources.conf';

    if ( -f $cpsources_conf and !-z $cpsources_conf ) {
        print_warn('/etc/cpsources.conf: ');
        print_warning('exists!');
    }
}

sub check_for_apache_rlimits {
    my $httpdconf = '/usr/local/apache/conf/httpd.conf';
    my ( $rlimitmem, $rlimitcpu );
    my $output;

    if ( open my $httpdconf_fh, '<', $httpdconf ) {
        local $/ = undef;
        my $httpdconf_txt = readline($httpdconf_fh);
        close $httpdconf_fh;
        if ( $httpdconf_txt =~ m/\n[\t ]+RLimitMEM (\d+)/s ) {
            $rlimitmem = $1;
        }
        if ( $httpdconf_txt =~ m/\n[\t ]+RLimitCPU (\d+)/s ) {
            $rlimitcpu = $1;
        }
    }

    if ($rlimitmem) {
        my $rlimitmem_converted = sprintf( '%.0f MB', $rlimitmem / 1024 / 1024 );
        $output = "RLimitMEM $rlimitmem [$rlimitmem_converted]";
    }

    if ($rlimitcpu) {
        $output .= " RLimitCPU $rlimitcpu";
    }

    if ($output) {
        print_warn('Apache RLimits: ');
        print_warning($output);
    }
}

sub check_for_usr_local_lib_libz_so {
    if ( -f '/usr/local/lib/libz.so' ) {
        print_warn('/usr/local/lib/libz.so: ');
        print_warning('exists. This can prevent EA from completing');
    }
}

sub check_for_non_default_modsec_rules {
    my $modsec_enabled = 0;

    my $modsec2_conf      = '/usr/local/apache/conf/modsec2.conf';
    my $modsec2_user_conf = '/usr/local/apache/conf/modsec2.user.conf';
    my $modsec_rules_dir  = '/usr/local/apache/conf/modsec_rules';

    for my $module (@apache_modules_output) {
        if ( $module =~ /security2_module/ ) {
            $modsec_enabled = 1;
            last;
        }
    }

    return if ( $modsec_enabled == 0 );

    if ( -f $modsec2_conf ) {
        ## On 11.32.5.9 with EA v3.14.13, default modsec2.conf is 650 bytes.
        ## It's always been small in size.
        my $modsec2_conf_size     = ( stat($modsec2_conf) )[7];
        my $modsec2_conf_max_size = 1447;
        if ( $modsec2_conf_size > $modsec2_conf_max_size ) {
            print_warn('modsec: ');
            print_warning("$modsec2_conf is > $modsec2_conf_max_size bytes, may contain custom rules");
        }
    }

    if ( -f $modsec2_user_conf ) {
        my $modsec2_user_conf_size = ( stat($modsec2_user_conf) )[7];
        if ( $modsec2_user_conf_size != 0 ) {
            print_warn('modsec: ');
            print_warning("$modsec2_user_conf is not empty, may contain rules");
        }
    }

    if ( -d $modsec_rules_dir ) {
        print_warn('modsec: ');
        print_warning("$modsec_rules_dir exists, 3rd party rules may be in use");
    }
}

sub check_etc_hosts_sanity {
    my $hosts             = '/etc/hosts';
    my $localhost         = 0;
    my $httpupdate        = 0;
    my $localhost_not_127 = 0;
    my $hostname_entry    = 0;

    if ( !-f $hosts ) {
        print_warn('/etc/hosts: ');
        print_warning('missing!');
        return;
    }

    if ( open my $hosts_fh, '<', $hosts ) {
        while ( my $line = <$hosts_fh> ) {
            chomp $line;

            next if ( $line =~ /^(\s+)?#/ );

            if ( $line =~ m{  127\.0\.0\.1 (.*) localhost }xms ) {
                $localhost = 1;
            }
            if ( ( $line =~ m{ \s localhost (\s|\z) }xmsi ) and ( $line !~ m{ 127\.0\.0\.1 | ::1 }xms ) ) {
                $localhost_not_127 = 1;
            }
            if ( $line =~ m{ httpupdate\.cpanel\.net }xmsi ) {
                $httpupdate = 1;
            }
            if ( $line =~ m{ $hostname }xmsi ) {
                $hostname_entry = 1;
            }
        }
        close $hosts_fh;
    }

    if ( $localhost == 0 ) {
        print_warn('/etc/hosts: ');
        print_warning('no entry for localhost, or commented out');
    }

    if ( $httpupdate == 1 ) {
        print_warn('/etc/hosts: ');
        print_warning('contains an entry for httpupdate.cpanel.net');
    }

    if ( $localhost_not_127 == 1 ) {
        print_warn('/etc/hosts: ');
        print_warning('contains an entry for "localhost" that isn\'t 127.0.0.1! This can break EA and webmail logins');
    }

    if ( $hostname_entry == 0 ) {
        print_warn('/etc/hosts: ');
        print_warning("no entry found for the server's hostname! [$hostname]");
    }
}

sub check_for_empty_or_missing_files {
    opendir( my $dir_fh, '/var/cpanel/users' );
    my @dir_contents = grep { !/^(\.\.?|cp\d+[a-z]+)$/ } readdir $dir_fh;
    closedir $dir_fh;

    # if there are no users on the box, don't warn about userdatadomains
    return if scalar @dir_contents == 0;

    my $userdatadomains = '/etc/userdatadomains';

    if ( !-e $userdatadomains ) {
        print_warn('Missing file: ');
        print_warning("$userdatadomains (new server with no accounts, perhaps)");
    }
    elsif ( -f $userdatadomains and -z $userdatadomains ) {
        print_warn('Empty file: ');
        print_warning("$userdatadomains (generate it with /scripts/updateuserdatacache --force)");
    }
}

sub check_for_apache_listen_host_is_localhost {
    return if not exists $cpconf{'apache_port'};

    my $apache_setting = $cpconf{'apache_port'};
    $apache_setting =~ s/:.*//g;

    if ( $apache_setting eq '127.0.0.1' ) {
        print_warn('Apache listen host: ');
        print_warning('Apache may only be listening on 127.0.0.1');
    }
}

sub check_roundcube_mysql_pass_mismatch {
    return if ( exists $cpconf{'roundcube_db'} and $cpconf{'roundcube_db'} ne 'mysql' );

    my $roundcubepass;
    my $rc_mysql_pass;

    if ( open my $rc_pass_fh, '<', '/var/cpanel/roundcubepass' ) {
        while (<$rc_pass_fh>) {
            chomp( $roundcubepass = $_ );
        }
        close $rc_pass_fh;
    }
    else {
        return;
    }

    if ( open my $db_inc_fh, '<', '/usr/local/cpanel/base/3rdparty/roundcube/config/db.inc.php' ) {
        while (<$db_inc_fh>) {
            if (m{ \A \$rcmail_config\['db_dsnw'\] \s = \s 'mysql://roundcube:(.*)\@(?:.*)/roundcube';  }xms) {
                $rc_mysql_pass = $1;
            }
        }
        close $db_inc_fh;
    }
    else {
        return;
    }

    if ( !$roundcubepass or !$rc_mysql_pass ) {
        return;
    }

    if ( $roundcubepass ne $rc_mysql_pass ) {
        print_warn('RoundCube: ');
        print_warning('password mismatch [/var/cpanel/roundcubepass] [/usr/local/cpanel/base/3rdparty/roundcube/config/db.inc.php]');
    }
}

sub check_for_11_30_scripts_not_a_symlink {
    return if cpanel_version_is(qw( < 11.30.0.0 ));
    if ( !-l '/scripts' ) {
        print_warn('/scripts: ');
        print_warning("cPanel is >= 11.30 [$cpanel_version] and /scripts is not a symlink");
    }
}

sub check_for_hooks_from_var_cpanel_hooks_yaml {
    my $hooks_yaml = '/var/cpanel/hooks.yaml';
    my ( @hooks_tmp, @hooks );

    if ( open my $file_fh, '<', $hooks_yaml ) {
        while (<$file_fh>) {
            if (/hook: (.*)/) {

                # Ignore default Attracta hooks
                next if ( $1 =~ m{ \A ( /usr/local/cpanel/3rdparty/attracta/scripts/pkgacct-restore | /usr/local/cpanel/Cpanel/ThirdParty/Attracta/Hooks/pkgacct-restore ) \z }xms );
                push @hooks_tmp, "$1 ";
            }
        }
        close $file_fh;
    }

    for my $hook (@hooks_tmp) {
        if ( $hook =~ m/^\// ) {
            if ( -e $hook and !-z $hook ) {
                push @hooks, $hook;
            }
        }
        else {
            push @hooks, $hook; # we don't check for the existence of all hooks since they could be anywhere in perl's @INC, I think?
        }
    }

    if ( scalar @hooks == 1 ) {
        print_warn('Hooks in /var/cpanel/hooks.yaml: ');
        print_warning(@hooks);
    }
    elsif ( scalar @hooks > 1 ) {
        print_warn("Hooks in /var/cpanel/hooks.yaml:\n");
        for my $hook (@hooks) {
            print_magenta("\t \\_ $hook");
        }
    }
}

sub get_mysql_error_log {
    if ( $mysql_conf{'LINES'} && $mysql_conf{'mysqld'}{'logerror'} ) {
        return $mysql_conf{'mysqld'}{'logerror'}[1];
    }
    else {
        return '/var/lib/mysql/' . $hostname . '.err';
    }
}

sub check_mysql_config {
    return if ! $mysql_conf{'LINES'};
    my %mysqld_checks = ( # 'optionwithoutdashesorunderscores' => ['defaultvalue', '- Help text'],
        'datadir' => ['/var/lib/mysql', ''],
        'innodbforcerecovery' => ['0', '- Makes all InnoDB databases read-only, will break MySQL upgrades.'],
        'logerror' => ['/var/lib/mysql/' . $hostname . '.err', ''],
        'skipnameresolve' => ['', '- Seeing "Can\'t find any matching row"? That may be why.'],
        'skipnetworking' => ['', '- Webmail or other MySQL related items not functioning properly? That may be why.'],
        'sqlmode' => ['', '- Seeing "Field \'ssl_cipher\' doesn\'t have a default value"? That may be why.']
    );
    for my $check ( sort(keys(%mysqld_checks)) ) {
        if ( $mysql_conf{'mysqld'}{$check} && ! ( $mysql_conf{'mysqld'}{$check}[1] eq $mysqld_checks{$check}[0] ) ) {
            print_warn('MySQL /etc/my.cnf: ');
            if ( $mysql_conf{'mysqld'}{$check}[1] eq "enabled" ) {
                print_warning('[ ' . $mysql_conf{'mysqld'}{$check}[0] . ' ] found ' . $mysqld_checks{$check}[1]);
            }
            else {
                print_warning('[ ' . $mysql_conf{'mysqld'}{$check}[0] . ' = ' . $mysql_conf{'mysqld'}{$check}[1] . ' ] ' . $mysqld_checks{$check}[1]);
            }
        }
    }
}

sub check_for_C_compiler_optimization {
    return if ( not exists $cpconf{'enablecompileroptimizations'} or $cpconf{'enablecompileroptimizations'} == 0 );

    print_warn('Tweak Setting: ');
    print_warning('"Enable optimizations for the C compiler" enabled. If Sandy Bridge CPU, problems MAY occur (see ticket 3355885)');
}

sub check_for_low_ulimit_for_root {
    my $ulimit_m = timed_run( 0, 'echo `ulimit -m`' );
    my $ulimit_v = timed_run( 0, 'echo `ulimit -v`' );

    chomp( $ulimit_m, $ulimit_v );

    if ( $ulimit_m =~ /\d+/ ) {
        $ulimit_m = sprintf( '%.0f', $ulimit_m / 1024 );
    }
    if ( $ulimit_v =~ /\d+/ ) {
        $ulimit_v = sprintf( '%.0f', $ulimit_v / 1024 );
    }

    if ( $ulimit_m =~ /\d+/ and $ulimit_m <= 256 or $ulimit_v =~ /\d+/ and $ulimit_v <= 256 ) {
        if ( $ulimit_m =~ /\d+/ ) {
            $ulimit_m .= 'MB';
        }
        if ( $ulimit_v =~ /\d+/ ) {
            $ulimit_v .= 'MB';
        }

        print_warn('ulimit: ');
        print_warning("-m [ $ulimit_m ] -v [ $ulimit_v ] Low ulimits can cause EA to fail when run via the shell");
    }
}

sub check_for_fork_bomb_protection {
    if ( -f '/etc/profile.d/limits.sh' or -f '/etc/profile.d/limits.csh' ) {
        print_warn('Fork Bomb Protection: ');
        print_warning('enabled!');
    }
}

# cPanel < 11.30.7.3 will get YAML::Syck from CPAN. If this causes any issues with
# Cpanel::TaskQueue, cPanel's position is to upgrade cPanel.
sub check_for_cPanel_lower_than_11_30_7_3 {
    return if cpanel_version_is(qw( >= 11.30.7.3 ));
    print_warn('cPanel: ');
    print_warning('versions < 11.30.7.3 use YAML::Syck from CPAN. If problems with Cpanel::TaskQueue, cPanel needs to be updated');
}

sub check_for_custom_exim_conf_local {
    my $exim_conf_local = '/etc/exim.conf.local';
    my $is_customized   = 0;

    if ( open my $file_fh, '<', $exim_conf_local ) {
        while ( my $line = <$file_fh> ) {
            chomp $line;
            if ( $line !~ m{ \A ( @ | $ ) }xms ) {
                $is_customized = 1;
                last;
            }
        }
        close $file_fh;
    }

    if ( $is_customized == 1 ) {
        print_warn('Exim: ');
        print_warning("$exim_conf_local contains customizations");
    }
}

sub check_for_maxclients_or_maxrequestworkers_reached {
    my ( $version_major, $version_minor );
    my $apache_version;

    for my $line (@apache_version_output) {
        if ( $line =~ m{ \A Server \s version: \s Apache/(\d\.\d) }xms ) {
            ( $version_major, $version_minor ) = split /\./, $1;
            last;
        }
    }

    if ( ( $version_major == 2 ) and ( $version_minor == 2 ) ) {
        $apache_version = '2.2';
    }
    elsif ( ( $version_major == 2 ) and ( $version_minor == 4 ) ) {
        $apache_version = '2.4';
    }

    return if !$apache_version;

    my $log            = '/usr/local/apache/logs/error_log';
    my $size           = ( stat($log) )[7];
    my $bytes_to_check = 20_971_520 / 2;                       # 10M limit of logs to check, may need adjusting, depending how much time it adds to SSP
    my $seek_position  = 0;
    my $log_data;
    my @logs;
    my $limit_last_hit_date;

    return if !$size;

    if ( $size > $bytes_to_check ) {
        $seek_position = ( $size - $bytes_to_check );
    }

    if ( open my $file_fh, '<', $log ) {
        seek $file_fh, $seek_position, 0;
        read $file_fh, $log_data, $bytes_to_check;
        close $file_fh;
    }
    if ( $log_data =~ m/(?:MaxClients|MaxRequestWorkers)/s ) {
        @logs = split /\n/, $log_data;
        undef $log_data;
        @logs = reverse @logs;
        for my $log_line (@logs) {
            if ( $apache_version eq '2.2' ) {

                # [Wed Nov 14 05:55:04 2012] [error] server reached MaxClients setting, consider raising the MaxClients setting
                if ( $log_line =~ m{ \A \[ (\S+ \s+ \S+ \s+ \S+ \s+ \S+ \s+ \S+ ) \] \s+ \[error\] \s+ server \s+ reached \s+ MaxClients }xms ) {
                    $limit_last_hit_date = $1;
                    last;
                }
            }
            elsif ( $apache_version eq '2.4' ) {

                # [Fri Feb 08 09:58:45.875187 2013] [mpm_prefork:error] [pid 23220] AH00161: server reached MaxRequestWorkers
                if ( $log_line =~ m{ \A \[ (\S+ \s+ \S+ \s+ \S+ \s+ \S+ \s+ \S+ ) \] \s (.*) server \s reached \s MaxRequestWorkers }xms ) {
                    $limit_last_hit_date = $1;
                    last;
                }
            }
        }
    }

    if ($limit_last_hit_date) {
        if ( $apache_version eq '2.2' ) {
            print_warn('MaxClients: ');
        }
        elsif ( $apache_version eq '2.4' ) {
            print_warn('MaxRequestWorkers: ');
        }

        print_warning("limit last reached at $limit_last_hit_date");
    }
}

sub check_for_non_default_umask {
    my $umask = timed_run( 0, 'echo `umask`');

    return if !$umask;

    chomp $umask;

    if ( $umask !~ /2$/ ) {
        print_warn('umask: ');
        print_warning("Non-default value [$umask] (check FB 62683 if permissions error when running convert_roundcube_mysql2sqlite)");
    }
}

sub check_for_multiple_imagemagick_installs {
    if ( -x '/usr/bin/convert' and !-l '/usr/bin/convert' ) {
        if ( -x '/usr/local/bin/convert' and !-l '/usr/local/bin/convert' ) {
            print_warn('ImageMagick: ');
            print_warning('multiple "convert" binaries found [/usr/bin/convert] [/usr/local/bin/convert]');
        }
    }
}

sub check_for_kernel_headers_rpm {
    if ( !-f '/usr/include/linux/limits.h' ) {
        print_warn('Missing file: /usr/include/linux/limits.h not found. This can cause problems with EA. kernel-headers RPM missing/broken?');
    }
    else {
        if ( @rpm_list && ! grep(/^kernel-headers-/, @rpm_list) ) {
            print_warn('kernel-headers RPM: ');
            print_warning('not found. This can cause problems with EA');
        }
    }
}

sub check_for_custom_locales {

    # FB 62119

    my $locale_dir = '/var/cpanel/locale.local';
    my $users_dir  = '/var/cpanel/users';

    return if !-d $locale_dir;
    return if !-d $users_dir;

    my ( @locale_dir_contents_tmp, @locale_dir_contents, @cpanel_users );
    my ( @users_locales, @users_with_custom_locales );

    opendir( my $locale_dir_fh, $locale_dir );
    @locale_dir_contents_tmp = grep { !/^\.\.?$/ } readdir $locale_dir_fh;
    closedir $locale_dir_fh;

    return if !@locale_dir_contents_tmp;

    for my $locale (@locale_dir_contents_tmp) {
        $locale =~ s/^en\.yaml//g;    # doesn't seem to be affected
        $locale =~ s/\.yaml$//g;
        push @locale_dir_contents, $locale;
    }

    return if !@locale_dir_contents;

    opendir( my $users_dir_fh, $users_dir );
    @cpanel_users = grep { !/^(\.\.?|root)$/ } readdir $users_dir_fh;
    closedir $users_dir_fh;

    return if !@cpanel_users;

    my $user_count = scalar @cpanel_users;

    if ( $user_count > 2000 ) {
        print_warn("cpusers: ");
        print_warning("Too many cpanel users to do locales check: $user_count");
        return;
    }

    for my $user (@cpanel_users) {
        if ( open my $user_fh, '<', "${users_dir}/${user}" ) {
            while (<$user_fh>) {
                if (/^LOCALE=(.*)/) {
                    push @users_locales, "${user}:${1}\n";
                    last;
                }
            }
            close $user_fh;
        }
    }

    return if !@users_locales;

    for my $user_and_locale (@users_locales) {
        my ( $user, $locale ) = split /:/, $user_and_locale;
        if ( grep { m{ \A $locale \z }xms } @locale_dir_contents ) {
            push @users_with_custom_locales, $user;
            last;
        }
    }

    return if !@users_with_custom_locales;

    print_warn('locales: ');
    print_warning('[FB 62119] Users with custom locales detected. Seeing "500 Internal Server Error" in cPanel? May be related, check the FB');
}

sub check_eximstats_size {
    return if !-d $mysql_datadir;

    my $eximstats_dir = $mysql_datadir . 'eximstats/';
    my @dir_contents;
    my $size;

    if ( -d $eximstats_dir ) {
        opendir( my $dir_fh, $eximstats_dir );
        @dir_contents = grep { /(defers|failures|sends|smtp)\.(frm|MYI|MYD)$/ } readdir $dir_fh;
        closedir $dir_fh;
    }

    for my $file (@dir_contents) {
        $file = $eximstats_dir . $file;
        $size += ( stat($file) )[7];
    }

    if ( $size && $size > 5_000_000_000 ) {
        $size = sprintf( "%0.2fGB", $size / 1073741824 );
        print_warn('eximstats db: ');
        print_warning($size);
    }
}

sub check_eximstats_corrupt {
    return if !-f $mysql_error_log;

    my $size           = ( stat($mysql_error_log) )[7];
    my $bytes_to_check = 20_971_520;                      # 20M limit of logs to check
    my $seek_position  = 0;
    my $log_data;
    my @logs;
    my $eximstats_is_crashed;

    if ( $size > $bytes_to_check ) {
        $seek_position = ( $size - $bytes_to_check );
    }

    if ( open my $file_fh, '<', $mysql_error_log ) {
        seek $file_fh, $seek_position, 0;
        read $file_fh, $log_data, $bytes_to_check;
        close $file_fh;
    }

    @logs = split /\n/, $log_data;
    undef $log_data;
    @logs = reverse @logs;

    for my $log_line (@logs) {

        # /usr/sbin/mysqld: Table './eximstats/smtp' is marked as crashed and should be repaired
        if ( $log_line =~ m{ /eximstats/ (.*) marked \s as \s crashed }xms ) {
            $eximstats_is_crashed = $log_line;
            last;
        }
    }

    if ($eximstats_is_crashed) {
        print_warn('eximstats: ');
        print_warning("latest crash: $eximstats_is_crashed");
    }
}

sub check_for_clock_skew {
    ## last updated 2/14/14
    ## we do this to avoid having to do the DNS lookup
    my @rdate_servers = qw(
        64.50.161.11
        66.23.237.210
        67.159.2.2
        67.205.110.4
        67.222.0.10
        67.227.128.74
        69.50.192.73
        69.72.212.10
        69.72.212.11
        70.87.220.252
        72.233.42.250
        74.200.212.130
        74.200.65.162
        74.50.120.123
        75.126.236.226
        75.127.84.226
        208.109.109.239
        208.74.123.21
        208.74.125.42
        208.78.42.4
        208.82.118.100
        209.188.92.54
        209.85.80.214
        216.104.43.138
        216.38.56.98
    );

    my $num = int rand scalar @rdate_servers;
    my $rdate_server = $rdate_servers[$num];

    my $localtime = time();
    my $rdate_time;
    my $clock_skew;
    my $has_dovecot = 0;

    my %months = qw(
      Jan 0   Feb 1   Mar 2   Apr 3   May 4   Jun 5
      Jul 6   Aug 7   Sep 8   Oct 9   Nov 10  Dec 11
    );

    $rdate_time = timed_run( 0, 'rdate', '-p', '-t', '1', $rdate_server );

    ## fall back to UDP if necessary
    ## we don't use UDP first because many of the rdate servers don't reply when using it
    if ( !$rdate_time ) {
        $rdate_time = timed_run( 0, 'rdate', '-p', '-t', '1', '-u', $rdate_server );
    }

    return if !$rdate_time;

    $rdate_time =~ s/\A rdate: \s \[rdate\.cpanel\.net\] \s+//gxms;

    if ( $rdate_time =~ m{ \A \S+ \s (\S+) \s (\d+) \s (\d+):(\d+):(\d+) \s (\d+) }xms ) {
        my ( $mon, $mday, $hour, $min, $sec, $year ) = ( $1, $2, $3, $4, $5, $6 );
        $mon = $months{$mon};
        $rdate_time = timelocal( $sec, $min, $hour, $mday, $mon, $year );
    }

    return if ( $rdate_time !~ /\d{10}/ );

    $clock_skew = ( $rdate_time - $localtime );
    $clock_skew = abs $clock_skew;                # convert negative numbers to positive

    return if ( $clock_skew < 60 );

    if ( $clock_skew >= 31536000 ) {
        $clock_skew = sprintf '%.1f', ( $clock_skew / 31536000 );
        $clock_skew .= ' years';
    }
    elsif ( $clock_skew >= 86400 ) {
        $clock_skew = sprintf '%.1f', ( $clock_skew / 86400 );
        $clock_skew .= ' days';
    }
    elsif ( $clock_skew >= 3600 ) {
        $clock_skew = sprintf '%.1f', ( $clock_skew / 3600 );
        $clock_skew .= ' hours';
    }
    elsif ( $clock_skew >= 60 ) {
        $clock_skew = sprintf '%.1f', ( $clock_skew / 60 );
        $clock_skew .= ' minutes';
    }

    for my $process (@process_list) {
        if ( $process =~ m{ \A root (.*) dovecot }xms ) {
            $has_dovecot = 1;
            last;
        }
    }

    if ( $has_dovecot == 0 and $clock_skew !~ /minutes/ ) {
        print_warn('Clock skew: ');
        print_warning("servers time may be off by $clock_skew");
    }
    elsif ( $has_dovecot == 1 ) {
        print_warn('Clock skew: ');
        print_warning("server time may be off by ${clock_skew}. This can cause Dovecot to die during upcp");
    }
}

sub check_for_zlib_h {
    if ( -f '/usr/local/include/zlib.h' ) {
        print_warn('/usr/local/include/zlib.h: ');
        print_warning('This file can cause EA to fail with libxml issues. You may need to mv it, run EA again');
    }
}

sub check_for_better_linux {
    return if ( ! $#extended_rpm_list );

    foreach my $rpm_ref ( grep { $_->{'name'} =~ m/^kernel/ } @extended_rpm_list ) {
        if ( $rpm_ref->{'release'} =~ m/\.bl/ ) {
            print_warn("BetterLinux detected:\n");
            print_magenta("\t \\_ Branding problems? Possible CloakFS involvement. See FB 64368, ticket 4582511");
            print_magenta("\t \\_ ImageMagick segfaulting? See tickets 4185629, 4087003");
            last;
        }
    }
}

sub check_for_duplicate_rpms {
    return if ( ! $#extended_rpm_list );

    my %SEEN_RPMS;
    my %DUP_RPMS;
    foreach my $rpm_ref (@extended_rpm_list) {
        push @{ $SEEN_RPMS{ $rpm_ref->{'name'} . '-' . $rpm_ref->{'arch'} } }, $rpm_ref->{'version'} . '-' . $rpm_ref->{'release'};
        if ( scalar @{ $SEEN_RPMS{ $rpm_ref->{'name'} . '-' . $rpm_ref->{'arch'} } } > 1 ) {
            $DUP_RPMS{ $rpm_ref->{'name'} . '-' . $rpm_ref->{'arch'} } = 1;
        }

    }

    foreach my $dup_rpm ( sort keys %DUP_RPMS ) {
        next if ( $dup_rpm =~ m{^(?:gpg-pubkey|kernel)} );

        print_warn('DUPLICATE RPM: ');
        print_warning( "$dup_rpm has multiple versions: " . join( " ", @{ $SEEN_RPMS{$dup_rpm} } ) );

    }
}

sub check_for_percona_rpms {
    return if !@rpm_list;

    my $has_percona = 0;

    for my $rpm (@rpm_list) {
        if ( $rpm =~ /^Percona-/i ) {
            $has_percona = 1;
            last;
        }
    }

    if ( $has_percona == 1 ) {
        print_warn("Percona RPMs found:\n");
        print_magenta("\t \\_ EA failing with \"Cannot find libmysqlclient\"? libmysqlclient.so missing? see FB 93349");
        print_magenta("\t \\_ If Exim is segfaulting after STARTTLS, this may be why. See ticket 3658929");
    }
}

sub check_if_httpdconf_ipaddrs_exist {
    my $httpdconf = '/usr/local/apache/conf/httpd.conf';
    my @vhost_ipaddrs;
    my @unbound_ipaddrs;

    return if !-f $httpdconf;

    if ( open my $httpdconf_fh, '<', $httpdconf ) {
        local $/ = undef;
        my $httpdconf_txt = readline($httpdconf_fh);
        close $httpdconf_fh;
        while ( $httpdconf_txt =~ m/<VirtualHost\s+(\d+\.\d+\.\d+\.\d+):(?:\d+)>/sig ) {
            push @vhost_ipaddrs, $1;
        }
    }

    # uniq IP addrs only
    @vhost_ipaddrs = do {
        my %seen;
        grep { !$seen{$_}++ } @vhost_ipaddrs;
    };

    for my $vhost_ipaddr (@vhost_ipaddrs) {
        my $is_bound = 0;
        for my $local_ipaddr (@local_ipaddrs_list) {
            if ( $vhost_ipaddr eq $local_ipaddr ) {
                $is_bound = 1;
                last;
            }
        }
        if ( $is_bound == 0 ) {
            push @unbound_ipaddrs, $vhost_ipaddr;
        }
    }

    if (@unbound_ipaddrs) {
        print_warn('Apache: ');
        print_warning('httpd.conf has VirtualHosts for these IP addrs, which aren\'t bound to the server:');

        for my $unbound_ipaddr (@unbound_ipaddrs) {
            print_magenta("\t \\_ $unbound_ipaddr");
        }
    }
}

sub check_distcache_and_libapr {
    my $last_success_profile           = '/var/cpanel/easy/apache/profile/_last_success.yaml';
    my $has_distcache                  = 0;
    my $httpd_not_linked_to_system_apr = 0;

    if ( open my $profile_fh, '<', $last_success_profile ) {
        while (<$profile_fh>) {
            if (/Distcache:/) {
                $has_distcache = 1;
                last;
            }
        }
        close $profile_fh;
    }

    if ( $has_distcache == 1 ) {
        my @ldd = split /\n/, timed_run( 0, 'ldd', '/usr/local/apache/bin/httpd' );
        for my $line (@ldd) {
            if ( $line =~ m{ libapr(?:.*) \s+ => \s+ (\S+) }xms ) {
                if ( $1 !~ m{ \A /usr/local/apache/lib/libapr }xms ) {
                    $httpd_not_linked_to_system_apr = 1;
                    last;
                }
            }
        }
    }

    if ( $httpd_not_linked_to_system_apr == 1 ) {
        print_warn('Apache: ');
        print_warning('httpd linked to system APR, not APR in /usr/local/apache/lib/ (see 62676)');
    }
}

sub check_for_custom_postgres_repo {
    my $yum_repos_dir = '/etc/yum.repos.d/';
    my @dir_contents;
    my $has_postgres_repo = 0;

    return if !-d $yum_repos_dir;

    opendir( my $dir_fh, $yum_repos_dir );
    @dir_contents = grep { !/^\.\.?$/ } readdir $dir_fh;
    closedir $dir_fh;

    for my $repos (@dir_contents) {
        if ( $repos =~ m{ \A pgdg-(\d+)-centos\.repo }xms ) {
            $has_postgres_repo = 1;
            last;
        }
    }

    if ( $has_postgres_repo == 1 ) {
        print_warn('PostgreSQL: ');
        print_warning('custom Postgres repo (pgdg-*) found in /etc/yum.repos.d/ . See tickets 3690445, 3568781');
    }
}

sub check_for_rpm_overrides {
    my $rpm_override_dir = '/var/cpanel/rpm.versions.d/';
    my $local_versions   = '/var/cpanel/rpm.versions.d/local.versions';
    my $easy_versions    = '/var/cpanel/rpm.versions.d/easy.versions';
    my $md5_local;
    my $md5_easy;
    my $local_is_default = 0;
    my $easy_is_default = 0;

    return if !-d $rpm_override_dir;

    if ( -f $local_versions ) {
        $md5_local = timed_run( 0, 'md5sum', $local_versions );
    }

    if ( -f $easy_versions ) {
        $md5_easy = timed_run( 0, 'md5sum', $easy_versions );
    }

    ## these are checksums for default files. we ignore them to prevent needless output from SSP
    if ( $md5_local && $md5_local =~ m{ \A (
                                 fab8a718f7e3a1ff9c9d04fb4e8c94c4
                               | fd3f270edda79575343e910369b75ab7
                               | 57baebe121bcd5ab9752dd63f60ecd81
                               | 1d9f5d246ef2c9ab29f33cf00a3af9a5
                               | a89257469792a846e8db72edd6d29919
                               | c79a35d2f9633bce58f66b0f1549f4d3
                               | 352969216e1673edfa8d4ecf189043dc
                                ) \s }xms ) {
        $local_is_default = 1;
    }

    if ( $md5_easy && $md5_easy =~ m{ \A (
                                  d56abe76c47853eceb706f0855e642a7
                                | 89d631ef7c1d43475c20d7be7b7290ff
                                | 600ff436e5939656a5645c6139cc0228
                                ) \s }xms ) {
        $easy_is_default = 1;
    }

    opendir( my $dir_fh, $rpm_override_dir );
    my @dir_contents = grep { !/^\.\.?$/ } readdir $dir_fh;
    closedir $dir_fh;

    if ( $local_is_default == 1 ) {
        @dir_contents = grep { $_ ne 'local.versions' } @dir_contents;
    }

    if ( $easy_is_default == 1 ) {
        @dir_contents = grep { $_ ne 'easy.versions' } @dir_contents;
    }

    ## if the only items in rpm.versions.d/ were defaults that we can ignore, return
    if ( !@dir_contents ) {
        return;
    }

    if (@dir_contents) {
        print_warn('RPM override: ');
        print_warning("$rpm_override_dir contains entries, manually review. More info: http://go.cpanel.net/rpmversions");

        if ( -r $local_versions ) {
            eval { local $SIG{__DIE__}; local $SIG{__WARN__}; require YAML::Syck; };
            if ( !$@ ) {
                my $ref = YAML::Syck::LoadFile($local_versions);
                if ( $ref && $ref->{'target_settings'} ) {
                    foreach my $package ( keys %{ $ref->{'target_settings'} } ) {
                        if ( $ref->{'target_settings'}{$package} =~ m{uninstalled} ) {
                            unless ( $package eq 'easy-tomcat7' ) { # cPanel lists easy-tomcat7 as uninstalled by default
                                print_warn("$package is listed as uninstalled in $local_versions");
                                print_warning('');
                            }
                        }
                    }
                }
            }
        }
    }
}

sub check_for_odd_yum_conf {
    my $yum_conf = '/etc/yum.conf';

    return if !-f $yum_conf;

    my $exclude_line_count = 0;
    my $exclude_kernel     = 0;

    if ( open my $file_fh, '<', $yum_conf ) {
        while (<$file_fh>) {
            if (/^exclude/i) {
                $exclude_line_count += 1;
            }
            if (/exclude(.*)kernel/) {
                $exclude_kernel = 1;
            }
        }
        close $file_fh;
    }

    if ( $exclude_line_count > 1 ) {
        print_warn('yum.conf: ');
        print_warning('contains multiple "exclude" lines! See FB 63311');
    }

    if ( $exclude_kernel == 1 ) {
        print_warn('yum.conf: ');
        print_warning('may be excluding kernel updates! See FB 63311');
    }
}

sub check_var_cpanel_immutable_files {
    my $immutable_files = '/var/cpanel/immutable_files';

    if ( -e $immutable_files and !-z $immutable_files ) {
        print_warn('immutable files: ');
        print_warning("$immutable_files is not empty!");
    }
}

sub check_for_noxsave_in_grub_conf {
    my $grub_conf   = '/boot/grub/grub.conf';
    my $has_noxsave = 0;

    return if !-f $grub_conf;

    if ( open my $grub_fh, '<', $grub_conf ) {
        while (<$grub_fh>) {
            if (/noxsave/) {
                $has_noxsave = 1;
                last;
            }
        }
        close $grub_fh;
    }

    if ( $has_noxsave == 1 ) {
        print_warn('noxsave: ');
        print_warning("found in ${grub_conf}. kernel panics? segfaults? see ticket 3689211");
    }
}

sub check_for_rpm_dist_ver_unknown {
    my $sysinfo_config = '/var/cpanel/sysinfo.config';
    my $is_broken      = 0;

    return if !-f $sysinfo_config;

    if ( open my $file_fh, '<', $sysinfo_config ) {
        while (<$file_fh>) {
            if (/^rpm_dist_ver=unknown$/) {
                $is_broken = 1;
                last;
            }
        }
        close $file_fh;
    }

    if ( $is_broken == 1 ) {
        print_warn("${sysinfo_config}: ");
        print_warning("contains 'rpm_dist_ver=unknown'. Try running '/scripts/gensysinfo' to fix");
    }
}

sub check_for_homeloader_php_extension {
    return if ( $php5handler && $php5handler ne 'dso' );

    if ( grep { m# \A ([\s\t]+)? extension ([\s\t]+)? = ([\s\t]+)? ["']? homeloader\.so ['"]? #xms } @phpini ) {
        print_warn('/usr/local/lib/php.ini: ');
        print_warning("homeloader.so extension found. This can cause errors. See FB 4471 and 63838");
    }
}

sub check_for_networkmanager {
    my $networkmanager_running;

    for my $line (@process_list) {
        if ( $line =~ m{ \A root (?:.*) NetworkManager }xms ) {
            $networkmanager_running = 1;
            last;
        }
    }

    if ( $networkmanager_running && $networkmanager_running == 1 ) {
        print_warn('NetworkManager: ');
        print_warning('found in the process list - see "DisableNetworkManager" wiki article');
    }
}

sub check_for_dhclient {
    my $dhclient_running;

    for my $line (@process_list) {
        if ( $line =~ m{ \A root (?:.*) dhclient }xms ) {
            $dhclient_running = 1; 
            last;
        }    
    }    

    if ( $dhclient_running && $dhclient_running == 1 ) {
        print_warn('dhclient: ');
        print_warning('found in the process list');
    }    
}

sub check_for_var_cpanel_roundcube_install {
    my $install = '/var/cpanel/roundcube/install';

    if ( -f $install and -x $install ) {
        print_warn('RoundCube: ');
        print_warning("$install exists. /u/l/c/b/update-roundcube won't fully run (by design - see the docs)");
    }
}

sub check_for_missing_etc_localtime {
    if ( !-f '/etc/localtime' ) {
        print_warn('/etc/localtime: ');
        print_warning('Missing! upcp may fail with "Error testing if the RPMs will install" (see ticket 3811269)');
    }
}

sub check_for_PERL5LIB_env_var {
    my $PERL5LIB = $ENV{'PERL5LIB'};

    if ($PERL5LIB) {
        print_warn('PERL5LIB env var: ');
        print_warning('exists! This can break cPanel\'s perl. See FB 64265');
    }
}

sub check_for_disabled_services {
    my ( @disabled_services );
    my $disabled;

    my %touchfiles = (
        '/etc/ftpddisable'          => 'ftpd',
        '/etc/ftpserverdisable'     => 'ftpd',
        '/etc/sshddisable'          => 'sshd',
        '/etc/eximdisable'          => 'exim',
        '/etc/apachedisable'        => 'httpd',
        '/etc/httpdisable'          => 'httpd',
        '/etc/httpddisable'         => 'httpd',
        '/etc/httpdisevil'          => 'httpd',
        '/etc/imapdisable'          => 'imapd',
        '/etc/imapddisable'         => 'imapd',
        '/etc/nameddisable'         => 'named',
        '/etc/binddisable'          => 'named',
        '/etc/dnsdisable'           => 'named',
        '/etc/nsddisable'           => 'nsd',
        '/etc/mydnsdisable'         => 'mydns',
        '/etc/mysqldisable'         => 'mysql',
        '/etc/postgresdisable'      => 'postgresql',
        '/etc/postgresqldisable'    => 'postgresql',
        '/etc/postmasterdisable'    => 'postgresql',
        '/etc/clamddisable'         => 'clamd',
        '/etc/antirelayddisable'    => 'antirelayd',
        '/etc/tailwatchddisable'    => 'tailwatchd',
        '/var/cpanel/version/securetmp_disabled'    => 'securetmp',
        '/etc/queueprocddisable'    => 'queueprocd',
        '/etc/spamdisable'          => 'spamd',
        '/etc/mailmandisable'       => 'mailman',
        '/etc/ipaliasesdisable'     => 'ipaliases',
        '/etc/cpsrvdddisable'       => 'cpsrvd',
        '/etc/cpdavddisable'        => 'cpdavd',
        '/etc/cpanellogddisable'    => 'cpanellogd',
        '/etc/rsyslogdisable'       => 'rsyslogd',
        '/etc/syslogdisable'        => 'syslogd',
        '/etc/disablehackcheck'     => 'hackcheck',
        '/etc/rrdtooldisable'       => 'bandwidth stats',
        '/etc/tomcatdisable'        => 'tomcat',
        '/var/run/chkservd.suspend' => 'chksrvd',
    );

    while ( my ( $touchfile, $service ) = each ( %touchfiles ) ) {
        if ( -e $touchfile ) {
            if ( ! grep { /^${service}$/ } @disabled_services ) {
                push @disabled_services, $touchfiles{$touchfile};
            }
        }
    }

    return if !@disabled_services;

    for my $service ( @disabled_services ) {
        $disabled .= "[$service] ";
    }

    print_warn('Disabled services: ');
    print_warning($disabled);
}

sub check_for_license_info {
    return if !$external_ip_address;

    my $host = 'verify.cpanel.net';
    my $url  = '/index.cgi?ip=' . $external_ip_address;
    my $is_licensed_for_cloudlinux_through_cpanel = 0;
    my $is_one_time_license = 0;

    my $sock = IO::Socket::INET->new(
        PeerAddr    => $host,
        PeerPort    => 80,
        Proto       => 'tcp',
        Timeout     => 3,
    ) or return;

    local $SIG{'ALRM'} = sub { return (); };

    print $sock "GET $url HTTP/1.1\r\nHost: verify.cpanel.net\r\n\r\n";
    alarm 3;
    read $sock, my $buffer, 50_000;
    alarm 0;
    close $sock;

    if ( $buffer =~ /cloud_linux_os/ ) {
        $is_licensed_for_cloudlinux_through_cpanel = 1;
    }

    if ( $buffer =~ /ONE TIME FEE/ ) {
        $is_one_time_license = 1;
    }

    if ( $is_cloudlinux && $is_licensed_for_cloudlinux_through_cpanel == 0 ) {
        print_warn('CloudLinux: ');
        print_warning("installed, not licensed by cPanel [ http://verify.cpanel.net/index.cgi?ip=${external_ip_address} ]");
    }

    if ( $is_one_time_license ) {
        print_warn('License: ');
        print_warning("may be a one-time cPanel license [ http://verify.cpanel.net/index.cgi?ip=${external_ip_address} ]");
    }

}

# Yes, this actually happened...
sub check_for_cpbackup_exclude_everything {
    my $conf = '/etc/cpbackup-exclude.conf';
    return if ( !-f $conf );

    my $excluding_everything = 0;

    open my $conf_fh, '<', $conf or return;
    while ( <$conf_fh> ) {
        chomp;
        if ( /^\*$/ ) {
            $excluding_everything = 1;
            last;
        }
    }
    close $conf_fh;

    if ( $excluding_everything == 1 ) {
        print_warn('Backups: ');
        print_warning("'*' exists by itself in $conf . This can cause 0 byte backups");
    }
}

sub check_for_usr_local_include_jpeglib_h {
    my $jpeglib = '/usr/local/include/jpeglib.h';
    if ( -f $jpeglib ) {
        print_warn( "$jpeglib: " );
        print_warning( 'Seeing "Wrong JPEG library version"? This file may be the cause. See ticket 4159697' );
    }
}

sub check_for_bw_module_and_more_than_1024_vhosts {
    my $httpdconf = '/usr/local/apache/conf/httpd.conf';
    return if !-f $httpdconf;

    return if ( !grep { /^\sbw_module\s/ } @apache_modules_output );

    my $num_vhosts = 0;

    open my $httpdconf_fh, '<', $httpdconf or return;
    while ( <$httpdconf_fh> ) {
        if ( m{ \A (?:\s+)? <VirtualHost \s }xms ) {
            $num_vhosts++;
        }
    }
    close $httpdconf_fh;

    if ( $num_vhosts and $num_vhosts > 1024 ) {
        print_warn('bw_module: ');
        print_warning("loaded, and httpd.conf has >1024 VirtualHosts ($num_vhosts). Apache failing to start? See FB 69121");
    }
}

sub check_for_uppercase_chars_in_hostname {
    if ( $hostname =~ /[A-Z]/ ) {
        print_warn('Hostname: ');
        print_warning('contains UPPERCASE characters. Seeing incorrect info at cPanel >> Configure Email Client? See ticket 4231465');
    }
}

sub check_for_harmful_php_mode_600_cron {
    return if !-d '/etc/cron.daily';

    my @dir_contents;
    my $has_harmful_cron = 0;
    my $cron_file;

    opendir( my $dir_fh, '/etc/cron.daily' ) or return;
    @dir_contents = grep { !/^\.\.?$/ } readdir $dir_fh;
    closedir $dir_fh;

    for my $file ( @dir_contents ) {
        $file = '/etc/cron.daily/' . $file;
        open my $file_fh, '<', $file or next;
        while ( <$file_fh> ) {
            if ( /^mytmpfile=\/tmp\/php-mode-/ ) {
                $has_harmful_cron = 1;
                $cron_file = $file;
                last;
            }
        }
    }

    if ( $has_harmful_cron == 1 ) {
                print_warn('harmful cron: ');
        print_warning( "${cron_file}! Breaks webmail, phpMyAdmin, and more! See tickets 4225765, 4237465, 4099807, 4231469, 4231473. Vendor: http://whmscripts.net/misc/2013/apache-symlink-security-issue-fixpatch/" );
    }
}

sub check_for_stale_upgrade_in_progress_txt {
    my $upgradefile = '/usr/local/cpanel/upgrade_in_progress.txt';

    my $upcp_running = 0;
    for my $line (@process_list) {
        if ( $line =~ m{ \A root (?:.*) upcp }xms ) {
            $upcp_running = 1; 
            last;
        }    
    }    

    if ( -e $upgradefile && $upcp_running == 0 ) {
        print_warn("${upgradefile}: ");
        print_warning('exists, but upcp is not running. If Tweak Settings is not loading, this may be why');
    }   
}

sub check_for_bad_permissions_on_named_ca {
    my $namedca = '/var/named/named.ca';
    if ( !-e $namedca ) {   
        print_warn("${namedca}: ");
        print_warning('missing. named may not start without it');
        return;
    }

    my ( $mode, $uid, $gid ) = (stat('/var/named/named.ca'))[2,4,5];
    my $world_readable_bit = $mode & 007;
    my $user = getpwuid($uid);
    my $group = getgrgid($gid);

    if (($user ne 'named' and $group ne 'named') and ($world_readable_bit == 0)) {
        print_warn("${namedca}: ");
        print_warning('may not be readable to the \'named\' user, causing named to not restart');
    }
}

sub check_for_use_compiled_dnsadmin {
    return if ( exists $cpconf{'disable_compiled_dnsadmin'} and $cpconf{'disable_compiled_dnsadmin'} == 1 );

    my $has_custom_dnsadmin_modules;
    my ( @setup_modules, @remote_modules );
    my $setup_modules_dir = '/usr/local/cpanel/Cpanel/NameServer/Remote';
    my $remote_modules_dir = '/usr/local/cpanel/Cpanel/NameServer/Setup/Remote';

    # http://docs.cpanel.net/twiki/bin/view/SoftwareDevelopmentKit/WritingSetupModules
    if ( -d $setup_modules_dir ) {
        opendir( my $dir_fh, $setup_modules_dir );
        @setup_modules = grep { !/^\.\.?$/ } readdir $dir_fh;
        closedir $dir_fh;
    }

    # http://docs.cpanel.net/twiki/bin/view/SoftwareDevelopmentKit/WritingRemoteModules
    if ( -d $remote_modules_dir ) {
        opendir( my $dir_fh, $remote_modules_dir );
        @remote_modules = grep { !/^\.\.?$/ } readdir $dir_fh;
        closedir $dir_fh;
    }

    @setup_modules = grep { !/^(cPanel\.pm|SoftLayer\.pm|VPSNET\.pm)/ } @setup_modules;
    @remote_modules = grep { !/^(cPanel\.pm|SoftLayer\.pm|VPSNET\.pm)/ } @remote_modules;

    # return if there are no custom dnsadmin modules being used
    return if ( scalar @setup_modules == 0 and scalar @remote_modules == 0 );

    print_warn('dnsadmin: ');
    print_warning('Tweak Settings >> Use compiled dnsadmin: On. If problems with custom dnsadmin modules, see if disabling helps (see ticket 4279965)');
}

sub check_for_mysql_root_pass_with_single_quote {
    my $mycnf = '/root/.my.cnf';
    return if !-f $mycnf;

    my $has_single_quote = 0;

    open my $mycnf_fh, '<', $mycnf or return;
    while ( <$mycnf_fh> ) {
        chomp;
        if ( /^(?:[\s\t]?)+pass(?:[^"']+)?=(?:[\s\t]?)+(?:["']?)(.*)(?:["']+)$/ ) {
            if ( $1 =~ /'/ ) {
                $has_single_quote = 1;
                last;
            }
        }
    }
    close $mycnf_fh;

    if ( $has_single_quote && $has_single_quote == 1 ) {
        print_warn('mysql root user: ');
        print_warning('pass has single quote. This breaks mysql_upgrade! mysql.proc issues? See FB 73533');
    }
}

sub check_for_jailshell_additional_mounts_trailing_slash {
    my $mounts_file = '/var/cpanel/jailshell-additional-mounts';
    return if ( !-f $mounts_file );

    my $has_slash = 0;

    if ( open my $file_fh, '<', $mounts_file ) {
        while ( <$file_fh> ) {
            chomp;
            if ( m#/(?:[\s\t]+)?\z# ) {
                $has_slash = 1;
                last;
            }
        }
        close $file_fh;
    }
    else {
        return;
    }

    if ( $has_slash == 1 ) {
        print_warn("$mounts_file: ");
        print_warning( 'contains trailing slashes! Server may become unstable. See FB 71613');
    }
}

sub check_for_allow_query_localhost {
    my $named_conf = '/etc/named.conf';
    return if !-f $named_conf;

    my $allow_query_localhost = 0;

    my $namedconf_contents;
    if ( open my $named_conf_fh, '<', $named_conf ) { 
        local $/; 
        $namedconf_contents = <$named_conf_fh>;
        close $named_conf_fh;
    }   
    else {
        return;
    }   

    if ( $namedconf_contents =~ m#allow-query ([\s\t\r\n]+)? { ([\s\t]+)? ( localhost | 127\. )#xms ) { 
        $allow_query_localhost = 1;
    }

    if ( $allow_query_localhost == 1 ) {
        print_warn('named.conf: ');
        print_warning('allow-query is restricted to localhost. Remote DNS queries may not work');
    }    
}

sub check_for_nocloudlinux_touchfile {
    if ( -e '/var/cpanel/nocloudlinux' ) {
        print_warn('/var/cpanel/nocloudlinux: ');
        print_warning('exists! CloudLinux cannot be installed when this file is present.');
    }
}

sub check_for_phphandler_and_opcode_caching_incompatibility {
    return if ( $php5handler && $php5handler ne 'suphp' );

    my $message;

    if ( grep { m# \A ([\s\t]+)? extension ([\s\t]+)? = ([\s\t]+)? ["']? eaccelerator\.so ['"]? #xms } @phpini ) {
        $message .= '[eAccelerator] ';
    }
    if ( grep { m# \A ([\s\t]+)? extension ([\s\t]+)? = ([\s\t]+)? ["']? xcache\.so ['"]? #xms } @phpini ) {
        $message .= '[XCache] ';
    }
    if ( grep { m# \A ([\s\t]+)? extension ([\s\t]+)? = ([\s\t]+)? ["']? apc\.so ['"]? #xms } @phpini ) {
        $message .= '[APC] ';
    }

    if ($message) {
        print_warn('PHP: ');
        print_warning("suPHP enabled, but the following installed opcode cachers are not suPHP compatible: $message");
    }
}

sub check_for_invalid_HOMEDIR {
    my $wwwacctconf = '/etc/wwwacct.conf';

    return if !-f $wwwacctconf;

    my $homedir;

    if ( open my $file_fh, '<', $wwwacctconf ) {
        while ( <$file_fh> ) {
            if ( /\AHOMEDIR[\s\t]+([^\s]+)/ ) {
                $homedir = $1;
                last;
            }
        }
        close $file_fh;
    }

    if (!$homedir) {
        print_warn("$wwwacctconf: ");
        print_warning('HOMEDIR value not found!');
    }
    else {
        if (!-d $homedir) {
            print_warn("$wwwacctconf: ");
            print_warning("the directory that is specified as the HOMEDIR does not exist! ($homedir)");
        }
    }
}

sub check_for_unsupported_options_in_phpini { # case 75397
    return if !$php5version;

    my ( undef, $php5minor ) = split /\./, $php5version;
    return if (! $php5minor || $php5minor <= 3);

    my $unsupported_options;

    ## http://www.php.net/manual/en/migration54.ini.php
    ## apparently "safe_mode = off" won't trigger 75397, but "safe_mode = on" will.
    ## some items like "y2k_compliance = On" don't appear to trigger the issue
    if ( grep { m# \A (?:[\s\t]+)? register_globals (?:[\s\t]+)? = (?:[\s\t]+)? ["']? on ['"]? #ixms } @phpini ) {
        $unsupported_options .= "[register_globals] ";
    }

    if ( grep { m# \A (?:[\s\t]+)? safe_mode (?:[\s\t]+)? = (?:[\s\t]+)? ["']? on ['"]? #ixms } @phpini ) {
        $unsupported_options .= "[safe_mode] ";
    }    

    if ( $unsupported_options ) {
        $unsupported_options =~ s/\s$//g;
        print_warn('/usr/local/lib/php.ini: ');
        print_warning("PHP $php5version does not support $unsupported_options, but found enabled in php.ini. See FB 75397");
    }    
}

sub check_for_suphp_but_no_fileprotect {
    if ( $php5handler and $php5handler eq 'suphp' ) {
        if ( !-e '/var/cpanel/fileprotect' ) {
            print_warn('suPHP: ');
            print_warning("enabled, but /var/cpanel/fileprotect not found. New users' public_htmls will be user:user");
        }
    }
}

sub check_for_assp_hates_appconfig_cron {
    return if !-f '/var/spool/cron/root';

    my $has_bad_assp_cron = 0;

    open my $cron_fh, '<', '/var/spool/cron/root';
    while (<$cron_fh> ) {
        if ( m{ /usr/local/cpanel/3rdparty/bin/php-cgi \s /usr/local/assp/deluxe/ex_localdomains.php }xms ) {
            $has_bad_assp_cron = 1;
            last;
        }
    }
    close $cron_fh;

    if ( $has_bad_assp_cron == 1 ) {
        print_warn('ASSP: ');
        print_warning('this software uses a cron job which breaks cPanel\'s AppConfig. See 4394109, 4392691. Complain to vendor (grscripts.com)');
    }
}

sub check_for_missing_var_cpanel_dynamicui_ftp {
    if ( !-e '/etc/ftpddisable' and !-e '/etc/ftpserverdisable' and !-e '/var/cpanel/dynamicui/ftp' ) {
        print_warn('FTP: ');
        print_warning('touchfile /v/c/dynamicui/ftp appears to be missing. FTP options may not appear in cPanel. See FB 83193');
    }
}

sub check_if_backup_dir_is_nfs {
    my $old_backups_dir;
    my $new_backups_dir;
    my $cpbackup_conf;
    my $config;
    my $old_backups_dir_nfs = 0;
    my $new_backups_dir_nfs = 0;

    if ( -e '/etc/cpbackup.conf' ) {
        open my $file_fh, '<', '/etc/cpbackup.conf';
        while (<$file_fh>) {
            local $/;
            $cpbackup_conf = <$file_fh>;
        }
        close $file_fh;
    }

    if ( -e '/var/cpanel/backups/config' ) {
        open my $file_fh, '<', '/var/cpanel/backups/config';
        while (<$file_fh>) {
            local $/;
            $config = <$file_fh>;
        }
        close $file_fh;
    }

    if ( $cpbackup_conf and $cpbackup_conf =~ /BACKUPENABLE yes/ and $cpbackup_conf =~ /BACKUPDIR (.*)/ ) {
        $old_backups_dir = $1;
    }

    if ( $config and $config =~ /BACKUPENABLE: 'yes'/ and $config =~ /BACKUPDIR: (.*)/ ) {
        $new_backups_dir = $1;
    }

    my @mount;

    open my $mount_fh, '-|', '/bin/mount' or return;
    while (<$mount_fh>) {
        chomp;
        push @mount, $_; 
    }
    close $mount_fh;
    
    for my $mount (@mount) {
        if ($old_backups_dir) {
            if ( $mount =~ /$old_backups_dir type nfs / ) {
                $old_backups_dir_nfs = 1;
            }
        }
        if ($new_backups_dir) {
            if ( $mount =~ /$new_backups_dir type nfs / ) {
                $new_backups_dir_nfs = 1;
            }
        }
    }

    if ( $old_backups_dir_nfs == 1 ) {
        print_warn('Backups: ');
        print_warning("$old_backups_dir is NFS (used by old backup system)");
    }
    if ( $new_backups_dir_nfs == 1 ) {
        print_warn('Backup: ');
        print_warning("$new_backups_dir is NFS (used by new backup system)");
    }
}

sub check_if_hostname_missing_from_localdomains {
    my $hostname_check = 0;

    open my $localdomains_fh, '<', '/etc/localdomains';
    while (<$localdomains_fh>) {
        if ( /^${hostname}$/ ) {
            $hostname_check = 1;
            last;
        }
    }
    close $localdomains_fh;

    if ( $hostname_check == 0 ) {
        print_warn('Hostname: ');
        print_warning('not found in /etc/localdomains. This can cause "lowest numbered MX record points to local host"');
    }
}

sub check_for_eximstats_newline {
    my $eximstatspass = '/var/cpanel/eximstatspass';
    my $has_newline   = 0; 

    if ( !-e $eximstatspass ) {
        print_warn("$eximstatspass: ");
        print_warning('missing!');
    }    
    else {
        if ( open my $eximstatspass_fh, '<', $eximstatspass ) {
            while (<$eximstatspass_fh>) {
                if (/\n/) {
                    $has_newline = 1; 
                    last;
                }    
            }    
            close $eximstatspass_fh;
        }    
    }    

    if ( $has_newline == 1 ) {
        print_warn("$eximstatspass: ");
        print_warning('contains a newline. Breaks Mail Delivery Reports / eximstats');
    }    
    
}

sub check_for_nfs {
    my $has_nfs = 0;

    open my $mount_fh, '-|', '/bin/mount' or return;
    while (<$mount_fh>) {
        if ( m{ type[ \t] nfs [ \t] }xms ) {
            $has_nfs = 1;
            last;
        }
    }
    close $mount_fh;

    if ( $has_nfs == 1 ) {
        print_warn('NFS: ');
        print_warning('filesystem(s) with NFS detected. This can cause cPanel to load slowly (see ticket 4380977, FB 79549)');
    }    
}

sub check_for_processes_killed_by_lfd {
    my $log  = '/var/log/lfd.log';
    return if !-e $log;

    my $size = (stat($log))[7];
    return if !$size;

    my $bytes_to_check = 20_971_520 / 2; # 10M
    my $seek_position  = 0;
    my $log_data;
    my @logs;
    my $count = 0;
    my @killed_by_lfd;

    if ( $size > $bytes_to_check ) {
        $seek_position = ( $size - $bytes_to_check );
    }

    open my $file_fh, '<', $log or return;
    seek $file_fh, $seek_position, 0;
    read $file_fh, $log_data, $bytes_to_check;
    close $file_fh;

    if ( $log_data =~ /\sKill:1\s/ ) {
        @logs = split /\n/, $log_data;
        undef $log_data;
        @logs = reverse @logs;

        for my $line (@logs) { 
            if ( $line =~ /(\S+\s\d+\s\S+)\s(?:\S+)\s(?:\S+) \*User Processing\* PID:(?:\d+) Kill:1 User:(\S+) VM:(\d+)\(MB\) EXE:(\S+) CMD:(\S+)/ ) {
                push @killed_by_lfd, "[$1] [user: $2] [file: $4] [cmd: $5] [Used ${3}MB mem]\n";
                $count++;
            }
            elsif ( $line =~ /(\S+\s\d+\s\S+)\s(?:\S+)\s(?:\S+) \*User Processing\* PID:(?:\d+) Kill:1 User:(\S+) Time:(\d+) EXE:(\S+) CMD:(\S+)/ ) {
                push @killed_by_lfd, "[$1] [user: $2] [file: $4] [cmd: $5] [Ran for ${3} seconds]\n";
                $count++;
            }

            last if $count >= 10;
        }
    }

    if (@killed_by_lfd) {
        chomp @killed_by_lfd;
        print_warn("Last 10 processes killed by 3rd party software \"LFD\" (\"grep Kill:1 /var/log/lfd.log\"):\n");
        for my $killed_process (@killed_by_lfd) {
            print_magenta("\t \\_ $killed_process");
        }
    }
}

sub check_for_processes_killed_by_prm {
    my $log  = '/usr/local/prm/log_prm';
    return if !-e $log;

    my $size = (stat($log))[7];
    return if !$size;

    my $bytes_to_check = 10485760; # 10M
    my $seek_position  = 0;
    my $log_data;
    my @logs;
    my $count = 0;
    my @killed_by_prm;

    if ( $size > $bytes_to_check ) {
        $seek_position = ( $size - $bytes_to_check );
    }

    open my $file_fh, '<', $log or return;
    seek $file_fh, $seek_position, 0;
    read $file_fh, $log_data, $bytes_to_check;
    close $file_fh;

    if ( $log_data =~ /\sKILLED\s/ ) {
        @logs = split /\n/, $log_data;
        undef $log_data;
        @logs = reverse @logs;

        for my $line (@logs) { 
            if ( $line =~ /(\S+\s\d+\s\S+)\s(?:\S+)\s(?:\S+) proc pid:(?:\d+) \{user:(\S+) cmd:(\S+)\}.+(MAX_.+) KILLED/ ) {
                push @killed_by_prm, "[$1] [user: $2] [cmd: $3] [$4]\n";
                $count++;
            }

            last if $count >= 10;
        }
    }

    if (@killed_by_prm) {
        chomp @killed_by_prm;
        print_warn("Last 10 processes killed by 3rd party software \"PRM\" (\"grep KILLED /usr/local/prm/log_prm\"):\n");
        for my $killed_process (@killed_by_prm) {
            print_magenta("\t \\_ $killed_process");
        }
    }
}

sub check_for_broken_userdatadomains {
    return if !-f '/etc/userdatadomains';

    my $is_broken = 0;

    open my $userdatadomains_fh, '<', '/etc/userdatadomains' or return;
    while (<$userdatadomains_fh>) {
        if (/^:/) {
            $is_broken = 1;
            last;
        }
    }
    close $userdatadomains_fh;

    if ($is_broken == 1) {
        print_warn('/etc/userdatadomains: ');
        print_warning('contains a line that begins with ":". Check the following for accuracy (see 4416539 for examples):');
        print_magenta("\t \\_ /etc/userdatadomains");
        print_magenta("\t \\_ /var/cpanel/users/USER (check the ^DNS= lines)");
        print_magenta("\t \\_ /var/cpanel/userdata/USER/main (check for things like '')");
        print_magenta("\t \\_ /var/cpanel/userdata/USER/DOMAIN (check serveralias line)");
        print_magenta("\t \\_ /var/cpanel/userdata/USER/cache (userdatadomains uses this)");
        print_magenta("\t \\_ /usr/local/apache/conf/httpd.conf (may need rebuilding after fixing userdata)");
    }
}

sub check_ssl_db_perms {
    my $ssldb = '/var/cpanel/ssl/installed/ssl.db';
    return if !-e $ssldb;

    my ( $uid, $gid ) = (stat($ssldb))[4,5];
    if ( $uid != 0 or $gid != 0 ) {
        print_warn("$ssldb: ");
        print_warning('not owned by the root user and/or group. This can prevent pkgacct from completing. See ticket 4422237');
    }
}

sub check_for_nat_plus_mod_evasive {
    my $cpnat = '/var/cpanel/cpnat';
    return if !-e $cpnat;
    return if (stat($cpnat))[7] == 0;

    my $has_mod_evasive = 0;

    for my $module (@apache_modules_output) {
        if ( $module =~ /evasive20_module/ ) { # Apache 1.x = evasive_module :: Apache 2.x = evasive20_module
            $has_mod_evasive = 1;
            last;
        }
    }

    if ( $has_mod_evasive == 1 ) {
        print_warn('mod_evasive: ');
        print_warning('this 3rd party Apache module is loaded, and the server is using NAT. May cause random 403s. See ticket 4416847');
    }
}

sub check_for_stray_index_php {
    my $indexphp = '/usr/local/cpanel/base/index.php';
    if ( -e $indexphp ) {
        print_warn("$indexphp: ");
        print_warning("exists! Errors when logging into cPanel? See ticket 4421775");
    }
}


sub check_for_missing_cpanelconfig_items {
    for my $checkvar ( qw( ftpserver mailserver mysql-version ) ) {
        if ( not exists $cpconf{$checkvar} or $cpconf{$checkvar} =~ /^(?:[ \t]+|$)/ ) {
            print_warn('/var/cpanel/cpanel.config: ');
            print_warning('empty or missing "' . $checkvar . '" setting');
        }
    }
}

sub check_for_port_80_not_apache {
    my ( $filename, $pid, $cmdline );
    my $unknown_httpd = 0;

    return if !@lsof_80;
    return if scalar @lsof_80 < 2;

    for my $line (@lsof_80) {
        if ( $line =~ m{ \A (\S+) \s+ (\d+) (?:.*) \(LISTEN\) }xms ) {
            ( $filename, $pid ) = ( $1, $2 );
            last;
        }
    }

    return if !$filename or !$pid;

    my $exe = readlink "/proc/${pid}/exe" or return;
    my $cwd = readlink "/proc/${pid}/cwd" or return;

    if ( $exe ne '/usr/local/apache/bin/httpd' ) {
        $unknown_httpd = 1;
        open my $file_fh, '<', "/proc/${pid}/cmdline" or return;
        $cmdline = readline $file_fh;
        close $file_fh;

        return if !$cmdline;
        $cmdline =~ s/\0/ /g;
        $cmdline =~ s/(\s+)$//g;
    }

    return if !$unknown_httpd;

    my $ipcs = timed_run( 0, 'ipcs', '-m' );

    print_warn('Port 80: ');

    print_warning("something other than Apache is running:");
    print_magenta("\t \\_ file [$filename]");
    print_magenta("\t \\_ exe  [$exe]");
    print_magenta("\t \\_ cmd  [$cmdline]");
    print_magenta("\t \\_ cwd  [$cwd]");

    if ( $ipcs =~ /nobody/ ) {
        print_magenta($ipcs);
    }
}

sub check_for_missing_groups {
    my @groups = qw(
            cpanel
            cpaneleximfilter
            cpaneleximscanner
            cpanelhorde
            cpanellogaholic
            cpanellogin
            cpanelphpmyadmin
            cpanelphppgadmin
            cpanelroundcube
            cpses
            mail
            mailman
            mailnull
            mailtrap
            mysql
            named
            nobody
            root
            sshd
            wheel
);

    my $missing_groups;

    for my $group (@groups) {
        next if ( $group eq 'cpses' and cpanel_version_is(qw( < 11.40.0.0 )) ); # was cpses added in 11.40?
        my $gid = getgrnam($group);
        next if ( defined $gid and $gid =~ /^\d+$/ );
        $missing_groups .= "[$group] ";
    }

    if ($missing_groups) {
        print_warn('Missing groups: ');
        print_warning($missing_groups);
    }
}

sub check_for_cgihidepass {
    return if cpanel_version_is(qw( >= 11.42.1.1 )); # Fixed in 11.42.1.1
    if ( exists $cpconf{'cgihidepass'} and $cpconf{'cgihidepass'} == 1 ) {
        print_warn('cgihidepass: ');
        print_warning('Tweak Settings >> "Hide login password from cgi scripts" is enabled. Expired passwords can\'t be changed via WHM. See FB 87581');
    }
}

sub check_for_noquotafs {
    my $noquotafs = '/var/cpanel/noquotafs';
    return if !-f $noquotafs or -z $noquotafs;

    print_warn("$noquotafs: ");
    print_warning('exists. quota issues? See http://docs.cpanel.net/twiki/bin/view/AllDocumentation/WHMDocs/QuotaFSConfig');
}

sub check_for_mod_rpaf {
    if ( grep { /rpaf_module/ } @apache_modules_output ) {
        print_warn('mod_rpaf: ');
        print_warning('loaded. May prevent .htaccess from denying access. See 4422297');
    }
}

sub check_for_mod_spdy {
    if ( grep { /spdy_module/ } @apache_modules_output ) {
        print_warn('mod_spdy: ');
        print_warning('loaded. May break proxy subdomains. See 4973361');
    }
}

sub check_for_roundcube_overlay {
    my $rcdir = '/var/cpanel/roundcube';
    return if !-d $rcdir;

    opendir( my $dh, $rcdir );
    my @contents = grep { !/^\.\.?$/ } readdir $dh;
    close $dh;

    if ( grep { /^overlay/ } @contents ) {
        print_warn('Roundcube overlay: ');
        print_warning("found an overlay file in $rcdir . Login issues? See ticket 4542785.");
    }
}

sub check_for_hostname_park_zoneexists {
    if ( -f "/var/named/${hostname}.db" and ( not exists $cpconf{'allowparkonothers'} or $cpconf{'allowparkonothers'} != 1 )) {
        print_warn('Parking: ');
        print_warning('since zone of hostname exists, "Allow domain parking across accounts" must be ON to park on the hostname');
    }
}

sub check_for_pgpass_colon_in_password_field {
    my $pgpass = '/root/.pgpass';
    return if !-f $pgpass;

    my $has_colon = 0;

    if ( open my $fh, '<', $pgpass ) {
        while (<$fh>) {
            if ( /^\*:\*:\*:postgres:(.*)/ ) {
                if ( $1 =~ /:/ ) {
                    $has_colon = 1;
                    last;
                }
            }
        }
        close $fh;
    }

    if ( $has_colon == 1 ) {
        print_warn("$pgpass: ");
        print_warning('password field contains a colon. Seeing Postgres auth issues? See FB 89093' );
    }
}

sub check_for_dirs_that_break_ea {
    my @dirs = qw(
        /usr/local/cpanel/cgi-sys/php5
        /var/cpanel/conf/apache/wrappers/php5
    );

    for my $dir (@dirs) {
        if ( -d $dir ) {
            print_warn("$dir: ");
            print_warning('is a directory! This can cause EA issues. See ticket 4537779.');
        }
    }
}

sub check_for_extra_uid_0_user {
    my $uid_0_users = 0;

    open my $file_fh, '<', '/etc/passwd' or die $!;
    while (<$file_fh>) {
        if (m{ \A ([^:]+) :x:0: }xms) {
            next if $1 =~ m{ \A root \z }xms;
            $uid_0_users = 1;
            last;
        }
    }
    close $file_fh;

    if ( $uid_0_users == 1 ) {
        print_warn("non-root uid 0 user(s): \n");
        print_magenta("\t \\_ This can cause a variety of issues. See FB 92065 and the tickets listed there for some examples.");
        print_magenta("\t \\_ EasyApache failing with \"can't create [...] all_iplist.db\"? See FB 62467. Do *not* escalate as security issue.");
    }
}

sub check_for_easyparams_attributes {
    my $easyparams = '/scripts/easyparams';
    return if !-e $easyparams;

    my $attributes = timed_run( 0, 'lsattr', $easyparams );
    if ( $attributes =~ m/^-[-]*(?:a|i)/ ) {
        print_warn("$easyparams: ");
        print_warning('is immutable or append only. This should never be done, and can break EasyApache!');
    }
}

sub check_for_stale_backup_pidfile {
    my @pidfiles = qw(
        /var/cpanel/backuprunning
        /var/cpanel/new_backuprunning
    );

    my $found_pid = 0;
    my $found_process = 0;

    for my $pidfile (@pidfiles) {
        my $pid;

        if ( -e $pidfile ) {
            open my $fh, '<', $pidfile or return;
            chomp( $pid = readline $fh );
            close $fh;

            for my $process (@process_list) {
                if ( $process =~ / \A [^ ]+ \s+ $pid \s+ (.*) /xms ) {
                    $found_pid = 1;
                    if (( $pidfile eq '/var/cpanel/backuprunning' ) && ( $process =~ m# (/usr/local/cpanel)?/scripts/cpbackup(\s|$)# )) {
                        $found_process = 1;
                        last;
                    }
                    if (( $pidfile eq '/var/cpanel/new_backuprunning' ) && ( $process =~ m# /usr/local/cpanel/bin/backup(\s|$)# )) {
                        $found_process = 1;
                        last;
                    }
                }
            }

            if ( $found_pid == 0 ) {
                print_warn('Backups: ');
                print_warning("$pidfile exists, but pid $pid not found in process list");
            }
            elsif ( $found_pid == 1 and $found_process == 0 ) {
                print_warn('Backups: ');
                print_warning("pid $pid from $pidfile does not match a valid backup process");
            }
        }
    }
}

sub check_for_allow_update_in_named_conf {
    my $namedconf = '/etc/named.conf';
    return if !-e $namedconf;

    my $has_allow_update = 0;

    if ( open my $fh, '<', $namedconf ) {
        while (<$fh>) {
            if ( /allow-update/i ) {
                $has_allow_update = 1;
                last;
            }
        }
        close $fh;
    }

    if ($has_allow_update == 1) {
        print_warn('named.conf: ');
        print_warning('allow-update found. This can possibly prevent rndc from reloading. See ticket 4717591');
    }
}

sub check_for_mailman_low_uid {
    my $wwwacctconf = '/etc/wwwacct.conf';
    return if !-e $wwwacctconf;
    my $minuid;

    if ( open my $fh, '<', $wwwacctconf ) {
        while (<$fh>) {
            if ( /^MINUID\s(\d+)$/ ) {
                $minuid = $1;
                last;
            }
        }
        close $fh;
    }
    else {
        return;
    }

    return if !$minuid;

    my $mailman_uid = getpwnam('mailman');
    if ( defined $mailman_uid and $mailman_uid < $minuid ) {
        print_warn('Mailman: ');
        print_warning('user mailman has uid lower than MINUID from wwwacct.conf. Is mailman rpm installed? See ticket 4717977');
    }
}

sub check_for_missing_skiphttpauth {
    return if defined $cpconf{'skiphttpauth'};

    print_warn('skiphttpauth: ');
    print_warning('not found in cpanel.config. HTTP auth will be enabled by default. See FB 95681');
}

sub check_for_MPM_ITK_and_suexec {
    my $has_itk = 0;
    my $suexec_disabled = 0;

    my @httpd_V = split /\n/, timed_run( 0, '/usr/local/apache/bin/httpd', '-V' );

    for my $line (@httpd_V) {
        if ( $line =~ /^Server MPM:\s+(.*)/ ) {
            if ( $1 eq 'ITK' ) {
                $has_itk = 1;
                last;
            }
        }
    }

    return if !$has_itk;
    return if !-f '/usr/local/apache/conf/php.conf';

    open my $fh, '<', '/usr/local/apache/conf/php.conf' or return;
    while (<$fh>) {
        if ( /^LoadModule disable_suexec_module modules\/mod_disable_suexec.so$/ ) {
            $suexec_disabled = 1;
            last;
        }
    }
    close $fh;

    return if $suexec_disabled;

    print_warn('MPM ITK: ');
    print_warning('enabled, but suexec is also enabled. This can break redirects like /cpanel. See FB 83405.');
}

sub check_for_modruid2_warnings {
    for (@apache_modules_output) {
        if (/ruid2_module/) {
            if ( exists $cpconf{'jailapache'} and $cpconf{'jailapache'} == 1 ) {
                print_warn('mod_ruid2: ');
                print_warning('is enabled with Jail Apache Virtual Hosts tweak, this might break Mailman, see cases 84393, 104017, and tickets 5015613, 5227891');
            }
            if ( $php5handler && $php5handler eq 'suphp' ) {
                print_warn('mod_ruid2: ');
                print_warning('is enabled with Jail Apache Virtual Hosts tweak and suPHP handler, these are NOT COMPATIBLE, see cases 70561, 105901');
            }
            if ( $lsws_full_version ) {
                print_warn('mod_ruid2: ');
                print_warning('could cause file permission problems when using LiteSpeed Web Server (see ticket 5154193)');
            }
            last;
        }
    }
}

sub check_for_openssl_heartbleed_bug {
    return if ! $openssl_rpm_changelog;
    my $sysinfo_config = '/var/cpanel/sysinfo.config';
    return if !-f $sysinfo_config;

    my $rpm_dist_ver;

    open my $fh, '<', $sysinfo_config or return;
    while (<$fh>) {
        if ( /^rpm_dist_ver=(\d+)$/ ) {
            $rpm_dist_ver = $1;
            last;
        }
    }
    close $fh or return;

    return if !$rpm_dist_ver;
    return if ( $rpm_dist_ver <= 5 ); # RHEL/CentOS 5 not vuln: http://cpanel.net/heartbleed-vulnerability-information/

    chomp( my $openssl_ver = timed_run( 0, 'openssl', 'version' ) );
    return if !$openssl_ver;

    # only 1.0.1[a-f] is vuln (and 1.0.2-beta which no one should be using)
    if ( $openssl_ver =~ /^OpenSSL (\d+)\.(\d+)\.(\d+)[a-f]/ ) {
        my ( $maj, $min, $patch ) = ( $1, $2, $3 );
        return if $maj != 1;
        return if $min != 0;
        return if $patch != 1;
    }
    else {
        return;
    }

    return if $openssl_rpm_changelog =~ m{ \sCVE-2014-0160\s }xms;

    print_critical();
    print_crit('Heartbleed: ');
    print_critical('Send customer this premade: OpenSSL Heartbleed Vulnerability - Discovery');
    print_critical('The following check was used: rpm -q --changelog openssl | grep \' CVE-2014-0160 \'');
    print_critical('!! VERIFY THE CHECK USING THE COMMAND ABOVE BEFORE SENDING THE PREMADE !!');
    print_critical('This check does NOT take corrupt rpm dbs into account, and CAN false positive if corrupt');
    print_critical();
}

sub check_for_openssl_secadv_20140605 {
    return if ! $openssl_rpm_changelog;
    my $sysinfo_config = '/var/cpanel/sysinfo.config';
    return if !-f $sysinfo_config;

    my $rpm_dist_ver;

    open my $fh, '<', $sysinfo_config or return;
    while (<$fh>) {
        if ( /^rpm_dist_ver=(\d+)$/ ) {
            $rpm_dist_ver = $1;
            last;
        }
    }
    close $fh or return;

    return if !$rpm_dist_ver;
    return if ( $rpm_dist_ver < 5 || $rpm_dist_ver > 6 ); # Only RHEL/CentOS 5 and 6 need apply

    chomp( my $openssl_ver = timed_run( 0, 'openssl', 'version' ) );
    return if !$openssl_ver;

    # fixed in openssl 1.0.1h, 1.0.0m, and 0.9.8za
    if ( $openssl_ver =~ /^OpenSSL (\d+)\.(\d+)\.(\d+)([a-z])([a-z]?)/ ) {
        my ( $maj, $min, $patch ) = ( $1, $2, $3 );
        # If we map the alphas into a number and sum the values the version will be compatible with version_compare() and save us a lot of trouble, i.e. h=8, m=13, and za=27
        my %al2num = map { ("a".."z")[$_-1] => $_ } (1..26); # Isn't there a better way to do this?
        my $sub = 0;
        if ( $4 ) { $sub += $al2num{lc($4)} };
        if ( $5 ) { $sub += $al2num{lc($5)} };
        my $ver = join('.', $maj, $min, $patch, $sub);
        return if version_compare($ver, qw( >= 1.0.1.8 )); # If > 1.0.1h we're done.
        return if ( version_compare($ver, qw( < 1.0.1.0 )) && version_compare($ver, qw( >= 1.0.0.13 )) ); # If < 1.0.1 and >= 1.0.0m we're done.
        return if ( version_compare($ver, qw( < 0.9.9.0 )) && version_compare($ver, qw( >= 0.9.8.27 )) ); # If < 0.9.9 and >= 0.9.8za we're done.
    }

    return if ( $openssl_rpm_changelog =~ m{ \sCVE-2014-0224\s }xms );

    print_critical();
    print_crit('OpenSSL RPM missing secadv_20140605 patches: ');
    print_critical('CVE-2014-0224');
    print_critical('Send customer this premade: "OpenSSL advisory 2014-06-05 - Discovery"');
    print_critical('!! BEFORE SENDING PREMADE VERIFY THE MISSING CVE PATCHES WITH: rpm -q --changelog openssl | egrep \' CVE-201(0|4)-\'');
    print_critical('This check does NOT take corrupt rpm dbs into account, and CAN false positive if corrupt');
    print_critical();
}

sub check_for_broken_mysqldump {
    my $md = '/usr/bin/mysqldump';

    if ( !-f $md ) {
        print_warn("$md: ");
        print_warning('not found!');
        return;
    }

    my $pid = IPC::Open3::open3( '</dev/null', '>/dev/null', my $stderr, $md, );
    waitpid( $pid, 0 );
    my $exit_status = $? >> 8;

    # when running mysqldump with no args, the exit status is 1. anything other than 1 should indicate unexpected behavior.
    #
    # $ mysqldump
    # [...]
    # $ echo $?
    # 1
    #
    # tested via MySQL55-client
    if ( $exit_status && $exit_status != 1 ) {
        print_warn("$md: ");
        print_warning('may be broken (exit status != 1). This can cause eximstats and other issues. See FB 98477');
    }
}

sub check_exim_log_sanity {
    my @logs = qw( /var/log/exim_mainlog /var/log/exim_paniclog /var/log/exim_rejectlog );

    for my $log (@logs) {
        if ( !-f $log ) {
            print_warn("$log: ");
            print_warning('is missing!');
        }
        else {
            my $uid = (stat($log))[4];
            my $user = getpwuid($uid);
            if ( $user ne 'mailnull' ) {
                print_warn("$log: ");
                print_warning('is not owned by "mailnull"');
            }
        }
    }
}

sub check_for_readonly_filesystems {
    open my $fh, '<', '/proc/mounts' or return;
    my @read_only_fs = ();
    while (<$fh>) {
        if ( my @fs = split(' ') ) {
            next if grep(m{ / (virtfs|cagefs-skeleton) / }x,$fs[1]);
            if ( grep(m{ (^|,) ro (,|$) }x, $fs[3]) ) {
                push(@read_only_fs, $fs[1]);
            }
        }
    }
    if ( scalar @read_only_fs ) {
        print_warn('Read-only filesystems: ');
        print_warning(join(" ", @read_only_fs));
    }
    close($fh);
}

sub check_for_unsupported_php {
    return if ! $phpversion;
    return if $phpversion >= 6;
    my $min_php5 = '5.3.0'; 
   if ( $phpversion == 4 ) {
        return if ! $php4version;
    }
    if ( $phpversion == 5 ) {
        return if ! $php5version;
        return if version_compare( $php5version, '>=', $min_php5 );
    }
    print_critical();
    print_crit('!! RUNNING A VERSION OF PHP THAT IS NO LONGER SUPPORTED BY EASYAPACHE !! ');
    print_critical();
    print_critical('Do not run EasyApache without confirmation that this will replace PHP with a supported PHP version!');
    if ( $php4version ) {
        print_critical( 'PHP4: ' . $php4version );
    }
    if ( $php5version && version_compare( $php5version, '<', $min_php5 ) ) {
        print_critical( 'PHP5: ' . $php5version );
    }
    print_critical();
};

sub check_for_UMBREON_rootkit {
    my $dir = '/usr/local/__UMBREON__';
    if ( chdir $dir ) {
        print_critical();
        print_crit('!! [ UMBREON ROOTKIT ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical('The following directory was found:');
        print_critical("\t" . $dir);
        print_critical("\tL3: use 07 - UMBREON Predef [L3 Only]");
        print_critical();
    }
}

sub check_for_jynx2_rootkit {
    my $dir = '/usr/bin64';
    if ( chdir $dir ) {
        my @found_jynx2_files = ();
        my @jynx2_files = qw( 3.so 4.so );
        for (@jynx2_files) {
            my $file = $dir . "/" . $_;
            if ( -e $file ) {
                push(@found_jynx2_files, $file);
            }
        }
        return if ( (scalar @found_jynx2_files) == 0 );
        print_critical();
        print_crit('!! [ Jynx 2 ROOTKIT ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical('The following files were found:');
        print_critical("\t" . join(" ", @found_jynx2_files));
        print_critical("\tL3: use 07 - Jynx2 Predef [L3 Only]");
        print_critical();
    }
}

sub check_for_bg_botnet {
    my @found_bg_files = ();
    # Not including the following /tmp files in the list because any non-root user can create them and trigger a false-positive just for the lolz.
    # /tmp/bill.lock
    # /tmp/gates.lock
    # /tmp/moni.lock
    # /tmp/notify.file
    # /bin/ps, /bin/netstat, and /usr/sbin/lsof have also been found to be modified
    my @bg_files = qw(
        /boot/pro
        /boot/proh
        /etc/sfewfesfsh
        /usr/bin/pojie
        /etc/atdd
        /etc/atddd
        /etc/cupsdd
        /etc/cupsddd
        /etc/dsfrefr
        /etc/ferwfrre
        /etc/gfhddsfew
        /etc/gfhjrtfyhuf
        /etc/ksapd
        /etc/ksapdd
        /etc/kysapd
        /etc/kysapdd
        /etc/rewgtf3er4t
        /etc/sdmfdsfhjfe
        /etc/sfewfesfs
        /etc/sksapd
        /etc/sksapdd
        /etc/skysapd
        /etc/skysapdd
        /etc/xfsdx
        /etc/xfsdxd
        /root/aa
        /usr/bin/.sshd
        /usr/bin/bsd-port/getty
        /usr/lib/libamplify.so
        /etc/rc.d/init.d/DbSecuritySpt
        /etc/rc.d/init.d/selinux
    );
    for my $file (@bg_files) {
        if ( -e $file ) {
            push(@found_bg_files, $file);
        }
    }
    return unless ( scalar @found_bg_files );
    print_critical();
    print_crit('!! [ BG BOTNET ] !! ');
    print_critical('L1/L2 escalate this ticket to L3');
    print_critical('The following files were found:');
    print_critical("\t" . join(" ", @found_bg_files));
    print_critical("\tL3: use 07 - BG Botnet Predef [L3 Only]");
    print_critical();
}

##############################
#  END [WARN] CHECKS
##############################

##############################
#  BEGIN [3RDP] CHECKS
##############################

sub check_smtp_processes {
    my $assp_running = 0;

    return if scalar keys(%port) == 0;
    if ( ! defined($port{"25"}) && ! -f '/etc/eximdisable' ) {
        print_warn('Exim: ');
        print_warning('not disabled and does not appear to be up -- nothing listening on port 25');
    }

    return if ! defined($port{"25"});

    for my $href ( @{$port{"25"}} ) {
        my $pid = $href->{PID};
        my $cmd = $process{$pid}{CMD};
        if ( $href->{PROTO} eq "TCP" && ! ($cmd =~ m{ \A /usr/sbin/exim \b }xms) ) {
            print_3rdp('SMTP: ');
            print_3rdp2('a process other than exim is listening on port 25 [' . $href->{IPV} . ' ' . $href->{IP} . '] [USER: ' . $href->{USER} . '] [CMD: ' . $cmd . '] [PID: ' . $pid . ']');
        }
        if ( $cmd =~ m{ /assp\.pl \b }xms ) {
            $assp_running = $pid;
        }
    }

    if ( $assp_running ) {
        print_3rdp('ASSP: ');
        print_3rdp2('assp.pl is listening on port 25 [PID: ' . $assp_running . '] Vendor: http://assp.sourceforge.net');
    }
}

sub check_for_varnish {
    my @port_80_processes;

    return if !@lsof_80;

     for my $line (@lsof_80) {
        if ( $line =~ m{ (\S+) \s+ (?:.*) \s TCP (?:.*):http \s \(LISTEN\) }xms ) {
            push( @port_80_processes, $1 );
        }
    }

    if ( grep { m{ \A varnish }xms } @port_80_processes ) {
        print_3rdp('Varnish: ');
        print_3rdp2('varnish is listening on port 80, known to break proxy subdomains. See "RareIssues" wiki article');
    }
}

sub check_for_nginx {
    my $nginx = 0;

    for my $line (@process_list) {
        if ( $line =~ m{ \A (root|nobody) (?:.*) nginx(:?) }xms ) {
            $nginx = 1;
            last;
        }
    }

    if ( $nginx == 1 ) {
        print_3rdp('nginx: ');
        print_3rdp2('is running');
    }
}

sub check_for_mailscanner {
    my $mailscanner = 0;

    for my $line (@process_list) {
        if ( $line =~ m{ \A mailnull (?:.*) MailScanner }xms ) {
            $mailscanner = 1;
            last;
        }
    }

    if ( $mailscanner == 1 ) {
        print_3rdp('MailScanner: ');
        print_3rdp2('is running');
    }
}

sub check_for_apf {
    my $chkconfig_apf = timed_run( 0, 'chkconfig', '--list', 'apf' );
    if ($chkconfig_apf) {
        if ( $chkconfig_apf =~ /3:on/ ) {
            print_3rdp('APF: ');
            print_3rdp2('installed, may be enabled.');
        }
    }
}

sub check_for_csf {
    my $lfd = 0;
    my $csf = timed_run( 0, 'whereis', 'csf' );

    if ( $csf =~ /\// ) {
        print_3rdp('CSF: ');
    }
    else {
        return;
    }

    for my $line (@process_list) {
        if ( $line =~ m{ \A root (?:.*) lfd }xms ) {
            $lfd = 1;
            last;
        }
    }

    if ($lfd) {
        print_3rdp2('installed, LFD is running');
    }
    else {
        print_3rdp2('installed, LFD is not running');
    }
}

sub check_for_prm {
    if ( -e '/usr/local/prm' ) {
        print_3rdp('PRM: ');
        print_3rdp2('PRM exists at /usr/local/prm');
    }
}

sub check_for_les {
    if ( -e '/usr/local/sbin/les' ) {
        print_3rdp('LES: ');
        print_3rdp2('Linux Environment Security is installed at /usr/local/sbin/les');
    }
}

sub check_for_1h {
    my $one_h = 0;
    my ( $hive_module, $guardian );

    if ( -d '/usr/local/1h' ) {
        $one_h = 1;
        if (@apache_modules_output) {
            for my $line (@apache_modules_output) {
                if ( $line =~ /hive_module / ) {
                    $hive_module = 'loaded';
                    last;
                }
                else {
                    $hive_module = 'not active';
                }
            }
        }
        else {
            $hive_module = 'status unknown';
        }

        if ( -x '/usr/local/1h/sbin/guardian' ) {
            for my $line (@process_list) {
                if ( $line =~ /Guardian/ ) {
                    $guardian = 'running';
                }
                else {
                    $guardian = 'not running';
                }
            }
        }
        else {
            $guardian = 'not running';
        }
    }

    if ( $one_h == 1 ) {
        print_3rdp('1H Software: ');
        print_3rdp2("/usr/local/1h exists. hive apache module: [ $hive_module ] Guardian process: [ $guardian ]");
    }
}

sub check_for_webmin {
    my @lsof_10000 = split /\n/, timed_run( 0, 'lsof', '-n', '-i', 'tcp:10000' );

    if (@lsof_10000) {
        print_3rdp('Webmin: ');
        print_3rdp2('Port 10000 is listening, webmin may be running');
    }
}

sub check_for_symantec {
    my $symantec = 0;

    for my $process (@process_list) {
        if ( $process =~ m{ \A root (?:.*) /opt/Symantec/symantec_antivirus }xms ) {
            $symantec = 1;
            last;
        }
    }

    if ( $symantec == 1 ) {
        print_3rdp('Symantec: ');
        print_3rdp2('found /opt/Symantec/symantec_antivirus in process list');
    }
}

sub check_for_haproxy {
    my $haproxy = 0;

    for my $process (@process_list) {
        if ( $process =~ m{ \A haproxy (?:.*) haproxy }xms ) {
            $haproxy = 1;
            last;
        }
    }

    if ( $haproxy == 1 ) {
        print_3rdp('HAProxy: ');
        print_3rdp2('found haproxy in process list');
    }
}

sub check_for_newrelic {
    my $has_newrelic = 0;

    for my $process (@process_list) {
        if ( $process =~ /newrelic-daemon/ ) {
            $has_newrelic = 1;
            last;
        }
    }

    if ( $has_newrelic == 1 ) {
        print_3rdp('newrelic-daemon: ');
        print_3rdp2('found in process list. Caused server stability issues in 4396009');
    }
            
}

sub check_for_zamfoo {
    my $has_zamfoo = 0;

    if ( -f '/scripts/prekillacct' ) {
        open my $file_fh, '<', '/scripts/prekillacct' or return;
        while (<$file_fh>) {
            if ( /zamfoo/i ) {
                $has_zamfoo = 1;
                last;
            }
        }
        close $file_fh;
    }

    if ($has_zamfoo == 1) {
        print_3rdp('Zamfoo: ');
        print_3rdp2('is installed. Multi-level reseller setups are not supported!');
    }
}

sub check_for_whmreseller {
    if ( -d '/usr/local/cpanel/whostmgr/docroot/cgi/whmreseller' ) {
        print_3rdp('WHMReseller: ');
        print_3rdp2('is installed. Multi-level reseller setups are not supported!');
    }
}

sub check_for_whmphp {
    if ( -d '/usr/local/cpanel/whostmgr/docroot/cgi/whmphp' ) {
        print_3rdp('WHMPHP: ');
        print_3rdp2('is installed. Multi-level reseller setups are not supported!');
    }
}

sub check_for_cpremote {
    return if !-e '/var/spool/cron/root';

    my $has_cpremote = 0;

    open my $file_fh, '<', '/var/spool/cron/root' or return;
    while (<$file_fh>) {
        if ( m#/scripts/cpremotebackup# ) {
            $has_cpremote = 1;
            last;
        }
    }
    close $file_fh;

    if ( $has_cpremote == 1 ) {
        print_3rdp('cpremote: ');
        print_3rdp2('installed. third party backup software (cron job found for root)');
    }
}

sub check_for_els {
    my $els = '/usr/local/els/els.sh';
    return if !-e $els;

    print_3rdp('ELS: ');
    print_3rdp2("$els found. See http://www.servermonkeys.com/els.php");
}

sub check_for_whmxtra {
    my $ionsh = '/usr/local/cpanel/whostmgr/docroot/themes/x/xtra/functions/ion.sh';
    return if !-f $ionsh;

    print_3rdp('WHMXtra: ');
    print_3rdp2("$ionsh exists. 'cPanel PHP loader' Tweak Settings or php.ini settings reverted? See 4622167, 4628203");
}

sub check_for_usr_local_mis {
    my $dir = '/usr/local/mis';
    return if !-d $dir;

    print_3rdp("$dir: ");
    print_3rdp2('found! This can prevent EA from completing. See ticket 4822059');
}

##############################
#  END [3RDP] CHECKS
##############################

sub build_libkeyutils_file_list {
    my @dirs = qw( /lib /lib64 );
    my @libkeyutils_files;

    for my $dir (@dirs) {
        next if !-e $dir;
        opendir( my $dir_fh, $dir );
        while ( my $file = readdir($dir_fh)) {
            if ( $file =~ /^libkeyutils\.so\.(?:[\.\d]+)?$/ ) {
                if ( $dir eq '/lib' ) {
                    push @libkeyutils_files, "/lib/$file\n";
                }    
                elsif ( $dir eq '/lib64' ) {
                    push @libkeyutils_files, "/lib64/$file\n";
                }    
            }    
        }    
        closedir $dir_fh;
    }

    return @libkeyutils_files;
}

## BEGIN malware checks

sub check_for_cdorked_A {
    my $apache_bin = '/usr/local/apache/bin/httpd';
    my $max_bin_size = 10_485_760; # avoid slurping too much mem
    return if ( !-f $apache_bin );
    return if ((stat($apache_bin))[7] > $max_bin_size ); 

    my $has_cdorked = 0;
    my $signature; 
    my @apache_bins = ();
    push @apache_bins, $apache_bin;


    for my $process (@process_list) {
        if ( $process =~ m{ \A root \s+ (\d+) [^\d]+ $apache_bin }xms ) {
            my $pid = $1;
            my $proc_pid_exe = "/proc/" . $pid . "/exe";
            if ( -l $proc_pid_exe && readlink($proc_pid_exe) =~ m{ \(deleted\) }xms ) {
                next if ((stat($proc_pid_exe))[7] > $max_bin_size );
                push @apache_bins, $proc_pid_exe;
            }
        }
    }

    for my $check_bin (@apache_bins) {
        my $httpd;
        if ( open my $fh, '<', $check_bin ) {
            local $/;
            $httpd = <$fh>;
            close $fh; 
        }    

        next if !$httpd;

        if ( $httpd =~ /(open_tty|hangout|ptsname|Qkkbal)/ ) {
            $signature = $check_bin . ": \"" . $1 . "\"";
            $has_cdorked = 1; 
            last;
        }    
    }

    if ( $has_cdorked == 1 ) {
        print_critical();
        print_crit('!! [ Linux/Cdorked ] !! ');
        print_critical('L1/L2 escalate this ticket to L3. L3 use 00 - Cdorked premade');
        print_critical("\tString found in $signature (see ticket 4482347)");
        print_critical();
    }    
}

sub check_for_cdorked_B {
    my $has_cdorked_b = 0;
    my @files = ( '/usr/sbin/arpd ', '/usr/sbin/tunelp ', '/usr/bin/s2p ' );
    my $cdorked_files;

    for my $file (@files) {
        if ( -e $file ) {
            $has_cdorked_b = 1;
            $cdorked_files .= "[$file] ";
        }
    }

    if ( $has_cdorked_b == 1 ) {
        print_critical();
        print_crit('!! [ Linux/Cdorked ] !! ');
        print_critical('L1/L2: escalate this ticket to L3. L3 use 00 - eBury / CDorked - Free Migration [L3 only]');
        print_critical("\tThe following files were found (note the spaces at the end of the files):");
        print_critical("\t$cdorked_files");
        print_critical();
    }
}

sub check_for_libkeyutils_filenames {
    my $bad_libs;
    my @dirs  = qw( /lib /lib64 );
    my @files = qw(
                    libkeyutils.so.1.9
                    libkeyutils-1.2.so.0
                    libkeyutils-1.2.so.2
                    libkeyutils.so.1.3.0
                    libkeyutils.so.1.3.2
                );

    for my $dir (@dirs) {
        next if !-e $dir;
        for my $file (@files) {
            if ( -f "${dir}/${file}" and !-z "${dir}/${file}" ) {
                $bad_libs .= "\t${dir}/${file}\n";
            }
        }
    }

    if ($bad_libs) {
        print_critical();
        print_crit('!! [ LIBKEYUTILS ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical('The following file(s) were found:');
        print_critical($bad_libs);
        print_critical();
    }
}

sub check_sha1_sigs_libkeyutils {
    my $libs = shift;
    return if !$libs;

    my $trojaned_lib;

    # p67 http://www.welivesecurity.com/wp-content/uploads/2014/03/operation_windigo.pdf
    my @checksums = qw(
        09c8af3be4327c83d4a7124a678bbc81e12a1de4
        1a9aff1c382a3b139b33eeccae954c2d65b64b90
        267d010201c9ff53f8dc3fb0a48145dc49f9de1e
        2e571993e30742ee04500fbe4a40ee1b14fa64d7
        2fc132440bafdbc72f4d4e8dcb2563cc0a6e096b
        39ec9e03edb25f1c316822605fe4df7a7b1ad94a
        3c5ec2ab2c34ab57cba69bb2dee70c980f26b1bf
        471ee431030332dd636b8af24a428556ee72df37
        58f185c3fe9ce0fb7cac9e433fb881effad31421
        5d3ec6c11c6b5e241df1cc19aa16d50652d6fac0
        74aa801c89d07fa5a9692f8b41cb8dd07e77e407
        7adb38bf14e6bf0d5b24fa3f3c9abed78c061ad1
        899b860ef9d23095edb6b941866ea841d64d1b26
        8daad0a043237c5e3c760133754528b97efad459
        8f75993437c7983ac35759fe9c5245295d411d35
        9bb6a2157c6a3df16c8d2ad107f957153cba4236
        9e2af0910676ec2d92a1cad1ab89029bc036f599
        a7b8d06e2c0124e6a0f9021c911b36166a8b62c5
        adfcd3e591330b8d84ab2ab1f7814d36e7b7e89f
        b8508fc2090ddee19a19659ea794f60f0c2c23ff
        bbce62fb1fc8bbed9b40cfb998822c266b95d148
        bf1466936e3bd882b47210c12bf06cb63f7624c0
        d552cbadee27423772a37c59cb830703b757f35e
        e14da493d70ea4dd43e772117a61f9dbcff2c41c
        e2a204636bda486c43d7929880eba6cb8e9de068
        f1ada064941f77929c49c8d773cbad9c15eba322
    );

    for my $lib (@$libs) {
        next unless my $checksum = timed_run( 0, 'sha1sum', "$lib" );
        chomp $checksum;
        $checksum =~ s/\s.*//g;
        if ( grep { /$checksum/ } @checksums ) {
            $trojaned_lib = "$lib\n\tSHA-1 checksum: $checksum";
            last;
        }
    }

    if ( $trojaned_lib ) {
        print_critical();
        print_crit('!! [ LIBKEYUTILS ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical('The following file(s) were found:');
        print_critical("\t" . $trojaned_lib);
        print_critical("\tReference: http://www.welivesecurity.com/2014/02/21/an-in-depth-analysis-of-linuxebury/");
        print_critical();
    }
}

sub check_for_unowned_libkeyutils_files {
    my $libs = shift;
    return if !$libs;

    my @unowned_libs;

    for my $lib (@$libs) {
        chomp( my $rpm_check = timed_run( 0, 'rpm', '-qf', "$lib" ));
        if ( $rpm_check =~ /owned/ ) {
            push @unowned_libs, $lib;
        }
    }

    return if !@unowned_libs;

    print_critical();
    print_crit('!! [ EBURY ] !! ');
    print_critical('L1/L2 escalate this ticket to L3');
    print_critical("\tThe following libkeyutils files do not belong to a package (checked via 'rpm -qf'):");
    for my $file (@unowned_libs) {
        print_critical("\t" . $file);
    }
    print_critical();
}

sub check_sha1_sigs_httpd {
    my $httpd = '/usr/local/apache/bin/httpd';
    return if !-e $httpd;
    my $infected = 0;
    return unless my $sha1sum = timed_run( 0, 'sha1sum', $httpd );
    if ( $sha1sum =~ m{ \A (\S+) \s }xms ) {
        $sha1sum = $1;
    }

    my @sigs = qw(
        0004b44d110ad9bc48864da3aea9d80edfceed3f
        03592b8147e2c84233da47f6e957acd192b3796a
        0eb1108a9d2c9fe1af4f031c84e30dcb43610302
        10c6ce8ee3e5a7cb5eccf3dffd8f580e4fb49089
        149cf77d2c6db226e172390a9b80bc949149e1dc
        1972616a731c9e8a3dbda8ece1072bd16c44aa35
        24e3ebc0c5a28ba433dfa69c169a8dd90e05c429
        4f40bb464526964ba49ed3a3b2b2b74491ea89a4
        5b87807b4a1796cfb1843df03b3dca7b17995d20
        62c4b65e0c4f52c744b498b555c20f0e76363147
        78c63e9111a6701a8308ad7db193c6abb17c65c4
        858c612fe020fd5089a05a3ec24a6577cbeaf7eb
        9018377c0190392cc95631170efb7d688c4fd393
        a51b1835abee79959e1f8e9293a9dcd8d8e18977
        a53a30f8cdf116de1b41224763c243dae16417e4
        ac96adbe1b4e73c95c28d87fa46dcf55d4f8eea2
        dd7846b3ec2e88083cae353c02c559e79124a745
        ddb9a74cd91217cfcf8d4ecb77ae2ae11b707cd7
        ee679661829405d4a57dbea7f39efeb526681a7f
        fc39009542c62a93d472c32891b3811a4900628a
        fdf91a8c0ff72c9d02467881b7f3c44a8a3c707a
    );

    for my $sig (@sigs) {
        if ( $sha1sum eq $sig ) {
            $infected = 1;
            last;
        }
    }

    if ( $infected == 1 ) {
        print_critical();
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical("\t" . $httpd . " has a SHA-1 signature of " . $sha1sum);
        print_critical("\tReference: p67-68 from http://www.welivesecurity.com/wp-content/uploads/2014/03/operation_windigo.pdf");
        print_critical();
    }
}

sub check_sha1_sigs_named {
    my $named = '/usr/sbin/named';
    return if !-e $named;
    my $infected = 0;
    return unless my $sha1sum = timed_run( 0, 'sha1sum', $named );
    if ( $sha1sum =~ m{ \A (\S+) \s }xms ) {
        $sha1sum = $1;
    }    

    my @sigs = qw(
        42123cbf9d51fb3dea312290920b57bd5646cefb
        ebc45dd1723178f50b6d6f1abfb0b5a728c01968
    );

    for my $sig (@sigs) {
        if ( $sha1sum eq $sig ) {
            $infected = 1;
            last;
        }
    }
    
    if ( $infected == 1 ) {
        print_critical();
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical("\t" . $named . " has a SHA-1 signature of " . $sha1sum);
        print_critical("\tReference: p67-68 from http://www.welivesecurity.com/wp-content/uploads/2014/03/operation_windigo.pdf");
    }    
}

sub check_sha1_sigs_ssh {
    my $ssh = '/usr/bin/ssh';
    return if !-e $ssh;
    my $infected = 0; 
    return unless my $sha1sum = timed_run( 0, 'sha1sum', $ssh );
    if ( $sha1sum =~ m{ \A (\S+) \s }xms ) {
        $sha1sum = $1;
    }    

    my @sigs = qw(
        c4c28d0372aee7001c44a1659097c948df91985d
        fa6707c7ef12ce9b0f7152ca300ebb2bc026ce0b
    );

    for my $sig (@sigs) {
        if ( $sha1sum eq $sig ) {
            $infected = 1; 
            last;
        }    
    }    

    if ( $infected == 1 ) {
        print_critical();
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical("\t" . $ssh . " has a SHA-1 signature of " . $sha1sum);
        print_critical("\tReference: p67-68 from http://www.welivesecurity.com/wp-content/uploads/2014/03/operation_windigo.pdf");
        print_critical();
    }    
}

sub check_sha1_sigs_ssh_add {
    my $ssh_add = '/usr/bin/ssh-add';
    return if !-e $ssh_add;
    my $infected = 0; 
    return unless my $sha1sum = timed_run( 0, 'sha1sum', $ssh_add );
    if ( $sha1sum =~ m{ \A (\S+) \s }xms ) {
        $sha1sum = $1;
    }    

    my @sigs = qw(
        575bb6e681b5f1e1b774fee0fa5c4fe538308814
    );

    for my $sig (@sigs) {
        if ( $sha1sum eq $sig ) {
            $infected = 1; 
            last;
        }    
    }    

    if ( $infected == 1 ) {
        print "\n\n";
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print "\t$ssh_add has a SHA-1 signature of $sha1sum\n";
        print "\tReference: p67-68 from http://www.welivesecurity.com/wp-content/uploads/2014/03/operation_windigo.pdf\n";
    }    
}

sub check_sha1_sigs_sshd {
    my $sshd = '/usr/sbin/sshd';
    return if !-e $sshd;
    my $infected = 0; 
    return unless my $sha1sum = timed_run( 0, 'sha1sum', $sshd );
    if ( $sha1sum =~ m{ \A (\S+) \s }xms ) {
        $sha1sum = $1;
    }    

    my @sigs = qw(
        0daa51519797cefedd52864be0da7fa1a93ca30b
        4d12f98fd49e58e0635c6adce292cc56a31da2a2
        7314eadbdf18da424c4d8510afcc9fe5fcb56b39
        98cdbf1e0d202f5948552cebaa9f0315b7a3731d
    );

    for my $sig (@sigs) {
        if ( $sha1sum eq $sig ) {
            $infected = 1; 
            last;
        }    
    }    

    if ( $infected == 1 ) {
        print_critical();
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical("\t" . $sshd . " has a SHA-1 signature of " . $sha1sum);
        print_critical("\tReference: p67-68 from http://www.welivesecurity.com/wp-content/uploads/2014/03/operation_windigo.pdf");
        print_critical();
    }    
}

sub check_for_ebury_ssh_G {
    my $ssh = '/usr/bin/ssh';
    return if !-e $ssh;
    return if !-f $ssh;
    return if !-x $ssh;
    return if -z $ssh;

    my $ssh_G = timed_run_trap_stderr( 0, $ssh, '-G' );
    if ( $ssh_G !~ /illegal|unknown/ ) {
        print_critical();
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical("\t'" . $ssh . " -G' did not return either 'illegal' or 'unknown'");
        print_critical("\tReference: http://www.welivesecurity.com/2014/02/21/an-in-depth-analysis-of-linuxebury/");
        print_critical();
    }
}

sub check_for_ebury_ssh_banner {
    my ( $host, $port, $ssh_banner );
    my $ssh_connection = $ENV{'SSH_CONNECTION'};
    return if !$ssh_connection;

    if ( $ssh_connection =~ m{ \s (\d+\.\d+\.\d+\.\d+) \s (\d+) \z }xms ) {
        ( $host, $port ) = ( $1, $2 );
    }

    return if !$host;
    return if !$port;

    my $sock = IO::Socket::INET->new(
        PeerAddr    => $host,
        PeerPort    => $port,
        Proto       => 'tcp',
        Timeout     => 5,
    ) or return;

    $ssh_banner = readline $sock;
    close $sock;
    return if !$ssh_banner;
    chomp $ssh_banner;

    if ( $ssh_banner =~ m{ \A SSH-2\.0-[0-9a-f]{22,46} }xms ) {
        print_critical();
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical("\tsshd banner matches known signature from ebury infected machines: " . $ssh_banner);
        print_critical("\tReference: http://www.welivesecurity.com/2014/02/21/an-in-depth-analysis-of-linuxebury/");
        print_critical();
    }
}

sub check_for_ebury_root_file {
    my $file = '/home/ ./root';

    if ( -e $file ) {
        print_critical();
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical("\tFound file: " . $file);
        print_critical("\tReference: p24 from http://www.welivesecurity.com/wp-content/uploads/2014/03/operation_windigo.pdf");
        print_critical();
    }
}

sub check_for_ebury_3_digit_rpms {
    #### check for the existence if illegitimate rpms, like these:
    #
    #  openssh-4.3p2-721.el5_61.65
    #  openssh-5.3p1-209.el6_10.41.x86_64
    #
    #  openssh-clients-4.3p2-721.el5_61.65
    #  openssh-clients-5.3p1-209.el6_10.41.x86_64
    #
    #  openssh-server-4.3p2-721.el5_61.65
    #  openssh-server-5.3p1-209.el6_10.41.x86_64

    my $bad_rpms;

    for my $rpm (@rpm_list) {
        if ( $rpm =~ m{ \A openssh-(clients|server|\d)(.*)-(\d){3}\. }xms ) {
            $bad_rpms .= "\t$rpm\n";
        }
    }

    if ($bad_rpms) {
        print_critical();
        print_crit('!! [ EBURY ] !! ');
        print_critical('L1/L2 escalate this ticket to L3');
        print_critical("The following rpm(s) were found:");
        print_critical($bad_rpms);
        print_critical();
    }
}

## END malware checks

sub build_rpm_list {
    my $timeout = 15;

    print_info2("RPM check (running \"rpm -qa ...\"). This will timeout after $timeout seconds.");

    my $rpm_list = timed_run( $timeout, 'rpm', '-qa', '--queryformat', q{%{ARCH}\t%{NAME}\t%{VERSION}\t%{RELEASE}\n} );
    return if ! $rpm_list;

    @extended_rpm_list = map {
        my ( $arch, $name, $version, $release ) = split( /\t/, $_ );
        {
            'name'    => $name,
            'arch'    => $arch,
            'version' => $version,
            'release' => $release
        }
    } split( /\n/, $rpm_list );

    if ( $#extended_rpm_list > 1 ) {
        @rpm_list =  map { $_->{'name'} . '-' . $_->{'version'} . '-' . $_->{'release'} } @extended_rpm_list;
    }
}

sub get_openssl_rpm_changelog {
    my $timeout = 15;

    print_info2("RPM query OpenSSL changelog (running \"rpm -q ...\"). This will timeout after $timeout seconds.");

    my $changelog = timed_run( $timeout, qw( rpm -q --changelog openssl ) );
}

sub check_for_immutable_files {
    return if !-x '/usr/bin/lsattr';

    my @path_dirs = split( m{:}, $ENV{'PATH'} );
    push @path_dirs, '/etc/cpbackup.conf', '/etc/exim.conf';

    foreach my $file ( grep ( m/^-[-]*(?:a|i)/, split( /\n/, timed_run( 0, 'lsattr', @path_dirs ) ) ) ) {
        print_warn('Immutable file: ');
        print_warning("$file");
    }
    my @recursive_path_dirs = qw ( /usr/local/apache /var/cpanel/backups );

    foreach my $file ( grep ( m/^-[-]*(?:a|i)/, split( /\n/, timed_run( 0, 'lsattr', '-R', @recursive_path_dirs ) ) ) ) {
        print_warn('Immutable file: ');
        print_warning("$file");
    }
}

sub check_for_immutable_dirs {
    return if !-x '/usr/bin/lsattr';

    my @dirs = qw( / /usr/local/apache /usr/local/apache/conf /usr/local/apache/htdocs );

    foreach my $dir ( grep ( m/^-[-]*(?:a|i)/, split( /\n/, timed_run( 0, 'lsattr', '-d', @dirs ) ) ) ) {
        print_warn('Immutable and/or append-only directory: ');
        if ( $dir =~ m#\s/\z# ) {
            print_warning("$dir  This can mess with EA. See ticket 4929961");
        }
        else {
            print_warning($dir);
        }
    }
}

sub check_for_cloudlinux_mysql_gov {
    if ( my @cl_mysql_rpms = grep ( m{^cl-MySQL-}, @rpm_list ) ) {
        print_warn("CloudLinux MySQL (see FB 64017): ");
        print_warning( join( " ", @cl_mysql_rpms ) );
    }
}

sub check_cpanel_config_for_low_maxmem {
    if ( $cpconf{'maxmem'} && $cpconf{'maxmem'} < 512 ) {
        print_warn("/var/cpanel/cpanel.config: ");
        print_warning("maxmem < 512M, value=$cpconf{'maxmem'} phpmyadmin may fail");
    }

    if ( $cpconf{'use_safe_quotas'} ) {
        print_warn("/var/cpanel/cpanel.config: ");
        print_warning("use_safe_quotas=1 suspend and unsuspend will be slow");
    }
}

sub check_pure_ftpd_conf_for_upload_script_and_dead {
    return unless $cpconf{'ftpserver'} && $cpconf{'ftpserver'} eq 'pure-ftpd';

    if ( open( my $pureftpdconf_fh, '<', '/etc/pure-ftpd.conf' ) ) {
        local $/ = undef;
        %pureftpdconf = map { ( split( /\s+/, $_, 2 ) )[ 0, 1 ] } split( /\n/, readline($pureftpdconf_fh) );
    }

    if ( $pureftpdconf{'CallUploadScript'} && $pureftpdconf{'CallUploadScript'} eq 'yes' ) {
        if ( !-e '/var/run/pure-ftpd.upload.pipe' ) {
            print_warn("/etc/pure-ftpd.conf: ");
            print_warning("CallUploadScript set to yes, /var/run/pure-ftpd.upload.pipe is missing [might be broken ConfigServer's cxs ( http://configserver.com/cp/cxs.html )]");
        }
        else {
            my $out = timed_run( 0, 'lsof', '-n', '/var/run/pure-ftpd.upload.pipe' );
            if ( !$out ) {
                print_warn("/etc/pure-ftpd.conf: ");
                print_warning("CallUploadScript set to yes, and /var/run/pure-ftpd.upload.pipe does not seem to have anything listening on it. [might be broken ConfigServer's cxs ( http://configserver.com/cp/cxs.html )]");
            }
        }
    }
}


1;
